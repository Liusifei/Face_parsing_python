// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/caffe/proto/caffe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/caffe/proto/caffe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe {
class BlobShapeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlobShape>
     _instance;
} _BlobShape_default_instance_;
class BlobProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlobProto>
     _instance;
} _BlobProto_default_instance_;
class BlobProtoVectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BlobProtoVector>
     _instance;
} _BlobProtoVector_default_instance_;
class DatumDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Datum>
     _instance;
} _Datum_default_instance_;
class FillerParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FillerParameter>
     _instance;
} _FillerParameter_default_instance_;
class NetParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetParameter>
     _instance;
} _NetParameter_default_instance_;
class TestProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestProto>
     _instance;
} _TestProto_default_instance_;
class TestProtosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TestProtos>
     _instance;
} _TestProtos_default_instance_;
class SolverParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SolverParameter>
     _instance;
} _SolverParameter_default_instance_;
class SolverStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SolverState>
     _instance;
} _SolverState_default_instance_;
class NetStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetState>
     _instance;
} _NetState_default_instance_;
class NetStateRuleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetStateRule>
     _instance;
} _NetStateRule_default_instance_;
class ParamSpecDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParamSpec>
     _instance;
} _ParamSpec_default_instance_;
class LayerParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LayerParameter>
     _instance;
} _LayerParameter_default_instance_;
class GateRecurrent2dParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateRecurrent2dParameter>
     _instance;
} _GateRecurrent2dParameter_default_instance_;
class GateRecurrent2dmaskParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateRecurrent2dmaskParameter>
     _instance;
} _GateRecurrent2dmaskParameter_default_instance_;
class GateRecurrent2dnoindParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateRecurrent2dnoindParameter>
     _instance;
} _GateRecurrent2dnoindParameter_default_instance_;
class GateRecurrent2dmaxParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateRecurrent2dmaxParameter>
     _instance;
} _GateRecurrent2dmaxParameter_default_instance_;
class LearnCRFParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LearnCRFParameter>
     _instance;
} _LearnCRFParameter_default_instance_;
class TopInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TopInfo>
     _instance;
} _TopInfo_default_instance_;
class SegmentDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SegmentDataParameter>
     _instance;
} _SegmentDataParameter_default_instance_;
class TripletDataSubParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TripletDataSubParameter>
     _instance;
} _TripletDataSubParameter_default_instance_;
class TripletDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TripletDataParameter>
     _instance;
} _TripletDataParameter_default_instance_;
class FacerecImageDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FacerecImageDataParameter>
     _instance;
} _FacerecImageDataParameter_default_instance_;
class PadParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PadParameter>
     _instance;
} _PadParameter_default_instance_;
class ImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
     _instance;
} _ImageInfo_default_instance_;
class AffineImageParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AffineImageParameter>
     _instance;
} _AffineImageParameter_default_instance_;
class L2NormParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<L2NormParameter>
     _instance;
} _L2NormParameter_default_instance_;
class TripletLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TripletLossParameter>
     _instance;
} _TripletLossParameter_default_instance_;
class PairImageDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PairImageDataParameter>
     _instance;
} _PairImageDataParameter_default_instance_;
class DenseCRFParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DenseCRFParameter>
     _instance;
} _DenseCRFParameter_default_instance_;
class GateRecurrentParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateRecurrentParameter>
     _instance;
} _GateRecurrentParameter_default_instance_;
class GateLstmParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GateLstmParameter>
     _instance;
} _GateLstmParameter_default_instance_;
class HardSampleParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HardSampleParameter>
     _instance;
} _HardSampleParameter_default_instance_;
class SuperCropParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SuperCropParameter>
     _instance;
} _SuperCropParameter_default_instance_;
class MapMetricLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapMetricLossParameter>
     _instance;
} _MapMetricLossParameter_default_instance_;
class RegionconvolutionParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionconvolutionParameter>
     _instance;
} _RegionconvolutionParameter_default_instance_;
class BNParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BNParameter>
     _instance;
} _BNParameter_default_instance_;
class ElementHingeLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ElementHingeLossParameter>
     _instance;
} _ElementHingeLossParameter_default_instance_;
class ManipulateLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ManipulateLossParameter>
     _instance;
} _ManipulateLossParameter_default_instance_;
class ResizeParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResizeParameter>
     _instance;
} _ResizeParameter_default_instance_;
class TemporalLstmParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TemporalLstmParameter>
     _instance;
} _TemporalLstmParameter_default_instance_;
class WeakGateLstmParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeakGateLstmParameter>
     _instance;
} _WeakGateLstmParameter_default_instance_;
class SpatialLstmParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpatialLstmParameter>
     _instance;
} _SpatialLstmParameter_default_instance_;
class SpatialRecurrentParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SpatialRecurrentParameter>
     _instance;
} _SpatialRecurrentParameter_default_instance_;
class ManipulatelabelParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ManipulatelabelParameter>
     _instance;
} _ManipulatelabelParameter_default_instance_;
class ImageDataArbitraryParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageDataArbitraryParameter>
     _instance;
} _ImageDataArbitraryParameter_default_instance_;
class ImageDataTextLabelParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageDataTextLabelParameter>
     _instance;
} _ImageDataTextLabelParameter_default_instance_;
class TransformationParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransformationParameter>
     _instance;
} _TransformationParameter_default_instance_;
class LossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LossParameter>
     _instance;
} _LossParameter_default_instance_;
class AccuracyParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AccuracyParameter>
     _instance;
} _AccuracyParameter_default_instance_;
class ArgMaxParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ArgMaxParameter>
     _instance;
} _ArgMaxParameter_default_instance_;
class ConcatParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConcatParameter>
     _instance;
} _ConcatParameter_default_instance_;
class BatchNormParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BatchNormParameter>
     _instance;
} _BatchNormParameter_default_instance_;
class BiasParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BiasParameter>
     _instance;
} _BiasParameter_default_instance_;
class ContrastiveLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ContrastiveLossParameter>
     _instance;
} _ContrastiveLossParameter_default_instance_;
class HuberLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuberLossParameter>
     _instance;
} _HuberLossParameter_default_instance_;
class ConvolutionParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionParameter>
     _instance;
} _ConvolutionParameter_default_instance_;
class CropParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CropParameter>
     _instance;
} _CropParameter_default_instance_;
class DataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DataParameter>
     _instance;
} _DataParameter_default_instance_;
class DropoutParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DropoutParameter>
     _instance;
} _DropoutParameter_default_instance_;
class DummyDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DummyDataParameter>
     _instance;
} _DummyDataParameter_default_instance_;
class EltwiseParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EltwiseParameter>
     _instance;
} _EltwiseParameter_default_instance_;
class ELUParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ELUParameter>
     _instance;
} _ELUParameter_default_instance_;
class DivideParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DivideParameter>
     _instance;
} _DivideParameter_default_instance_;
class EmbedParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmbedParameter>
     _instance;
} _EmbedParameter_default_instance_;
class ExpParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExpParameter>
     _instance;
} _ExpParameter_default_instance_;
class FlattenParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FlattenParameter>
     _instance;
} _FlattenParameter_default_instance_;
class HDF5DataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HDF5DataParameter>
     _instance;
} _HDF5DataParameter_default_instance_;
class HDF5OutputParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HDF5OutputParameter>
     _instance;
} _HDF5OutputParameter_default_instance_;
class HingeLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HingeLossParameter>
     _instance;
} _HingeLossParameter_default_instance_;
class ImageDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageDataParameter>
     _instance;
} _ImageDataParameter_default_instance_;
class InfogainLossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InfogainLossParameter>
     _instance;
} _InfogainLossParameter_default_instance_;
class InnerProductParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InnerProductParameter>
     _instance;
} _InnerProductParameter_default_instance_;
class InputParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InputParameter>
     _instance;
} _InputParameter_default_instance_;
class LogParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogParameter>
     _instance;
} _LogParameter_default_instance_;
class LRNParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LRNParameter>
     _instance;
} _LRNParameter_default_instance_;
class MemoryDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MemoryDataParameter>
     _instance;
} _MemoryDataParameter_default_instance_;
class MVNParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MVNParameter>
     _instance;
} _MVNParameter_default_instance_;
class PoolingParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PoolingParameter>
     _instance;
} _PoolingParameter_default_instance_;
class PowerParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PowerParameter>
     _instance;
} _PowerParameter_default_instance_;
class PythonParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PythonParameter>
     _instance;
} _PythonParameter_default_instance_;
class ReductionParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReductionParameter>
     _instance;
} _ReductionParameter_default_instance_;
class ReLUParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReLUParameter>
     _instance;
} _ReLUParameter_default_instance_;
class ReshapeParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReshapeParameter>
     _instance;
} _ReshapeParameter_default_instance_;
class ScaleParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScaleParameter>
     _instance;
} _ScaleParameter_default_instance_;
class SigmoidParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SigmoidParameter>
     _instance;
} _SigmoidParameter_default_instance_;
class SliceParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SliceParameter>
     _instance;
} _SliceParameter_default_instance_;
class SoftmaxParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SoftmaxParameter>
     _instance;
} _SoftmaxParameter_default_instance_;
class TanHParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TanHParameter>
     _instance;
} _TanHParameter_default_instance_;
class TileParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TileParameter>
     _instance;
} _TileParameter_default_instance_;
class ThresholdParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ThresholdParameter>
     _instance;
} _ThresholdParameter_default_instance_;
class WindowDataParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WindowDataParameter>
     _instance;
} _WindowDataParameter_default_instance_;
class SPPParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SPPParameter>
     _instance;
} _SPPParameter_default_instance_;
class V1LayerParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<V1LayerParameter>
     _instance;
} _V1LayerParameter_default_instance_;
class V0LayerParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<V0LayerParameter>
     _instance;
} _V0LayerParameter_default_instance_;
class UpsampleParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpsampleParameter>
     _instance;
} _UpsampleParameter_default_instance_;
class PReLUParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PReLUParameter>
     _instance;
} _PReLUParameter_default_instance_;
class Triplet01LossParameterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Triplet01LossParameter>
     _instance;
} _Triplet01LossParameter_default_instance_;

namespace protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[99];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[43];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobShape, dim_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, double_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, width_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProtoVector, blobs_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, float_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, encoded_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, sparse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillerParameter, variance_norm_),
  0,
  1,
  2,
  6,
  3,
  7,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, input_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, force_backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layers_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, test_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, test_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, map_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, affine_image_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, deploy_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, key_points_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, data_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, output_layername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, datascale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, meanvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, topn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, save_feature_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, source_splitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, data_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, out_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, out_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, out_channels_),
  7,
  0,
  2,
  ~0u,
  1,
  8,
  3,
  4,
  16,
  9,
  ~0u,
  5,
  6,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProtos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProtos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProtos, test_proto_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, train_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_compute_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, base_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, average_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, iter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, lr_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, regularization_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, stepvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, clip_gradients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, momentum2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, rms_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, snapshot_after_train_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, solver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, print_datadiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, print_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, save_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, save_blob_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, save_test_blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParameter, test_protos_),
  3,
  8,
  0,
  ~0u,
  7,
  ~0u,
  9,
  ~0u,
  ~0u,
  11,
  22,
  33,
  12,
  13,
  36,
  14,
  38,
  1,
  15,
  16,
  17,
  18,
  4,
  19,
  ~0u,
  37,
  20,
  2,
  23,
  39,
  32,
  21,
  31,
  5,
  35,
  40,
  27,
  24,
  34,
  26,
  28,
  29,
  30,
  6,
  25,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, learned_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, current_step_),
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetState, stage_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, min_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, max_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStateRule, not_stage_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, share_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, lr_mult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamSpec, decay_mult_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, propagate_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, include_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, transform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, accuracy_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, argmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, batch_norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bias_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, concat_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, contrastive_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dummy_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eltwise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, elu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, embed_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, exp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flatten_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hdf5_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, infogain_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, inner_product_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, log_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, lrn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, memory_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mvn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, power_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, prelu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, python_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reduction_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, reshape_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, scale_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sigmoid_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, slice_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tanh_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, threshold_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, tile_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, window_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, upsample_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, triplet01_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gaterecurrent2dmask_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gaterecurrent2dnoind_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, divide_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gaterecurrent2dmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, huber_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_arbitrary_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, manipulate_label_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spatialrecurrent_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, spatiallstm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, weakgatelstm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, temporallstm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, resize_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, manipulate_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, element_hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, regionconvolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mapmetric_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, image_data_text_label_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, super_crop_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, hardsample_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gatelstm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gaterecurrent_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dense_crf_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pair_image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, triplet_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, l2norm_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pad_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, facerec_image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, triplet_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, segment_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, learn_crf_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, gaterecurrent2d_param_),
  0,
  1,
  ~0u,
  ~0u,
  81,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  41,
  43,
  6,
  7,
  8,
  46,
  9,
  10,
  11,
  12,
  42,
  39,
  13,
  37,
  14,
  15,
  16,
  17,
  18,
  19,
  45,
  36,
  20,
  21,
  22,
  23,
  24,
  33,
  32,
  38,
  25,
  35,
  44,
  26,
  27,
  34,
  28,
  29,
  30,
  40,
  31,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dParameter, active_),
  1,
  3,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaskParameter, active_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dnoindParameter, active_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, maxidpool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrent2dmaxParameter, active_),
  2,
  3,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnCRFParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnCRFParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnCRFParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnCRFParameter, dilation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, resize_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, src_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, gamma_distrib_alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, gamma_distrib_gamma_),
  5,
  0,
  1,
  ~0u,
  6,
  7,
  2,
  3,
  8,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, data_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, topinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, use_distrib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, distrib_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, distrib_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, distrib_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, distrib_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, source_splitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataParameter, use_flip_),
  0,
  1,
  ~0u,
  3,
  9,
  6,
  4,
  10,
  5,
  8,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, source_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, source_landmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, imgs_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, subjects_per_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, samples_per_subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, o3_subjects_per_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, o3_samples_per_subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataSubParameter, key_points_count_),
  0,
  2,
  3,
  1,
  7,
  8,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, train_sub_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, test_sub_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, is_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, flip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, image_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, affine_image_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, meanvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletDataParameter, datascale_),
  0,
  1,
  5,
  6,
  7,
  3,
  2,
  ~0u,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, useflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, rand_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, rand_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, rand_movex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, rand_movey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, select_num_per_instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, select_oneinstance_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, key_points_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, affine_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacerecImageDataParameter, data_folder_),
  0,
  5,
  6,
  3,
  4,
  7,
  8,
  2,
  11,
  9,
  10,
  12,
  13,
  14,
  17,
  15,
  16,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PadParameter, pad_h_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, is_color_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, center_ind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, norm_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, norm_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, fill_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, image_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineImageParameter, scale_),
  ~0u,
  5,
  6,
  4,
  2,
  1,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2NormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2NormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2NormParameter, eps_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, norm_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, sequencial_bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, use_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, print_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, ignore_hardest_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, use_hard_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletLossParameter, active_ignorehardest_len_),
  3,
  0,
  4,
  1,
  5,
  2,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, useflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, resize_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, data_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, data_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, data_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, rand_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, rand_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, rand_movex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, rand_movey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, select_num_per_instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, select_oneinstance_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairImageDataParameter, lmk_num_),
  0,
  4,
  5,
  1,
  3,
  6,
  2,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  15,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, pos_xy_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, pos_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, bi_xy_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, bi_rgb_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, bi_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseCRFParameter, output_probability_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, use_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, use_wx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, use_wh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, bound_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, restrict_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, restrict_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, use_x_gate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, use_new_fix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRecurrentParameter, slash_),
  2,
  8,
  9,
  10,
  0,
  1,
  11,
  4,
  3,
  12,
  13,
  14,
  6,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, restrict_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateLstmParameter, printall_datadiff_),
  2,
  5,
  0,
  1,
  6,
  3,
  7,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, pos_use_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, neg_use_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, pos_hard_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, neg_hard_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, neg_compare_pos_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, pos_ignore_hardest_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, neg_ignore_hardest_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, max_ignore_pos_hardest_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, max_ignore_neg_hardest_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, neg_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, pos_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, use_hardsample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, min_neg_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, min_pos_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardSampleParameter, print_info_),
  9,
  12,
  13,
  14,
  10,
  0,
  1,
  6,
  7,
  2,
  3,
  11,
  4,
  5,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, crop_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, crop_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, print_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, point_fix_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperCropParameter, point_fix_w_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, losstype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, sim_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, dis_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, sim_margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMetricLossParameter, dis_margin_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_patch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_patch_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_patch_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, input_stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_patch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_patch_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_patch_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, output_stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionconvolutionParameter, bias_filler_),
  2,
  19,
  3,
  5,
  6,
  4,
  7,
  8,
  21,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  22,
  17,
  18,
  20,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, scale_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BNParameter, shift_filler_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementHingeLossParameter, scale_loss_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_balancesample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, ignore_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_fullzeroignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, bg_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, uniform_droprate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_perchannel_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, drop_singleclasschannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, print_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateLossParameter, use_unionchannel_balance_),
  1,
  0,
  2,
  7,
  8,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, resize_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, is_pyramid_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_height_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeParameter, out_width_scale_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemporalLstmParameter, reverse_),
  2,
  4,
  0,
  1,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, restrict_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeakGateLstmParameter, printall_datadiff_),
  2,
  5,
  0,
  1,
  6,
  3,
  7,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialLstmParameter, reverse_),
  2,
  4,
  0,
  1,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, bound_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialRecurrentParameter, restrict_w_),
  2,
  6,
  0,
  1,
  7,
  3,
  4,
  8,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, maxlabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, edgerange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, duplicate_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, duplicate_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, reverse_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, both_edge_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulatelabelParameter, duplicate_isanyone_),
  0,
  5,
  6,
  7,
  8,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, useflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, resize_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_movex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataArbitraryParameter, rand_movey_),
  0,
  4,
  5,
  1,
  3,
  6,
  2,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, use_disturb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, useflip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, resize_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, data_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, data_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, data_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, data_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, textlabeltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, textlabel_num_perpixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, save_topdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, textlabel_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, textlabel_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, textlabel_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, heatmap_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, rand_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, rand_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, rand_movex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataTextLabelParameter, rand_movey_),
  0,
  4,
  5,
  1,
  3,
  6,
  2,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  12,
  13,
  14,
  15,
  18,
  16,
  17,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, mean_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationParameter, force_gray_),
  5,
  2,
  1,
  0,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, ignore_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossParameter, normalize_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccuracyParameter, ignore_label_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, out_max_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, top_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgMaxParameter, axis_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatParameter, concat_dim_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, use_global_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, moving_average_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchNormParameter, eps_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, num_axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiasParameter, filler_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContrastiveLossParameter, legacy_version_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuberLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuberLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuberLossParameter, delta_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, dilation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, kernel_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, force_nd_im2col_),
  2,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  0,
  1,
  9,
  11,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropParameter, offset_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, backend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, force_encoded_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, prefetch_),
  0,
  2,
  4,
  7,
  8,
  1,
  3,
  5,
  6,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropoutParameter, dropout_ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, data_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyDataParameter, width_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EltwiseParameter, stable_prod_grad_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ELUParameter, alpha_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivideParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivideParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivideParameter, alpha_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, input_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmbedParameter, bias_filler_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlattenParameter, end_axis_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5DataParameter, shuffle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDF5OutputParameter, file_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HingeLossParameter, norm_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, new_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, is_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, root_folder_),
  0,
  11,
  4,
  5,
  7,
  8,
  9,
  10,
  1,
  3,
  6,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfogainLossParameter, source_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerProductParameter, transpose_),
  2,
  4,
  0,
  1,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, shape_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, local_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, norm_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParameter, engine_),
  2,
  3,
  4,
  0,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryDataParameter, width_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, normalize_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, across_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVNParameter, eps_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, pad_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, kernel_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, stride_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, global_pooling_),
  0,
  2,
  7,
  8,
  1,
  3,
  4,
  11,
  5,
  6,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerParameter, shift_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, module_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, param_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PythonParameter, share_in_parallel_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReductionParameter, coeff_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, negative_slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParameter, engine_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReshapeParameter, num_axes_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, num_axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleParameter, bias_filler_),
  3,
  4,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParameter, engine_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SliceParameter, slice_dim_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, axis_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TanHParameter, engine_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileParameter, tiles_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThresholdParameter, threshold_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, bg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, fg_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, context_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, crop_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, cache_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowDataParameter, root_folder_),
  0,
  9,
  1,
  4,
  5,
  6,
  10,
  11,
  12,
  8,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pyramid_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPParameter, engine_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, include_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exclude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blob_share_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, blobs_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, accuracy_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, argmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, concat_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, contrastive_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dropout_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, dummy_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, eltwise_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, exp_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hdf5_output_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, hinge_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, image_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, infogain_loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, inner_product_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, lrn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, memory_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, mvn_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, pooling_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, power_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, relu_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, sigmoid_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, softmax_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, slice_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, tanh_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, threshold_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, window_data_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, transform_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, loss_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V1LayerParameter, layer_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  32,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  20,
  16,
  2,
  29,
  3,
  4,
  5,
  19,
  17,
  30,
  6,
  7,
  21,
  8,
  9,
  10,
  11,
  15,
  24,
  12,
  14,
  22,
  27,
  28,
  23,
  26,
  18,
  13,
  25,
  31,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, biasterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, bias_filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, kernelsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, pool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, dropout_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, local_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, meanfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, batchsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, cropsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, blobs_lr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, weight_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, rand_skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_bg_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_fg_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_context_pad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, det_crop_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, new_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, shuffle_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, concat_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V0LayerParameter, hdf5_output_param_),
  0,
  1,
  8,
  23,
  5,
  6,
  9,
  10,
  24,
  25,
  11,
  26,
  27,
  28,
  29,
  31,
  2,
  30,
  3,
  12,
  13,
  15,
  ~0u,
  ~0u,
  ~0u,
  17,
  32,
  33,
  34,
  18,
  4,
  19,
  20,
  21,
  14,
  16,
  22,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, scale_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, scale_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, pad_out_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, pad_out_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, upsample_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsampleParameter, upsample_w_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, filler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PReLUParameter, channel_shared_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triplet01LossParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triplet01LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triplet01LossParameter, margin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triplet01LossParameter, print_time_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(BlobShape)},
  { 7, 21, sizeof(BlobProto)},
  { 30, 36, sizeof(BlobProtoVector)},
  { 37, 49, sizeof(Datum)},
  { 56, 69, sizeof(FillerParameter)},
  { 77, 91, sizeof(NetParameter)},
  { 100, 124, sizeof(TestProto)},
  { 143, 149, sizeof(TestProtos)},
  { 150, 201, sizeof(SolverParameter)},
  { 247, 256, sizeof(SolverState)},
  { 260, 268, sizeof(NetState)},
  { 271, 281, sizeof(NetStateRule)},
  { 286, 295, sizeof(ParamSpec)},
  { 299, 394, sizeof(LayerParameter)},
  { 484, 493, sizeof(GateRecurrent2dParameter)},
  { 497, 506, sizeof(GateRecurrent2dmaskParameter)},
  { 510, 519, sizeof(GateRecurrent2dnoindParameter)},
  { 523, 533, sizeof(GateRecurrent2dmaxParameter)},
  { 538, 545, sizeof(LearnCRFParameter)},
  { 547, 562, sizeof(TopInfo)},
  { 572, 589, sizeof(SegmentDataParameter)},
  { 601, 615, sizeof(TripletDataSubParameter)},
  { 624, 639, sizeof(TripletDataParameter)},
  { 649, 673, sizeof(FacerecImageDataParameter)},
  { 692, 699, sizeof(PadParameter)},
  { 701, 709, sizeof(ImageInfo)},
  { 712, 725, sizeof(AffineImageParameter)},
  { 733, 739, sizeof(L2NormParameter)},
  { 740, 754, sizeof(TripletLossParameter)},
  { 763, 790, sizeof(PairImageDataParameter)},
  { 812, 824, sizeof(DenseCRFParameter)},
  { 831, 851, sizeof(GateRecurrentParameter)},
  { 866, 879, sizeof(GateLstmParameter)},
  { 887, 907, sizeof(HardSampleParameter)},
  { 922, 933, sizeof(SuperCropParameter)},
  { 939, 949, sizeof(MapMetricLossParameter)},
  { 954, 982, sizeof(RegionconvolutionParameter)},
  { 1005, 1012, sizeof(BNParameter)},
  { 1014, 1021, sizeof(ElementHingeLossParameter)},
  { 1023, 1037, sizeof(ManipulateLossParameter)},
  { 1046, 1058, sizeof(ResizeParameter)},
  { 1065, 1076, sizeof(TemporalLstmParameter)},
  { 1082, 1095, sizeof(WeakGateLstmParameter)},
  { 1103, 1114, sizeof(SpatialLstmParameter)},
  { 1120, 1134, sizeof(SpatialRecurrentParameter)},
  { 1143, 1157, sizeof(ManipulatelabelParameter)},
  { 1166, 1189, sizeof(ImageDataArbitraryParameter)},
  { 1207, 1238, sizeof(ImageDataTextLabelParameter)},
  { 1264, 1276, sizeof(TransformationParameter)},
  { 1283, 1291, sizeof(LossParameter)},
  { 1294, 1302, sizeof(AccuracyParameter)},
  { 1305, 1313, sizeof(ArgMaxParameter)},
  { 1316, 1323, sizeof(ConcatParameter)},
  { 1325, 1333, sizeof(BatchNormParameter)},
  { 1336, 1344, sizeof(BiasParameter)},
  { 1347, 1354, sizeof(ContrastiveLossParameter)},
  { 1356, 1362, sizeof(HuberLossParameter)},
  { 1363, 1386, sizeof(ConvolutionParameter)},
  { 1404, 1411, sizeof(CropParameter)},
  { 1413, 1428, sizeof(DataParameter)},
  { 1438, 1444, sizeof(DropoutParameter)},
  { 1445, 1456, sizeof(DummyDataParameter)},
  { 1462, 1470, sizeof(EltwiseParameter)},
  { 1473, 1479, sizeof(ELUParameter)},
  { 1480, 1486, sizeof(DivideParameter)},
  { 1487, 1497, sizeof(EmbedParameter)},
  { 1502, 1510, sizeof(ExpParameter)},
  { 1513, 1520, sizeof(FlattenParameter)},
  { 1522, 1530, sizeof(HDF5DataParameter)},
  { 1533, 1539, sizeof(HDF5OutputParameter)},
  { 1540, 1546, sizeof(HingeLossParameter)},
  { 1547, 1564, sizeof(ImageDataParameter)},
  { 1576, 1582, sizeof(InfogainLossParameter)},
  { 1583, 1594, sizeof(InnerProductParameter)},
  { 1600, 1606, sizeof(InputParameter)},
  { 1607, 1615, sizeof(LogParameter)},
  { 1618, 1629, sizeof(LRNParameter)},
  { 1635, 1644, sizeof(MemoryDataParameter)},
  { 1648, 1656, sizeof(MVNParameter)},
  { 1659, 1676, sizeof(PoolingParameter)},
  { 1688, 1696, sizeof(PowerParameter)},
  { 1699, 1708, sizeof(PythonParameter)},
  { 1712, 1720, sizeof(ReductionParameter)},
  { 1723, 1730, sizeof(ReLUParameter)},
  { 1732, 1740, sizeof(ReshapeParameter)},
  { 1743, 1753, sizeof(ScaleParameter)},
  { 1758, 1764, sizeof(SigmoidParameter)},
  { 1765, 1773, sizeof(SliceParameter)},
  { 1776, 1783, sizeof(SoftmaxParameter)},
  { 1785, 1791, sizeof(TanHParameter)},
  { 1792, 1799, sizeof(TileParameter)},
  { 1801, 1807, sizeof(ThresholdParameter)},
  { 1808, 1826, sizeof(WindowDataParameter)},
  { 1839, 1847, sizeof(SPPParameter)},
  { 1850, 1898, sizeof(V1LayerParameter)},
  { 1941, 1984, sizeof(V0LayerParameter)},
  { 2022, 2034, sizeof(UpsampleParameter)},
  { 2041, 2048, sizeof(PReLUParameter)},
  { 2050, 2057, sizeof(Triplet01LossParameter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobShape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlobProtoVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FillerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestProtos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SolverState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetStateRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParamSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateRecurrent2dParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateRecurrent2dmaskParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateRecurrent2dnoindParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateRecurrent2dmaxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearnCRFParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TopInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SegmentDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TripletDataSubParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TripletDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FacerecImageDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PadParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AffineImageParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_L2NormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TripletLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PairImageDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DenseCRFParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateRecurrentParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GateLstmParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HardSampleParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SuperCropParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapMetricLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionconvolutionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BNParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ElementHingeLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManipulateLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TemporalLstmParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeakGateLstmParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpatialLstmParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpatialRecurrentParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManipulatelabelParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDataArbitraryParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDataTextLabelParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransformationParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccuracyParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ArgMaxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConcatParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchNormParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BiasParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContrastiveLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuberLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CropParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropoutParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DummyDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EltwiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ELUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DivideParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmbedParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExpParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlattenParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HDF5DataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HDF5OutputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HingeLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfogainLossParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InnerProductParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LRNParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MVNParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoolingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PowerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PythonParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReductionParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReLUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReshapeParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScaleParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SigmoidParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SliceParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftmaxParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TanHParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TileParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ThresholdParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindowDataParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SPPParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_V1LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_V0LayerParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpsampleParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PReLUParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Triplet01LossParameter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/caffe/proto/caffe.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 99);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BlobShape_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlobShape_default_instance_);_BlobProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlobProto_default_instance_);_BlobProtoVector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BlobProtoVector_default_instance_);_Datum_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Datum_default_instance_);FillerParameter::_default_type_.DefaultConstruct();
  *FillerParameter::_default_type_.get_mutable() = ::std::string("constant", 8);
  ::google::protobuf::internal::OnShutdownDestroyString(
      FillerParameter::_default_type_.get_mutable());
  _FillerParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FillerParameter_default_instance_);_NetParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetParameter_default_instance_);TestProto::_default_source_splitflag_.DefaultConstruct();
  *TestProto::_default_source_splitflag_.get_mutable() = ::std::string("||", 2);
  ::google::protobuf::internal::OnShutdownDestroyString(
      TestProto::_default_source_splitflag_.get_mutable());
  _TestProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestProto_default_instance_);_TestProtos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TestProtos_default_instance_);SolverParameter::_default_regularization_type_.DefaultConstruct();
  *SolverParameter::_default_regularization_type_.get_mutable() = ::std::string("L2", 2);
  ::google::protobuf::internal::OnShutdownDestroyString(
      SolverParameter::_default_regularization_type_.get_mutable());
  SolverParameter::_default_type_.DefaultConstruct();
  *SolverParameter::_default_type_.get_mutable() = ::std::string("SGD", 3);
  ::google::protobuf::internal::OnShutdownDestroyString(
      SolverParameter::_default_type_.get_mutable());
  _SolverParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SolverParameter_default_instance_);_SolverState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SolverState_default_instance_);_NetState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetState_default_instance_);_NetStateRule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetStateRule_default_instance_);_ParamSpec_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParamSpec_default_instance_);_LayerParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LayerParameter_default_instance_);_GateRecurrent2dParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateRecurrent2dParameter_default_instance_);_GateRecurrent2dmaskParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateRecurrent2dmaskParameter_default_instance_);_GateRecurrent2dnoindParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateRecurrent2dnoindParameter_default_instance_);_GateRecurrent2dmaxParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateRecurrent2dmaxParameter_default_instance_);_LearnCRFParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LearnCRFParameter_default_instance_);_TopInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TopInfo_default_instance_);SegmentDataParameter::_default_source_splitflag_.DefaultConstruct();
  *SegmentDataParameter::_default_source_splitflag_.get_mutable() = ::std::string("||", 2);
  ::google::protobuf::internal::OnShutdownDestroyString(
      SegmentDataParameter::_default_source_splitflag_.get_mutable());
  _SegmentDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SegmentDataParameter_default_instance_);_TripletDataSubParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TripletDataSubParameter_default_instance_);_TripletDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TripletDataParameter_default_instance_);_FacerecImageDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FacerecImageDataParameter_default_instance_);_PadParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PadParameter_default_instance_);_ImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageInfo_default_instance_);_AffineImageParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AffineImageParameter_default_instance_);_L2NormParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_L2NormParameter_default_instance_);_TripletLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TripletLossParameter_default_instance_);_PairImageDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PairImageDataParameter_default_instance_);_DenseCRFParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DenseCRFParameter_default_instance_);_GateRecurrentParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateRecurrentParameter_default_instance_);_GateLstmParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GateLstmParameter_default_instance_);_HardSampleParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HardSampleParameter_default_instance_);_SuperCropParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SuperCropParameter_default_instance_);_MapMetricLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapMetricLossParameter_default_instance_);_RegionconvolutionParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionconvolutionParameter_default_instance_);_BNParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BNParameter_default_instance_);_ElementHingeLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ElementHingeLossParameter_default_instance_);_ManipulateLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ManipulateLossParameter_default_instance_);_ResizeParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResizeParameter_default_instance_);_TemporalLstmParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TemporalLstmParameter_default_instance_);_WeakGateLstmParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeakGateLstmParameter_default_instance_);_SpatialLstmParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpatialLstmParameter_default_instance_);_SpatialRecurrentParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SpatialRecurrentParameter_default_instance_);_ManipulatelabelParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ManipulatelabelParameter_default_instance_);_ImageDataArbitraryParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageDataArbitraryParameter_default_instance_);_ImageDataTextLabelParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageDataTextLabelParameter_default_instance_);_TransformationParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransformationParameter_default_instance_);_LossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LossParameter_default_instance_);_AccuracyParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AccuracyParameter_default_instance_);_ArgMaxParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ArgMaxParameter_default_instance_);_ConcatParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConcatParameter_default_instance_);_BatchNormParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BatchNormParameter_default_instance_);_BiasParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BiasParameter_default_instance_);_ContrastiveLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ContrastiveLossParameter_default_instance_);_HuberLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuberLossParameter_default_instance_);_ConvolutionParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvolutionParameter_default_instance_);_CropParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CropParameter_default_instance_);_DataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DataParameter_default_instance_);_DropoutParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DropoutParameter_default_instance_);_DummyDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DummyDataParameter_default_instance_);_EltwiseParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EltwiseParameter_default_instance_);_ELUParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ELUParameter_default_instance_);_DivideParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DivideParameter_default_instance_);_EmbedParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmbedParameter_default_instance_);_ExpParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExpParameter_default_instance_);_FlattenParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FlattenParameter_default_instance_);_HDF5DataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HDF5DataParameter_default_instance_);_HDF5OutputParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HDF5OutputParameter_default_instance_);_HingeLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HingeLossParameter_default_instance_);_ImageDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageDataParameter_default_instance_);_InfogainLossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InfogainLossParameter_default_instance_);_InnerProductParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InnerProductParameter_default_instance_);_InputParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InputParameter_default_instance_);_LogParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogParameter_default_instance_);_LRNParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LRNParameter_default_instance_);_MemoryDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MemoryDataParameter_default_instance_);_MVNParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MVNParameter_default_instance_);_PoolingParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PoolingParameter_default_instance_);_PowerParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PowerParameter_default_instance_);_PythonParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PythonParameter_default_instance_);_ReductionParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReductionParameter_default_instance_);_ReLUParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReLUParameter_default_instance_);_ReshapeParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReshapeParameter_default_instance_);_ScaleParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScaleParameter_default_instance_);_SigmoidParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SigmoidParameter_default_instance_);_SliceParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SliceParameter_default_instance_);_SoftmaxParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SoftmaxParameter_default_instance_);_TanHParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TanHParameter_default_instance_);_TileParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TileParameter_default_instance_);_ThresholdParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ThresholdParameter_default_instance_);WindowDataParameter::_default_crop_mode_.DefaultConstruct();
  *WindowDataParameter::_default_crop_mode_.get_mutable() = ::std::string("warp", 4);
  ::google::protobuf::internal::OnShutdownDestroyString(
      WindowDataParameter::_default_crop_mode_.get_mutable());
  _WindowDataParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WindowDataParameter_default_instance_);_SPPParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SPPParameter_default_instance_);_V1LayerParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_V1LayerParameter_default_instance_);V0LayerParameter::_default_det_crop_mode_.DefaultConstruct();
  *V0LayerParameter::_default_det_crop_mode_.get_mutable() = ::std::string("warp", 4);
  ::google::protobuf::internal::OnShutdownDestroyString(
      V0LayerParameter::_default_det_crop_mode_.get_mutable());
  _V0LayerParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_V0LayerParameter_default_instance_);_UpsampleParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpsampleParameter_default_instance_);_PReLUParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PReLUParameter_default_instance_);_Triplet01LossParameter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Triplet01LossParameter_default_instance_);_BlobProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _NetParameter_default_instance_._instance.get_mutable()->state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _SolverParameter_default_instance_._instance.get_mutable()->net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_._instance.get_mutable()->train_net_param_ = const_cast< ::caffe::NetParameter*>(
      ::caffe::NetParameter::internal_default_instance());
  _SolverParameter_default_instance_._instance.get_mutable()->train_state_ = const_cast< ::caffe::NetState*>(
      ::caffe::NetState::internal_default_instance());
  _SolverParameter_default_instance_._instance.get_mutable()->test_protos_ = const_cast< ::caffe::TestProtos*>(
      ::caffe::TestProtos::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->batch_norm_param_ = const_cast< ::caffe::BatchNormParameter*>(
      ::caffe::BatchNormParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->bias_param_ = const_cast< ::caffe::BiasParameter*>(
      ::caffe::BiasParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->crop_param_ = const_cast< ::caffe::CropParameter*>(
      ::caffe::CropParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->elu_param_ = const_cast< ::caffe::ELUParameter*>(
      ::caffe::ELUParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->embed_param_ = const_cast< ::caffe::EmbedParameter*>(
      ::caffe::EmbedParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->flatten_param_ = const_cast< ::caffe::FlattenParameter*>(
      ::caffe::FlattenParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->input_param_ = const_cast< ::caffe::InputParameter*>(
      ::caffe::InputParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->log_param_ = const_cast< ::caffe::LogParameter*>(
      ::caffe::LogParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->prelu_param_ = const_cast< ::caffe::PReLUParameter*>(
      ::caffe::PReLUParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->python_param_ = const_cast< ::caffe::PythonParameter*>(
      ::caffe::PythonParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->reduction_param_ = const_cast< ::caffe::ReductionParameter*>(
      ::caffe::ReductionParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->reshape_param_ = const_cast< ::caffe::ReshapeParameter*>(
      ::caffe::ReshapeParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->scale_param_ = const_cast< ::caffe::ScaleParameter*>(
      ::caffe::ScaleParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->spp_param_ = const_cast< ::caffe::SPPParameter*>(
      ::caffe::SPPParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->tile_param_ = const_cast< ::caffe::TileParameter*>(
      ::caffe::TileParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->upsample_param_ = const_cast< ::caffe::UpsampleParameter*>(
      ::caffe::UpsampleParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->triplet01_loss_param_ = const_cast< ::caffe::Triplet01LossParameter*>(
      ::caffe::Triplet01LossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gaterecurrent2dmask_param_ = const_cast< ::caffe::GateRecurrent2dmaskParameter*>(
      ::caffe::GateRecurrent2dmaskParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gaterecurrent2dnoind_param_ = const_cast< ::caffe::GateRecurrent2dnoindParameter*>(
      ::caffe::GateRecurrent2dnoindParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->divide_param_ = const_cast< ::caffe::DivideParameter*>(
      ::caffe::DivideParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gaterecurrent2dmax_param_ = const_cast< ::caffe::GateRecurrent2dmaxParameter*>(
      ::caffe::GateRecurrent2dmaxParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->huber_loss_param_ = const_cast< ::caffe::HuberLossParameter*>(
      ::caffe::HuberLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->image_data_arbitrary_param_ = const_cast< ::caffe::ImageDataArbitraryParameter*>(
      ::caffe::ImageDataArbitraryParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->manipulate_label_param_ = const_cast< ::caffe::ManipulatelabelParameter*>(
      ::caffe::ManipulatelabelParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->spatialrecurrent_param_ = const_cast< ::caffe::SpatialRecurrentParameter*>(
      ::caffe::SpatialRecurrentParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->spatiallstm_param_ = const_cast< ::caffe::SpatialLstmParameter*>(
      ::caffe::SpatialLstmParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->weakgatelstm_param_ = const_cast< ::caffe::WeakGateLstmParameter*>(
      ::caffe::WeakGateLstmParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->temporallstm_param_ = const_cast< ::caffe::TemporalLstmParameter*>(
      ::caffe::TemporalLstmParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->resize_param_ = const_cast< ::caffe::ResizeParameter*>(
      ::caffe::ResizeParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->manipulate_loss_param_ = const_cast< ::caffe::ManipulateLossParameter*>(
      ::caffe::ManipulateLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->element_hinge_loss_param_ = const_cast< ::caffe::ElementHingeLossParameter*>(
      ::caffe::ElementHingeLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->bn_param_ = const_cast< ::caffe::BNParameter*>(
      ::caffe::BNParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->regionconvolution_param_ = const_cast< ::caffe::RegionconvolutionParameter*>(
      ::caffe::RegionconvolutionParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->mapmetric_loss_param_ = const_cast< ::caffe::MapMetricLossParameter*>(
      ::caffe::MapMetricLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->image_data_text_label_param_ = const_cast< ::caffe::ImageDataTextLabelParameter*>(
      ::caffe::ImageDataTextLabelParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->super_crop_param_ = const_cast< ::caffe::SuperCropParameter*>(
      ::caffe::SuperCropParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->hardsample_param_ = const_cast< ::caffe::HardSampleParameter*>(
      ::caffe::HardSampleParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gatelstm_param_ = const_cast< ::caffe::GateLstmParameter*>(
      ::caffe::GateLstmParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gaterecurrent_param_ = const_cast< ::caffe::GateRecurrentParameter*>(
      ::caffe::GateRecurrentParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->dense_crf_param_ = const_cast< ::caffe::DenseCRFParameter*>(
      ::caffe::DenseCRFParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->pair_image_data_param_ = const_cast< ::caffe::PairImageDataParameter*>(
      ::caffe::PairImageDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->triplet_loss_param_ = const_cast< ::caffe::TripletLossParameter*>(
      ::caffe::TripletLossParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->l2norm_param_ = const_cast< ::caffe::L2NormParameter*>(
      ::caffe::L2NormParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->pad_param_ = const_cast< ::caffe::PadParameter*>(
      ::caffe::PadParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->facerec_image_data_param_ = const_cast< ::caffe::FacerecImageDataParameter*>(
      ::caffe::FacerecImageDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->triplet_data_param_ = const_cast< ::caffe::TripletDataParameter*>(
      ::caffe::TripletDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->segment_data_param_ = const_cast< ::caffe::SegmentDataParameter*>(
      ::caffe::SegmentDataParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->learn_crf_param_ = const_cast< ::caffe::LearnCRFParameter*>(
      ::caffe::LearnCRFParameter::internal_default_instance());
  _LayerParameter_default_instance_._instance.get_mutable()->gaterecurrent2d_param_ = const_cast< ::caffe::GateRecurrent2dParameter*>(
      ::caffe::GateRecurrent2dParameter::internal_default_instance());
  _TripletDataParameter_default_instance_._instance.get_mutable()->train_sub_param_ = const_cast< ::caffe::TripletDataSubParameter*>(
      ::caffe::TripletDataSubParameter::internal_default_instance());
  _TripletDataParameter_default_instance_._instance.get_mutable()->test_sub_param_ = const_cast< ::caffe::TripletDataSubParameter*>(
      ::caffe::TripletDataSubParameter::internal_default_instance());
  _TripletDataParameter_default_instance_._instance.get_mutable()->image_info_ = const_cast< ::caffe::ImageInfo*>(
      ::caffe::ImageInfo::internal_default_instance());
  _AffineImageParameter_default_instance_._instance.get_mutable()->image_info_ = const_cast< ::caffe::ImageInfo*>(
      ::caffe::ImageInfo::internal_default_instance());
  _GateRecurrentParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _GateRecurrentParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _GateLstmParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _GateLstmParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _RegionconvolutionParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _RegionconvolutionParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _BNParameter_default_instance_._instance.get_mutable()->scale_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _BNParameter_default_instance_._instance.get_mutable()->shift_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _TemporalLstmParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _TemporalLstmParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _WeakGateLstmParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _WeakGateLstmParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _SpatialLstmParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _SpatialLstmParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _SpatialRecurrentParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _SpatialRecurrentParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _BiasParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ConvolutionParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _EmbedParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _EmbedParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _InnerProductParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ReshapeParameter_default_instance_._instance.get_mutable()->shape_ = const_cast< ::caffe::BlobShape*>(
      ::caffe::BlobShape::internal_default_instance());
  _ScaleParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _ScaleParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::caffe::AccuracyParameter*>(
      ::caffe::AccuracyParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::caffe::ArgMaxParameter*>(
      ::caffe::ArgMaxParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::caffe::ConcatParameter*>(
      ::caffe::ConcatParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::caffe::ContrastiveLossParameter*>(
      ::caffe::ContrastiveLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::caffe::ConvolutionParameter*>(
      ::caffe::ConvolutionParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::caffe::DataParameter*>(
      ::caffe::DataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::caffe::DropoutParameter*>(
      ::caffe::DropoutParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::caffe::DummyDataParameter*>(
      ::caffe::DummyDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::caffe::EltwiseParameter*>(
      ::caffe::EltwiseParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::caffe::ExpParameter*>(
      ::caffe::ExpParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::caffe::HDF5DataParameter*>(
      ::caffe::HDF5DataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::caffe::HingeLossParameter*>(
      ::caffe::HingeLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::caffe::ImageDataParameter*>(
      ::caffe::ImageDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::caffe::InfogainLossParameter*>(
      ::caffe::InfogainLossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::caffe::InnerProductParameter*>(
      ::caffe::InnerProductParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::caffe::LRNParameter*>(
      ::caffe::LRNParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::caffe::MemoryDataParameter*>(
      ::caffe::MemoryDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::caffe::MVNParameter*>(
      ::caffe::MVNParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::caffe::PoolingParameter*>(
      ::caffe::PoolingParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::caffe::PowerParameter*>(
      ::caffe::PowerParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::caffe::ReLUParameter*>(
      ::caffe::ReLUParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::caffe::SigmoidParameter*>(
      ::caffe::SigmoidParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::caffe::SoftmaxParameter*>(
      ::caffe::SoftmaxParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::caffe::SliceParameter*>(
      ::caffe::SliceParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::caffe::TanHParameter*>(
      ::caffe::TanHParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::caffe::ThresholdParameter*>(
      ::caffe::ThresholdParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::caffe::WindowDataParameter*>(
      ::caffe::WindowDataParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::caffe::TransformationParameter*>(
      ::caffe::TransformationParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::caffe::LossParameter*>(
      ::caffe::LossParameter::internal_default_instance());
  _V1LayerParameter_default_instance_._instance.get_mutable()->layer_ = const_cast< ::caffe::V0LayerParameter*>(
      ::caffe::V0LayerParameter::internal_default_instance());
  _V0LayerParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V0LayerParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
  _V0LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::caffe::HDF5OutputParameter*>(
      ::caffe::HDF5OutputParameter::internal_default_instance());
  _PReLUParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::caffe::FillerParameter*>(
      ::caffe::FillerParameter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033src/caffe/proto/caffe.proto\022\005caffe\"\034\n\t"
      "BlobShape\022\017\n\003dim\030\001 \003(\003B\002\020\001\"\314\001\n\tBlobProto"
      "\022\037\n\005shape\030\007 \001(\0132\020.caffe.BlobShape\022\020\n\004dat"
      "a\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022\027\n\013double_"
      "data\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030\t \003(\001B\002\020\001\022"
      "\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006"
      "height\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\"2\n\017Blo"
      "bProtoVector\022\037\n\005blobs\030\001 \003(\0132\020.caffe.Blob"
      "Proto\"\201\001\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006hei"
      "ght\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r"
      "\n\005label\030\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007enc"
      "oded\030\007 \001(\010:\005false\"\212\002\n\017FillerParameter\022\026\n"
      "\004type\030\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(\002:\0010\022"
      "\016\n\003min\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030"
      "\005 \001(\002:\0010\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005"
      ":\002-1\022B\n\rvariance_norm\030\010 \001(\0162#.caffe.Fill"
      "erParameter.VarianceNorm:\006FAN_IN\"4\n\014Vari"
      "anceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT\020\001\022\013\n\007AVE"
      "RAGE\020\002\"\216\002\n\014NetParameter\022\014\n\004name\030\001 \001(\t\022\r\n"
      "\005input\030\003 \003(\t\022%\n\013input_shape\030\010 \003(\0132\020.caff"
      "e.BlobShape\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016force_"
      "backward\030\005 \001(\010:\005false\022\036\n\005state\030\006 \001(\0132\017.c"
      "affe.NetState\022\031\n\ndebug_info\030\007 \001(\010:\005false"
      "\022$\n\005layer\030d \003(\0132\025.caffe.LayerParameter\022\'"
      "\n\006layers\030\002 \003(\0132\027.caffe.V1LayerParameter\""
      "\241\004\n\tTestProto\022,\n\ttest_type\030\001 \001(\0162\031.caffe"
      ".TestProto.TestType\022\021\n\ttest_file\030\002 \001(\t\022\020"
      "\n\010map_file\030\006 \001(\t\0227\n\022affine_image_param\030\003"
      " \003(\0132\033.caffe.AffineImageParameter\022\022\n\ndep"
      "loy_net\030\004 \001(\t\022\030\n\020key_points_count\030\005 \001(\005\022"
      "\023\n\013data_folder\030\007 \001(\t\022\030\n\020output_layername"
      "\030\010 \001(\t\022\024\n\tdatascale\030\t \001(\002:\0011\022\024\n\tmeanvalu"
      "e\030\n \001(\002:\0010\022\014\n\004topn\030\013 \003(\005\022\037\n\025save_feature"
      "_filename\030\014 \001(\t:\000\022\034\n\020source_splitflag\030\r "
      "\001(\t:\002||\022\025\n\rdata_channels\030\016 \001(\005\022\r\n\005width\030"
      "\017 \001(\005\022\016\n\006height\030\020 \001(\005\022\022\n\nout_height\030\021 \001("
      "\005\022\021\n\tout_width\030\022 \001(\005\022\024\n\014out_channels\030\023 \001"
      "(\005\"\?\n\010TestType\022\013\n\007FACEVER\020\000\022\013\n\007FACERET\020\001"
      "\022\013\n\007SEGMENT\020\002\022\014\n\010CLASSIFY\020\003\"2\n\nTestProto"
      "s\022$\n\ntest_proto\030\001 \003(\0132\020.caffe.TestProto\""
      "\307\013\n\017SolverParameter\022\013\n\003net\030\030 \001(\t\022&\n\tnet_"
      "param\030\031 \001(\0132\023.caffe.NetParameter\022\021\n\ttrai"
      "n_net\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022,\n\017train_n"
      "et_param\030\025 \001(\0132\023.caffe.NetParameter\022+\n\016t"
      "est_net_param\030\026 \003(\0132\023.caffe.NetParameter"
      "\022$\n\013train_state\030\032 \001(\0132\017.caffe.NetState\022#"
      "\n\ntest_state\030\033 \003(\0132\017.caffe.NetState\022\021\n\tt"
      "est_iter\030\003 \003(\005\022\030\n\rtest_interval\030\004 \001(\005:\0010"
      "\022 \n\021test_compute_loss\030\023 \001(\010:\005false\022!\n\023te"
      "st_initialization\030  \001(\010:\004true\022\017\n\007base_lr"
      "\030\005 \001(\002\022\017\n\007display\030\006 \001(\005\022\027\n\014average_loss\030"
      "! \001(\005:\0011\022\020\n\010max_iter\030\007 \001(\005\022\024\n\titer_size\030"
      "$ \001(\005:\0011\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t \001"
      "(\002\022\r\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014w"
      "eight_decay\030\014 \001(\002\022\037\n\023regularization_type"
      "\030\035 \001(\t:\002L2\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepvalu"
      "e\030\" \003(\005\022\032\n\016clip_gradients\030# \001(\002:\002-1\022\023\n\010s"
      "napshot\030\016 \001(\005:\0010\022\027\n\017snapshot_prefix\030\017 \001("
      "\t\022\034\n\rsnapshot_diff\030\020 \001(\010:\005false\022K\n\017snaps"
      "hot_format\030% \001(\0162%.caffe.SolverParameter"
      ".SnapshotFormat:\013BINARYPROTO\022;\n\013solver_m"
      "ode\030\021 \001(\0162!.caffe.SolverParameter.Solver"
      "Mode:\003GPU\022\024\n\tdevice_id\030\022 \001(\005:\0010\022\027\n\013rando"
      "m_seed\030\024 \001(\003:\002-1\022\021\n\004type\030( \001(\t:\003SGD\022\024\n\005d"
      "elta\030\037 \001(\002:\0051e-08\022\030\n\tmomentum2\030\' \001(\002:\0050."
      "999\022\021\n\trms_decay\030& \001(\002\022\031\n\ndebug_info\030\027 \001"
      "(\010:\005false\022\"\n\024snapshot_after_train\030\034 \001(\010:"
      "\004true\022;\n\013solver_type\030\036 \001(\0162!.caffe.Solve"
      "rParameter.SolverType:\003SGD\022\031\n\016print_data"
      "diff\030* \001(\005:\0010\022\026\n\013print_param\030+ \001(\005:\0010\022\024\n"
      "\tsave_blob\030, \001(\005:\0010\022\030\n\016save_blob_path\030- "
      "\001(\t:\000\022\036\n\017save_test_blobs\030. \001(\010:\005false\022&\n"
      "\013test_protos\030/ \001(\0132\021.caffe.TestProtos\"+\n"
      "\016SnapshotFormat\022\010\n\004HDF5\020\000\022\017\n\013BINARYPROTO"
      "\020\001\"\036\n\nSolverMode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"U\n\nSo"
      "lverType\022\007\n\003SGD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007ADAGR"
      "AD\020\002\022\013\n\007RMSPROP\020\003\022\014\n\010ADADELTA\020\004\022\010\n\004ADAM\020"
      "\005\"l\n\013SolverState\022\014\n\004iter\030\001 \001(\005\022\023\n\013learne"
      "d_net\030\002 \001(\t\022!\n\007history\030\003 \003(\0132\020.caffe.Blo"
      "bProto\022\027\n\014current_step\030\004 \001(\005:\0010\"N\n\010NetSt"
      "ate\022!\n\005phase\030\001 \001(\0162\014.caffe.Phase:\004TEST\022\020"
      "\n\005level\030\002 \001(\005:\0010\022\r\n\005stage\030\003 \003(\t\"s\n\014NetSt"
      "ateRule\022\033\n\005phase\030\001 \001(\0162\014.caffe.Phase\022\021\n\t"
      "min_level\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005st"
      "age\030\004 \003(\t\022\021\n\tnot_stage\030\005 \003(\t\"\243\001\n\tParamSp"
      "ec\022\014\n\004name\030\001 \001(\t\0221\n\nshare_mode\030\002 \001(\0162\035.c"
      "affe.ParamSpec.DimCheckMode\022\022\n\007lr_mult\030\003"
      " \001(\002:\0011\022\025\n\ndecay_mult\030\004 \001(\002:\0011\"*\n\014DimChe"
      "ckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\376\"\n\016L"
      "ayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001("
      "\t\022\016\n\006bottom\030\003 \003(\t\022\013\n\003top\030\004 \003(\t\022\033\n\005phase\030"
      "\n \001(\0162\014.caffe.Phase\022\023\n\013loss_weight\030\005 \003(\002"
      "\022\037\n\005param\030\006 \003(\0132\020.caffe.ParamSpec\022\037\n\005blo"
      "bs\030\007 \003(\0132\020.caffe.BlobProto\022\026\n\016propagate_"
      "down\030\013 \003(\010\022$\n\007include\030\010 \003(\0132\023.caffe.NetS"
      "tateRule\022$\n\007exclude\030\t \003(\0132\023.caffe.NetSta"
      "teRule\0227\n\017transform_param\030d \001(\0132\036.caffe."
      "TransformationParameter\022(\n\nloss_param\030e "
      "\001(\0132\024.caffe.LossParameter\0220\n\016accuracy_pa"
      "ram\030f \001(\0132\030.caffe.AccuracyParameter\022,\n\014a"
      "rgmax_param\030g \001(\0132\026.caffe.ArgMaxParamete"
      "r\0224\n\020batch_norm_param\030\213\001 \001(\0132\031.caffe.Bat"
      "chNormParameter\022)\n\nbias_param\030\215\001 \001(\0132\024.c"
      "affe.BiasParameter\022,\n\014concat_param\030h \001(\013"
      "2\026.caffe.ConcatParameter\022\?\n\026contrastive_"
      "loss_param\030i \001(\0132\037.caffe.ContrastiveLoss"
      "Parameter\0226\n\021convolution_param\030j \001(\0132\033.c"
      "affe.ConvolutionParameter\022)\n\ncrop_param\030"
      "\220\001 \001(\0132\024.caffe.CropParameter\022(\n\ndata_par"
      "am\030k \001(\0132\024.caffe.DataParameter\022.\n\rdropou"
      "t_param\030l \001(\0132\027.caffe.DropoutParameter\0223"
      "\n\020dummy_data_param\030m \001(\0132\031.caffe.DummyDa"
      "taParameter\022.\n\reltwise_param\030n \001(\0132\027.caf"
      "fe.EltwiseParameter\022\'\n\telu_param\030\214\001 \001(\0132"
      "\023.caffe.ELUParameter\022+\n\013embed_param\030\211\001 \001"
      "(\0132\025.caffe.EmbedParameter\022&\n\texp_param\030o"
      " \001(\0132\023.caffe.ExpParameter\022/\n\rflatten_par"
      "am\030\207\001 \001(\0132\027.caffe.FlattenParameter\0221\n\017hd"
      "f5_data_param\030p \001(\0132\030.caffe.HDF5DataPara"
      "meter\0225\n\021hdf5_output_param\030q \001(\0132\032.caffe"
      ".HDF5OutputParameter\0223\n\020hinge_loss_param"
      "\030r \001(\0132\031.caffe.HingeLossParameter\0223\n\020ima"
      "ge_data_param\030s \001(\0132\031.caffe.ImageDataPar"
      "ameter\0229\n\023infogain_loss_param\030t \001(\0132\034.ca"
      "ffe.InfogainLossParameter\0229\n\023inner_produ"
      "ct_param\030u \001(\0132\034.caffe.InnerProductParam"
      "eter\022+\n\013input_param\030\217\001 \001(\0132\025.caffe.Input"
      "Parameter\022\'\n\tlog_param\030\206\001 \001(\0132\023.caffe.Lo"
      "gParameter\022&\n\tlrn_param\030v \001(\0132\023.caffe.LR"
      "NParameter\0225\n\021memory_data_param\030w \001(\0132\032."
      "caffe.MemoryDataParameter\022&\n\tmvn_param\030x"
      " \001(\0132\023.caffe.MVNParameter\022.\n\rpooling_par"
      "am\030y \001(\0132\027.caffe.PoolingParameter\022*\n\013pow"
      "er_param\030z \001(\0132\025.caffe.PowerParameter\022+\n"
      "\013prelu_param\030\203\001 \001(\0132\025.caffe.PReLUParamet"
      "er\022-\n\014python_param\030\202\001 \001(\0132\026.caffe.Python"
      "Parameter\0223\n\017reduction_param\030\210\001 \001(\0132\031.ca"
      "ffe.ReductionParameter\022(\n\nrelu_param\030{ \001"
      "(\0132\024.caffe.ReLUParameter\022/\n\rreshape_para"
      "m\030\205\001 \001(\0132\027.caffe.ReshapeParameter\022+\n\013sca"
      "le_param\030\216\001 \001(\0132\025.caffe.ScaleParameter\022."
      "\n\rsigmoid_param\030| \001(\0132\027.caffe.SigmoidPar"
      "ameter\022.\n\rsoftmax_param\030} \001(\0132\027.caffe.So"
      "ftmaxParameter\022\'\n\tspp_param\030\204\001 \001(\0132\023.caf"
      "fe.SPPParameter\022*\n\013slice_param\030~ \001(\0132\025.c"
      "affe.SliceParameter\022(\n\ntanh_param\030\177 \001(\0132"
      "\024.caffe.TanHParameter\0223\n\017threshold_param"
      "\030\200\001 \001(\0132\031.caffe.ThresholdParameter\022)\n\nti"
      "le_param\030\212\001 \001(\0132\024.caffe.TileParameter\0226\n"
      "\021window_data_param\030\201\001 \001(\0132\032.caffe.Window"
      "DataParameter\0221\n\016upsample_param\030\237\001 \001(\0132\030"
      ".caffe.UpsampleParameter\022<\n\024triplet01_lo"
      "ss_param\030\240\001 \001(\0132\035.caffe.Triplet01LossPar"
      "ameter\022G\n\031gaterecurrent2dmask_param\030\241\001 \001"
      "(\0132#.caffe.GateRecurrent2dmaskParameter\022"
      "I\n\032gaterecurrent2dnoind_param\030\242\001 \001(\0132$.c"
      "affe.GateRecurrent2dnoindParameter\022-\n\014di"
      "vide_param\030\243\001 \001(\0132\026.caffe.DivideParamete"
      "r\022E\n\030gaterecurrent2dmax_param\030\244\001 \001(\0132\".c"
      "affe.GateRecurrent2dmaxParameter\0224\n\020hube"
      "r_loss_param\030\245\001 \001(\0132\031.caffe.HuberLossPar"
      "ameter\022G\n\032image_data_arbitrary_param\030\351\007 "
      "\001(\0132\".caffe.ImageDataArbitraryParameter\022"
      "@\n\026manipulate_label_param\030\352\007 \001(\0132\037.caffe"
      ".ManipulatelabelParameter\022A\n\026spatialrecu"
      "rrent_param\030\353\007 \001(\0132 .caffe.SpatialRecurr"
      "entParameter\0227\n\021spatiallstm_param\030\354\007 \001(\013"
      "2\033.caffe.SpatialLstmParameter\0229\n\022weakgat"
      "elstm_param\030\355\007 \001(\0132\034.caffe.WeakGateLstmP"
      "arameter\0229\n\022temporallstm_param\030\356\007 \001(\0132\034."
      "caffe.TemporalLstmParameter\022-\n\014resize_pa"
      "ram\030\357\007 \001(\0132\026.caffe.ResizeParameter\022>\n\025ma"
      "nipulate_loss_param\030\360\007 \001(\0132\036.caffe.Manip"
      "ulateLossParameter\022C\n\030element_hinge_loss"
      "_param\030\361\007 \001(\0132 .caffe.ElementHingeLossPa"
      "rameter\022%\n\010bn_param\030\362\007 \001(\0132\022.caffe.BNPar"
      "ameter\022C\n\027regionconvolution_param\030\363\007 \001(\013"
      "2!.caffe.RegionconvolutionParameter\022<\n\024m"
      "apmetric_loss_param\030\364\007 \001(\0132\035.caffe.MapMe"
      "tricLossParameter\022H\n\033image_data_text_lab"
      "el_param\030\365\007 \001(\0132\".caffe.ImageDataTextLab"
      "elParameter\0224\n\020super_crop_param\030\366\007 \001(\0132\031"
      ".caffe.SuperCropParameter\0225\n\020hardsample_"
      "param\030\367\007 \001(\0132\032.caffe.HardSampleParameter"
      "\0221\n\016gatelstm_param\030\370\007 \001(\0132\030.caffe.GateLs"
      "tmParameter\022;\n\023gaterecurrent_param\030\371\007 \001("
      "\0132\035.caffe.GateRecurrentParameter\0222\n\017dens"
      "e_crf_param\030\372\007 \001(\0132\030.caffe.DenseCRFParam"
      "eter\022=\n\025pair_image_data_param\030\373\007 \001(\0132\035.c"
      "affe.PairImageDataParameter\0228\n\022triplet_l"
      "oss_param\030\374\007 \001(\0132\033.caffe.TripletLossPara"
      "meter\022-\n\014l2norm_param\030\375\007 \001(\0132\026.caffe.L2N"
      "ormParameter\022\'\n\tpad_param\030\376\007 \001(\0132\023.caffe"
      ".PadParameter\022C\n\030facerec_image_data_para"
      "m\030\377\007 \001(\0132 .caffe.FacerecImageDataParamet"
      "er\0228\n\022triplet_data_param\030\200\010 \001(\0132\033.caffe."
      "TripletDataParameter\0228\n\022segment_data_par"
      "am\030\201\010 \001(\0132\033.caffe.SegmentDataParameter\0222"
      "\n\017learn_crf_param\030\202\010 \001(\0132\030.caffe.LearnCR"
      "FParameter\022\?\n\025gaterecurrent2d_param\030\203\010 \001"
      "(\0132\037.caffe.GateRecurrent2dParameter\"\327\001\n\030"
      "GateRecurrent2dParameter\022\022\n\nnum_output\030\001"
      " \001(\r\022\030\n\nhorizontal\030\020 \001(\010:\004true\022\026\n\007revers"
      "e\030\021 \001(\010:\005false\022>\n\006active\030\022 \001(\0162&.caffe.G"
      "ateRecurrent2dParameter.Active:\006LINEAR\"5"
      "\n\006Active\022\n\n\006LINEAR\020\000\022\013\n\007SIGMOID\020\001\022\010\n\004REL"
      "U\020\002\022\010\n\004TANH\020\003\"\343\001\n\034GateRecurrent2dmaskPar"
      "ameter\022\026\n\nnum_output\030\001 \001(\r:\00216\022\030\n\nhorizo"
      "ntal\030\020 \001(\010:\004true\022\026\n\007reverse\030\021 \001(\010:\005false"
      "\022B\n\006active\030\022 \001(\0162*.caffe.GateRecurrent2d"
      "maskParameter.Active:\006LINEAR\"5\n\006Active\022\n"
      "\n\006LINEAR\020\000\022\013\n\007SIGMOID\020\001\022\010\n\004RELU\020\002\022\010\n\004TAN"
      "H\020\003\"\345\001\n\035GateRecurrent2dnoindParameter\022\026\n"
      "\nnum_output\030\001 \001(\r:\00216\022\030\n\nhorizontal\030\020 \001("
      "\010:\004true\022\026\n\007reverse\030\021 \001(\010:\005false\022C\n\006activ"
      "e\030\022 \001(\0162+.caffe.GateRecurrent2dnoindPara"
      "meter.Active:\006LINEAR\"5\n\006Active\022\n\n\006LINEAR"
      "\020\000\022\013\n\007SIGMOID\020\001\022\010\n\004RELU\020\002\022\010\n\004TANH\020\003\"\372\001\n\033"
      "GateRecurrent2dmaxParameter\022\026\n\nnum_outpu"
      "t\030\001 \001(\r:\00216\022\030\n\nhorizontal\030\020 \001(\010:\004true\022\026\n"
      "\007reverse\030\021 \001(\010:\005false\022\027\n\tmaxidpool\030\023 \001(\010"
      ":\004true\022A\n\006active\030\022 \001(\0162).caffe.GateRecur"
      "rent2dmaxParameter.Active:\006LINEAR\"5\n\006Act"
      "ive\022\n\n\006LINEAR\020\000\022\013\n\007SIGMOID\020\001\022\010\n\004RELU\020\002\022\010"
      "\n\004TANH\020\003\"=\n\021LearnCRFParameter\022\023\n\013kernel_"
      "size\030\001 \001(\005\022\023\n\010dilation\030\022 \001(\005:\0011\"\241\003\n\007TopI"
      "nfo\022\023\n\010channels\030\001 \001(\005:\0011\022\r\n\005width\030\002 \001(\005\022"
      "\016\n\006height\030\003 \001(\005\022\014\n\004mean\030\004 \003(\002\0227\n\013resize_"
      "type\030\005 \001(\0162\031.caffe.TopInfo.ResizeType:\007N"
      "EAREST\022\025\n\ndata_scale\030\006 \001(\002:\0011\022/\n\010src_typ"
      "e\030\007 \001(\0162\026.caffe.TopInfo.SrcType:\005IMAGE\022\021"
      "\n\006radius\030\010 \001(\005:\0010\022\037\n\023gamma_distrib_alpha"
      "\030\t \001(\002:\002-1\022\036\n\023gamma_distrib_gamma\030\n \001(\002:"
      "\0010\"X\n\007SrcType\022\t\n\005IMAGE\020\000\022\017\n\013SPARSEPOINT\020"
      "\001\022\n\n\006NUMBER\020\003\022\013\n\007HEATMAP\020\004\022\016\n\nDENSEPOINT"
      "\020\005\022\010\n\004LANE\020\006\"%\n\nResizeType\022\n\n\006LINEAR\020\000\022\013"
      "\n\007NEAREST\020\001\"\274\002\n\024SegmentDataParameter\022\016\n\006"
      "source\030\001 \001(\t\022\025\n\013data_folder\030\002 \001(\t:\000\022\037\n\007t"
      "opinfo\030\003 \003(\0132\016.caffe.TopInfo\022\022\n\nbatch_si"
      "ze\030\004 \001(\005\022\025\n\007shuffle\030\005 \001(\010:\004true\022\032\n\013use_d"
      "istrib\030\006 \001(\010:\005false\022\030\n\rdistrib_angle\030\007 \001"
      "(\002:\0010\022\030\n\rdistrib_scale\030\010 \001(\002:\0011\022\024\n\tdistr"
      "ib_x\030\t \001(\002:\0010\022\024\n\tdistrib_y\030\n \001(\002:\0010\022\034\n\020s"
      "ource_splitflag\030\013 \001(\t:\002||\022\027\n\010use_flip\030\014 "
      "\001(\010:\005false\"\221\002\n\027TripletDataSubParameter\022\016"
      "\n\006source\030\001 \001(\t\022\027\n\017source_filename\030\010 \001(\t\022"
      "\027\n\017source_landmark\030\t \001(\t\022\023\n\013imgs_folder\030"
      "\002 \001(\t\022\035\n\021subjects_per_iter\030\003 \001(\005:\00210\022\037\n\023"
      "samples_per_subject\030\004 \001(\005:\00210\022\037\n\024o3_subj"
      "ects_per_iter\030\005 \001(\005:\0010\022!\n\026o3_samples_per"
      "_subject\030\006 \001(\005:\0011\022\033\n\020key_points_count\030\n "
      "\001(\005:\0010\"\346\002\n\024TripletDataParameter\0227\n\017train"
      "_sub_param\030\001 \001(\0132\036.caffe.TripletDataSubP"
      "arameter\0226\n\016test_sub_param\030\002 \001(\0132\036.caffe"
      ".TripletDataSubParameter\022\022\n\006height\030\003 \001(\005"
      ":\00240\022\021\n\005width\030\004 \001(\005:\00240\022\026\n\010is_color\030\005 \001("
      "\010:\004true\022\023\n\004flip\030\006 \001(\010:\005false\022$\n\nimage_in"
      "fo\030\010 \001(\0132\020.caffe.ImageInfo\0227\n\022affine_ima"
      "ge_param\030\007 \003(\0132\033.caffe.AffineImageParame"
      "ter\022\024\n\tmeanvalue\030\t \001(\002:\0010\022\024\n\tdatascale\030\n"
      " \001(\002:\0011\"\345\004\n\031FacerecImageDataParameter\022\016\n"
      "\006source\030\001 \001(\t\022\032\n\013use_disturb\030\016 \001(\010:\005fals"
      "e\022\026\n\007useflip\030\017 \001(\010:\005false\022\022\n\nbatch_size\030"
      "\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010"
      " \001(\010:\005false\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\nme"
      "an_value\030\003 \001(\002:\0010\022\025\n\ndata_scale\030\035 \001(\002:\0010"
      "\022\025\n\nrand_angle\030\022 \001(\002:\0010\022\025\n\nrand_scale\030\023 "
      "\001(\002:\0010\022\025\n\nrand_movex\030\024 \001(\002:\0010\022\025\n\nrand_mo"
      "vey\030\025 \001(\002:\0010\022\"\n\027select_num_per_instance\030"
      "\027 \001(\r:\0010\022!\n\026select_oneinstance_num\030\032 \001(\r"
      ":\0010\022H\n\010datatype\030\030 \001(\0162).caffe.FacerecIma"
      "geDataParameter.DataType:\013SINGLEPATCH\022\031\n"
      "\016key_points_num\030\031 \001(\r:\0010\0221\n\014affine_param"
      "\030\033 \003(\0132\033.caffe.AffineImageParameter\022\025\n\013d"
      "ata_folder\030\034 \001(\t:\000\"+\n\010DataType\022\017\n\013SINGLE"
      "PATCH\020\000\022\016\n\nMULTIPATCH\020\001\"2\n\014PadParameter\022"
      "\020\n\005pad_w\030\001 \001(\r:\0010\022\020\n\005pad_h\030\002 \001(\r:\0010\"J\n\tI"
      "mageInfo\022\022\n\006height\030\001 \001(\005:\00240\022\021\n\005width\030\002 "
      "\001(\005:\00240\022\026\n\010is_color\030\003 \001(\010:\004true\"\371\001\n\024Affi"
      "neImageParameter\022\022\n\ncenter_ind\030\001 \003(\005\022A\n\t"
      "norm_mode\030\002 \001(\0162\034.caffe.AffineImage_Norm"
      "_Mode:\020RECT_LE_RE_LM_RM\022\027\n\nnorm_ratio\030\003 "
      "\001(\002:\0030.5\022\027\n\tfill_type\030\007 \001(\010:\004true\022\020\n\005val"
      "ue\030\010 \001(\r:\0010\022$\n\nimage_info\030\t \001(\0132\020.caffe."
      "ImageInfo\022\021\n\tmean_file\030\n \001(\t\022\r\n\005scale\030\013 "
      "\001(\002\"%\n\017L2NormParameter\022\022\n\003eps\030\001 \001(\002:\0051e-"
      "08\"\214\002\n\024TripletLossParameter\022\021\n\006margin\030\001 "
      "\001(\002:\0011\022\030\n\tnorm_diff\030\002 \001(\010:\005false\022\037\n\021sequ"
      "encial_bottom\030\003 \001(\010:\004true\022\026\n\007use_cpu\030\004 \001"
      "(\010:\005false\022\017\n\004step\030\005 \001(\005:\0013\022\031\n\nprint_time"
      "\030\006 \001(\010:\005false\022 \n\024ignore_hardest_ratio\030\007 "
      "\001(\002:\002-1\022\033\n\017use_hard_sample\030\010 \001(\002:\002-1\022#\n\030"
      "active_ignorehardest_len\030\t \001(\005:\0014\"\362\004\n\026Pa"
      "irImageDataParameter\022\016\n\006source\030\001 \001(\t\022\032\n\013"
      "use_disturb\030\016 \001(\010:\005false\022\026\n\007useflip\030\017 \001("
      "\010:\005false\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\trand_ski"
      "p\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005false\022\024\n\tcr"
      "op_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022"
      "\023\n\013resize_type\030\002 \003(\r\022\023\n\013data_height\030\t \003("
      "\r\022\022\n\ndata_width\030\n \003(\r\022\025\n\rdata_channels\030\021"
      " \003(\r\022\022\n\ndata_scale\030\026 \003(\002\022\021\n\tmean_file\030\003 "
      "\003(\t\022\025\n\nrand_angle\030\022 \001(\002:\0010\022\025\n\nrand_scale"
      "\030\023 \001(\002:\0010\022\025\n\nrand_movex\030\024 \001(\002:\0010\022\025\n\nrand"
      "_movey\030\025 \001(\002:\0010\022\"\n\027select_num_per_instan"
      "ce\030\027 \001(\r:\0010\022!\n\026select_oneinstance_num\030\032 "
      "\001(\r:\0010\022E\n\010datatype\030\030 \001(\0162&.caffe.PairIma"
      "geDataParameter.DataType:\013SINGLEPATCH\022\022\n"
      "\007lmk_num\030\031 \001(\r:\0010\"+\n\010DataType\022\017\n\013SINGLEP"
      "ATCH\020\000\022\016\n\nMULTIPATCH\020\001\"\243\001\n\021DenseCRFParam"
      "eter\022\024\n\010max_iter\030\001 \001(\005:\00210\022\022\n\npos_xy_std"
      "\030\002 \003(\002\022\r\n\005pos_w\030\003 \003(\002\022\021\n\tbi_xy_std\030\004 \003(\002"
      "\022\022\n\nbi_rgb_std\030\005 \003(\002\022\014\n\004bi_w\030\006 \003(\002\022 \n\022ou"
      "tput_probability\030\007 \001(\010:\004true\"\205\004\n\026GateRec"
      "urrentParameter\022\022\n\nnum_output\030\001 \001(\r\022\026\n\010u"
      "se_bias\030\002 \001(\010:\004true\022\024\n\006use_wx\030\003 \001(\010:\004tru"
      "e\022\024\n\006use_wh\030\004 \001(\010:\004true\022-\n\rweight_filler"
      "\030\007 \001(\0132\026.caffe.FillerParameter\022+\n\013bias_f"
      "iller\030\010 \001(\0132\026.caffe.FillerParameter\022\030\n\nh"
      "orizontal\030\020 \001(\010:\004true\022\026\n\007reverse\030\021 \001(\010:\005"
      "false\022<\n\006active\030\022 \001(\0162$.caffe.GateRecurr"
      "entParameter.Active:\006LINEAR\022\026\n\nbound_dif"
      "f\030\023 \001(\002:\002-1\022\026\n\nrestrict_w\030\024 \001(\002:\002-1\022\025\n\nr"
      "estrict_g\030\025 \001(\002:\0011\022\030\n\nuse_x_gate\030\026 \001(\010:\004"
      "true\022\031\n\013use_new_fix\030\027 \001(\010:\004true\022\024\n\005slash"
      "\030\030 \001(\010:\005false\"5\n\006Active\022\n\n\006LINEAR\020\000\022\013\n\007S"
      "IGMOID\020\001\022\010\n\004RELU\020\002\022\010\n\004TANH\020\003\"\210\002\n\021GateLst"
      "mParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_t"
      "erm\030\002 \001(\010:\004true\022-\n\rweight_filler\030\003 \001(\0132\026"
      ".caffe.FillerParameter\022+\n\013bias_filler\030\004 "
      "\001(\0132\026.caffe.FillerParameter\022\030\n\nhorizonta"
      "l\030\005 \001(\010:\004true\022\026\n\007reverse\030\006 \001(\010:\005false\022\026\n"
      "\nrestrict_w\030\007 \001(\002:\002-1\022 \n\021printall_datadi"
      "ff\030\010 \001(\010:\005false\"\331\003\n\023HardSampleParameter\022"
      "\032\n\rpos_use_ratio\030\001 \001(\002:\0030.5\022\032\n\rneg_use_r"
      "atio\030\010 \001(\002:\0030.5\022\033\n\016pos_hard_ratio\030\013 \001(\002:"
      "\0030.5\022\033\n\016neg_hard_ratio\030\014 \001(\002:\0030.5\022!\n\025neg"
      "_compare_pos_ratio\030\002 \001(\002:\002-1\022#\n\030pos_igno"
      "re_hardest_ratio\030\003 \001(\002:\0010\022#\n\030neg_ignore_"
      "hardest_ratio\030\004 \001(\002:\0010\022%\n\032max_ignore_pos"
      "_hardest_num\030\r \001(\r:\0010\022%\n\032max_ignore_neg_"
      "hardest_num\030\016 \001(\r:\0010\022\025\n\nneg_margin\030\005 \001(\r"
      ":\0010\022\025\n\npos_margin\030\006 \001(\r:\0010\022\034\n\016use_hardsa"
      "mple\030\007 \001(\010:\004true\022\026\n\013min_neg_num\030\t \001(\r:\0010"
      "\022\026\n\013min_pos_num\030\n \001(\r:\0010\022\031\n\nprint_info\030\017"
      " \001(\010:\005false\"\367\001\n\022SuperCropParameter\0224\n\004ty"
      "pe\030\001 \001(\0162\036.caffe.SuperCropParameter.Type"
      ":\006CENTER\022\021\n\006crop_w\030\002 \001(\r:\0010\022\021\n\006crop_h\030\003 "
      "\001(\r:\0010\022\031\n\nprint_info\030\004 \001(\010:\005false\022\026\n\013poi"
      "nt_fix_h\030\005 \001(\r:\0010\022\026\n\013point_fix_w\030\006 \001(\r:\001"
      "0\":\n\004Type\022\n\n\006CENTER\020\001\022\n\n\006RANDOM\020\002\022\014\n\010ONE"
      "POINT\020\003\022\014\n\010TWOPOINT\020\004\"\353\001\n\026MapMetricLossP"
      "arameter\022E\n\010losstype\030\001 \001(\0162&.caffe.MapMe"
      "tricLossParameter.LossType:\013contrastive\022"
      "\024\n\tsim_ratio\030\002 \001(\002:\0011\022\024\n\tdis_ratio\030\003 \001(\002"
      ":\0011\022\025\n\nsim_margin\030\005 \001(\002:\0010\022\025\n\ndis_margin"
      "\030\006 \001(\002:\0011\"0\n\010LossType\022\017\n\013contrastive\020\001\022\023"
      "\n\017weakcontrastive\020\002\"\356\004\n\032Regionconvolutio"
      "nParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_t"
      "erm\030\002 \001(\010:\004true\022\024\n\tinput_pad\030\003 \001(\r:\0010\022\026\n"
      "\013input_pad_h\030\t \001(\r:\0010\022\026\n\013input_pad_w\030\n \001"
      "(\r:\0010\022\030\n\020input_patch_size\030\004 \001(\r\022\025\n\rinput"
      "_patch_h\030\013 \001(\r\022\025\n\rinput_patch_w\030\014 \001(\r\022\027\n"
      "\014input_stride\030\006 \001(\r:\0011\022\026\n\016input_stride_h"
      "\030\r \001(\r\022\026\n\016input_stride_w\030\016 \001(\r\022\025\n\noutput"
      "_pad\030\020 \001(\r:\0010\022\027\n\014output_pad_h\030\021 \001(\r:\0010\022\027"
      "\n\014output_pad_w\030\022 \001(\r:\0010\022\031\n\021output_patch_"
      "size\030\023 \001(\r\022\026\n\016output_patch_h\030\024 \001(\r\022\026\n\016ou"
      "tput_patch_w\030\025 \001(\r\022\030\n\routput_stride\030\026 \001("
      "\r:\0011\022\027\n\017output_stride_h\030\027 \001(\r\022\027\n\017output_"
      "stride_w\030\030 \001(\r\022\020\n\005group\030\005 \001(\r:\0011\022-\n\rweig"
      "ht_filler\030\007 \001(\0132\026.caffe.FillerParameter\022"
      "+\n\013bias_filler\030\010 \001(\0132\026.caffe.FillerParam"
      "eter\"i\n\013BNParameter\022,\n\014scale_filler\030\001 \001("
      "\0132\026.caffe.FillerParameter\022,\n\014shift_fille"
      "r\030\002 \001(\0132\026.caffe.FillerParameter\"\207\001\n\031Elem"
      "entHingeLossParameter\0227\n\004norm\030\001 \001(\0162%.ca"
      "ffe.ElementHingeLossParameter.Norm:\002L2\022\031"
      "\n\nscale_loss\030\002 \001(\010:\005false\"\026\n\004Norm\022\006\n\002L1\020"
      "\001\022\006\n\002L2\020\002\"\273\002\n\027ManipulateLossParameter\022 \n"
      "\021use_balancesample\030\001 \001(\010:\005false\022\026\n\014ignor"
      "e_value\030\002 \001(\t:\000\022!\n\022use_fullzeroignore\030\003 "
      "\001(\010:\005false\022\023\n\010bg_ratio\030\004 \001(\002:\0011\022\033\n\020unifo"
      "rm_droprate\030\005 \001(\002:\0011\022%\n\026use_perchannel_b"
      "alance\030\006 \001(\010:\005false\022&\n\027drop_singleclassc"
      "hannel\030\007 \001(\010:\005false\022\031\n\nprint_info\030\010 \001(\010:"
      "\005false\022\'\n\030use_unionchannel_balance\030\t \001(\010"
      ":\005false\"\363\001\n\017ResizeParameter\022\027\n\014resize_ra"
      "tio\030\001 \001(\002:\0011\0222\n\004type\030\004 \001(\0162\033.caffe.Resiz"
      "eParameter.Type:\007NEAREST\022\036\n\017is_pyramid_t"
      "est\030\005 \001(\010:\005false\022\016\n\006height\030\006 \001(\002\022\r\n\005widt"
      "h\030\007 \001(\002\022\030\n\020out_height_scale\030\010 \001(\002\022\027\n\017out"
      "_width_scale\030\t \001(\002\"!\n\004Type\022\013\n\007NEAREST\020\001\022"
      "\014\n\010BILINEAR\020\002\"\322\001\n\025TemporalLstmParameter\022"
      "\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010:\004"
      "true\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.Fill"
      "erParameter\022+\n\013bias_filler\030\010 \001(\0132\026.caffe"
      ".FillerParameter\022\030\n\nhorizontal\030\020 \001(\010:\004tr"
      "ue\022\026\n\007reverse\030\021 \001(\010:\005false\"\214\002\n\025WeakGateL"
      "stmParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias"
      "_term\030\002 \001(\010:\004true\022-\n\rweight_filler\030\003 \001(\013"
      "2\026.caffe.FillerParameter\022+\n\013bias_filler\030"
      "\004 \001(\0132\026.caffe.FillerParameter\022\030\n\nhorizon"
      "tal\030\005 \001(\010:\004true\022\026\n\007reverse\030\006 \001(\010:\005false\022"
      "\026\n\nrestrict_w\030\007 \001(\002:\002-1\022 \n\021printall_data"
      "diff\030\010 \001(\010:\005false\"\321\001\n\024SpatialLstmParamet"
      "er\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001("
      "\010:\004true\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.F"
      "illerParameter\022+\n\013bias_filler\030\010 \001(\0132\026.ca"
      "ffe.FillerParameter\022\030\n\nhorizontal\030\020 \001(\010:"
      "\004true\022\026\n\007reverse\030\021 \001(\010:\005false\"\376\002\n\031Spatia"
      "lRecurrentParameter\022\022\n\nnum_output\030\001 \001(\r\022"
      "\027\n\tbias_term\030\002 \001(\010:\004true\022-\n\rweight_fille"
      "r\030\007 \001(\0132\026.caffe.FillerParameter\022+\n\013bias_"
      "filler\030\010 \001(\0132\026.caffe.FillerParameter\022\030\n\n"
      "horizontal\030\020 \001(\010:\004true\022\026\n\007reverse\030\021 \001(\010:"
      "\005false\022\?\n\006active\030\022 \001(\0162\'.caffe.SpatialRe"
      "currentParameter.Active:\006LINEAR\022\026\n\nbound"
      "_diff\030\023 \001(\002:\002-1\022\026\n\nrestrict_w\030\024 \001(\002:\002-1\""
      "5\n\006Active\022\n\n\006LINEAR\020\000\022\013\n\007SIGMOID\020\001\022\010\n\004RE"
      "LU\020\002\022\010\n\004TANH\020\003\"\355\002\n\030ManipulatelabelParame"
      "ter\022\023\n\010maxlabel\030\001 \001(\r:\0010\022:\n\004type\030\002 \001(\0162$"
      ".caffe.ManipulatelabelParameter.Type:\006EX"
      "PAND\022\030\n\nhorizontal\030\003 \001(\010:\004true\022\024\n\tedgera"
      "nge\030\004 \001(\r:\0011\022\030\n\rduplicate_dim\030\005 \001(\r:\0011\022\030"
      "\n\rduplicate_num\030\006 \001(\r:\0011\022\034\n\rreverse_labe"
      "l\030\007 \001(\010:\005false\022\"\n\023both_edge_direction\030\010 "
      "\001(\010:\005false\022!\n\022duplicate_isanyone\030\t \001(\010:\005"
      "false\"7\n\004Type\022\010\n\004EDGE\020\000\022\n\n\006EXPAND\020\001\022\r\n\tD"
      "UPLICATE\020\002\022\n\n\006ANYONE\020\003\"\250\003\n\033ImageDataArbi"
      "traryParameter\022\016\n\006source\030\001 \001(\t\022\032\n\013use_di"
      "sturb\030\016 \001(\010:\005false\022\026\n\007useflip\030\017 \001(\010:\005fal"
      "se\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001("
      "\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005false\022\024\n\tcrop_siz"
      "e\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\023\n\013res"
      "ize_type\030\002 \003(\r\022\023\n\013data_height\030\t \003(\r\022\022\n\nd"
      "ata_width\030\n \003(\r\022\025\n\rdata_channels\030\021 \003(\r\022\022"
      "\n\ndata_scale\030\026 \003(\002\022\021\n\tmean_file\030\003 \003(\t\022\025\n"
      "\nrand_angle\030\022 \001(\002:\0010\022\025\n\nrand_scale\030\023 \001(\002"
      ":\0010\022\025\n\nrand_movex\030\024 \001(\002:\0010\022\025\n\nrand_movey"
      "\030\025 \001(\002:\0010\"\257\006\n\033ImageDataTextLabelParamete"
      "r\022\016\n\006source\030\001 \001(\t\022\032\n\013use_disturb\030\016 \001(\010:\005"
      "false\022\026\n\007useflip\030\017 \001(\010:\005false\022\022\n\nbatch_s"
      "ize\030\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuff"
      "le\030\010 \001(\010:\005false\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n"
      "\006mirror\030\006 \001(\010:\005false\022\022\n\nmean_value\030\036 \003(\002"
      "\022\023\n\013resize_type\030\002 \003(\r\022\023\n\013data_height\030\t \003"
      "(\r\022\022\n\ndata_width\030\n \003(\r\022\025\n\rdata_channels\030"
      "\021 \003(\r\022\022\n\ndata_scale\030\026 \003(\002\022\021\n\tmean_file\030\003"
      " \003(\t\022M\n\rtextlabeltype\030\027 \001(\01620.caffe.Imag"
      "eDataTextLabelParameter.TextLabelType:\004N"
      "ONE\022!\n\026textlabel_num_perpixel\030\030 \001(\r:\0010\022\033"
      "\n\014save_topdata\030\031 \001(\010:\005false\022\035\n\022textlabel"
      "_channels\030\032 \001(\r:\0010\022\033\n\020textlabel_height\030\034"
      " \001(\r:\0010\022\032\n\017textlabel_width\030\035 \001(\r:\0010\022\031\n\016h"
      "eatmap_radius\030\033 \001(\002:\0010\022\025\n\nrand_angle\030\022 \001"
      "(\002:\0010\022\025\n\nrand_scale\030\023 \001(\002:\0010\022\025\n\nrand_mov"
      "ex\030\024 \001(\002:\0010\022\025\n\nrand_movey\030\025 \001(\002:\0010\"o\n\rTe"
      "xtLabelType\022\010\n\004NONE\020\000\022\014\n\010PERPIXEL\020\001\022\023\n\017P"
      "ERPIXEL_SPARSE\020\002\022\t\n\005WHOLE\020\003\022\024\n\020PERPIXEL_"
      "HEATMAP\020\004\022\007\n\003MAT\020\005\022\007\n\003TXT\020\006\"\266\001\n\027Transfor"
      "mationParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n\006mir"
      "ror\030\002 \001(\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:\0010\022\021"
      "\n\tmean_file\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022\032\n"
      "\013force_color\030\006 \001(\010:\005false\022\031\n\nforce_gray\030"
      "\007 \001(\010:\005false\"\302\001\n\rLossParameter\022\024\n\014ignore"
      "_label\030\001 \001(\005\022D\n\rnormalization\030\003 \001(\0162&.ca"
      "ffe.LossParameter.NormalizationMode:\005VAL"
      "ID\022\021\n\tnormalize\030\002 \001(\010\"B\n\021NormalizationMo"
      "de\022\010\n\004FULL\020\000\022\t\n\005VALID\020\001\022\016\n\nBATCH_SIZE\020\002\022"
      "\010\n\004NONE\020\003\"L\n\021AccuracyParameter\022\020\n\005top_k\030"
      "\001 \001(\r:\0011\022\017\n\004axis\030\002 \001(\005:\0011\022\024\n\014ignore_labe"
      "l\030\003 \001(\005\"M\n\017ArgMaxParameter\022\032\n\013out_max_va"
      "l\030\001 \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:\0011\022\014\n\004axis"
      "\030\003 \001(\005\"9\n\017ConcatParameter\022\017\n\004axis\030\002 \001(\005:"
      "\0011\022\025\n\nconcat_dim\030\001 \001(\r:\0011\"j\n\022BatchNormPa"
      "rameter\022\030\n\020use_global_stats\030\001 \001(\010\022&\n\027mov"
      "ing_average_fraction\030\002 \001(\002:\0050.999\022\022\n\003eps"
      "\030\003 \001(\002:\0051e-05\"]\n\rBiasParameter\022\017\n\004axis\030\001"
      " \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022&\n\006filler\030\003"
      " \001(\0132\026.caffe.FillerParameter\"L\n\030Contrast"
      "iveLossParameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016l"
      "egacy_version\030\002 \001(\010:\005false\"(\n\022HuberLossP"
      "arameter\022\022\n\005delta\030\001 \001(\002:\0030.1\"\374\003\n\024Convolu"
      "tionParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbia"
      "s_term\030\002 \001(\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kerne"
      "l_size\030\004 \003(\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation"
      "\030\022 \003(\r\022\020\n\005pad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:"
      "\0010\022\020\n\010kernel_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020"
      "\n\010stride_h\030\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005gr"
      "oup\030\005 \001(\r:\0011\022-\n\rweight_filler\030\007 \001(\0132\026.ca"
      "ffe.FillerParameter\022+\n\013bias_filler\030\010 \001(\013"
      "2\026.caffe.FillerParameter\022;\n\006engine\030\017 \001(\016"
      "2\".caffe.ConvolutionParameter.Engine:\007DE"
      "FAULT\022\017\n\004axis\030\020 \001(\005:\0011\022\036\n\017force_nd_im2co"
      "l\030\021 \001(\010:\005false\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n"
      "\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"0\n\rCropParameter\022\017\n\004"
      "axis\030\001 \001(\005:\0012\022\016\n\006offset\030\002 \003(\r\"\244\002\n\rDataPa"
      "rameter\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\004 "
      "\001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010\0221\n\007backend\030\010 \001"
      "(\0162\027.caffe.DataParameter.DB:\007LEVELDB\022\020\n\005"
      "scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcro"
      "p_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\""
      "\n\023force_encoded_color\030\t \001(\010:\005false\022\023\n\010pr"
      "efetch\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVELDB\020\000\022\010\n\004LM"
      "DB\020\001\".\n\020DropoutParameter\022\032\n\rdropout_rati"
      "o\030\001 \001(\002:\0030.5\"\240\001\n\022DummyDataParameter\022+\n\013d"
      "ata_filler\030\001 \003(\0132\026.caffe.FillerParameter"
      "\022\037\n\005shape\030\006 \003(\0132\020.caffe.BlobShape\022\013\n\003num"
      "\030\002 \003(\r\022\020\n\010channels\030\003 \003(\r\022\016\n\006height\030\004 \003(\r"
      "\022\r\n\005width\030\005 \003(\r\"\245\001\n\020EltwiseParameter\0229\n\t"
      "operation\030\001 \001(\0162!.caffe.EltwiseParameter"
      ".EltwiseOp:\003SUM\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable"
      "_prod_grad\030\003 \001(\010:\004true\"\'\n\tEltwiseOp\022\010\n\004P"
      "ROD\020\000\022\007\n\003SUM\020\001\022\007\n\003MAX\020\002\" \n\014ELUParameter\022"
      "\020\n\005alpha\030\001 \001(\002:\0011\"#\n\017DivideParameter\022\020\n\005"
      "alpha\030\001 \001(\002:\0011\"\254\001\n\016EmbedParameter\022\022\n\nnum"
      "_output\030\001 \001(\r\022\021\n\tinput_dim\030\002 \001(\r\022\027\n\tbias"
      "_term\030\003 \001(\010:\004true\022-\n\rweight_filler\030\004 \001(\013"
      "2\026.caffe.FillerParameter\022+\n\013bias_filler\030"
      "\005 \001(\0132\026.caffe.FillerParameter\"D\n\014ExpPara"
      "meter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\001"
      "1\022\020\n\005shift\030\003 \001(\002:\0010\"9\n\020FlattenParameter\022"
      "\017\n\004axis\030\001 \001(\005:\0011\022\024\n\010end_axis\030\002 \001(\005:\002-1\"O"
      "\n\021HDF5DataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\nb"
      "atch_size\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005false\""
      "(\n\023HDF5OutputParameter\022\021\n\tfile_name\030\001 \001("
      "\t\"^\n\022HingeLossParameter\0220\n\004norm\030\001 \001(\0162\036."
      "caffe.HingeLossParameter.Norm:\002L1\"\026\n\004Nor"
      "m\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"\227\002\n\022ImageDataParameter"
      "\022\016\n\006source\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001(\r:\0011\022"
      "\024\n\trand_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005"
      "false\022\025\n\nnew_height\030\t \001(\r:\0010\022\024\n\tnew_widt"
      "h\030\n \001(\r:\0010\022\026\n\010is_color\030\013 \001(\010:\004true\022\020\n\005sc"
      "ale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_"
      "size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\013"
      "root_folder\030\014 \001(\t:\000\"\'\n\025InfogainLossParam"
      "eter\022\016\n\006source\030\001 \001(\t\"\313\001\n\025InnerProductPar"
      "ameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030"
      "\002 \001(\010:\004true\022-\n\rweight_filler\030\003 \001(\0132\026.caf"
      "fe.FillerParameter\022+\n\013bias_filler\030\004 \001(\0132"
      "\026.caffe.FillerParameter\022\017\n\004axis\030\005 \001(\005:\0011"
      "\022\030\n\ttranspose\030\006 \001(\010:\005false\"1\n\016InputParam"
      "eter\022\037\n\005shape\030\001 \003(\0132\020.caffe.BlobShape\"D\n"
      "\014LogParameter\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale"
      "\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"\270\002\n\014LRNParam"
      "eter\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001"
      "(\002:\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_region"
      "\030\004 \001(\0162\036.caffe.LRNParameter.NormRegion:\017"
      "ACROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\0223\n\006engine\030"
      "\006 \001(\0162\032.caffe.LRNParameter.Engine:\007DEFAU"
      "LT\"5\n\nNormRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n"
      "\016WITHIN_CHANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
      "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataPara"
      "meter\022\022\n\nbatch_size\030\001 \001(\r\022\020\n\010channels\030\002 "
      "\001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"d\n\014MV"
      "NParameter\022 \n\022normalize_variance\030\001 \001(\010:\004"
      "true\022\036\n\017across_channels\030\002 \001(\010:\005false\022\022\n\003"
      "eps\030\003 \001(\002:\0051e-09\"\242\003\n\020PoolingParameter\0225\n"
      "\004pool\030\001 \001(\0162\".caffe.PoolingParameter.Poo"
      "lMethod:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005pad_h\030\t "
      "\001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013kernel_size\030"
      "\002 \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010kernel_w\030\006 \001("
      "\r\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride_h\030\007 \001(\r\022\020"
      "\n\010stride_w\030\010 \001(\r\0227\n\006engine\030\013 \001(\0162\036.caffe"
      ".PoolingParameter.Engine:\007DEFAULT\022\035\n\016glo"
      "bal_pooling\030\014 \001(\010:\005false\".\n\nPoolMethod\022\007"
      "\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engi"
      "ne\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"F\n"
      "\016PowerParameter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005sca"
      "le\030\002 \001(\002:\0011\022\020\n\005shift\030\003 \001(\002:\0010\"g\n\017PythonP"
      "arameter\022\016\n\006module\030\001 \001(\t\022\r\n\005layer\030\002 \001(\t\022"
      "\023\n\tparam_str\030\003 \001(\t:\000\022 \n\021share_in_paralle"
      "l\030\004 \001(\010:\005false\"\255\001\n\022ReductionParameter\022=\n"
      "\toperation\030\001 \001(\0162%.caffe.ReductionParame"
      "ter.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022\020\n"
      "\005coeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020\001\022"
      "\010\n\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\215\001\n\rReLUP"
      "arameter\022\031\n\016negative_slope\030\001 \001(\002:\0010\0224\n\006e"
      "ngine\030\002 \001(\0162\033.caffe.ReLUParameter.Engine"
      ":\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF"
      "E\020\001\022\t\n\005CUDNN\020\002\"Z\n\020ReshapeParameter\022\037\n\005sh"
      "ape\030\001 \001(\0132\020.caffe.BlobShape\022\017\n\004axis\030\002 \001("
      "\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"\245\001\n\016ScalePara"
      "meter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005"
      ":\0011\022&\n\006filler\030\003 \001(\0132\026.caffe.FillerParame"
      "ter\022\030\n\tbias_term\030\004 \001(\010:\005false\022+\n\013bias_fi"
      "ller\030\005 \001(\0132\026.caffe.FillerParameter\"x\n\020Si"
      "gmoidParameter\0227\n\006engine\030\001 \001(\0162\036.caffe.S"
      "igmoidParameter.Engine:\007DEFAULT\"+\n\006Engin"
      "e\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016"
      "SliceParameter\022\017\n\004axis\030\003 \001(\005:\0011\022\023\n\013slice"
      "_point\030\002 \003(\r\022\024\n\tslice_dim\030\001 \001(\r:\0011\"\211\001\n\020S"
      "oftmaxParameter\0227\n\006engine\030\001 \001(\0162\036.caffe."
      "SoftmaxParameter.Engine:\007DEFAULT\022\017\n\004axis"
      "\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFF"
      "E\020\001\022\t\n\005CUDNN\020\002\"r\n\rTanHParameter\0224\n\006engin"
      "e\030\001 \001(\0162\033.caffe.TanHParameter.Engine:\007DE"
      "FAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022"
      "\t\n\005CUDNN\020\002\"/\n\rTileParameter\022\017\n\004axis\030\001 \001("
      "\005:\0011\022\r\n\005tiles\030\002 \001(\005\"*\n\022ThresholdParamete"
      "r\022\024\n\tthreshold\030\001 \001(\002:\0010\"\301\002\n\023WindowDataPa"
      "rameter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale\030\002 \001(\002:\001"
      "1\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_size\030\004 \001(\r"
      "\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005"
      "false\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5\022\031\n\014bg_t"
      "hreshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fraction\030\t \001(\002"
      ":\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027\n\tcrop_m"
      "ode\030\013 \001(\t:\004warp\022\033\n\014cache_images\030\014 \001(\010:\005f"
      "alse\022\025\n\013root_folder\030\r \001(\t:\000\"\353\001\n\014SPPParam"
      "eter\022\026\n\016pyramid_height\030\001 \001(\r\0221\n\004pool\030\002 \001"
      "(\0162\036.caffe.SPPParameter.PoolMethod:\003MAX\022"
      "3\n\006engine\030\006 \001(\0162\032.caffe.SPPParameter.Eng"
      "ine:\007DEFAULT\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003A"
      "VE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAUL"
      "T\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\340\023\n\020V1LayerPar"
      "ameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004n"
      "ame\030\004 \001(\t\022$\n\007include\030  \003(\0132\023.caffe.NetSt"
      "ateRule\022$\n\007exclude\030! \003(\0132\023.caffe.NetStat"
      "eRule\022/\n\004type\030\005 \001(\0162!.caffe.V1LayerParam"
      "eter.LayerType\022\037\n\005blobs\030\006 \003(\0132\020.caffe.Bl"
      "obProto\022\016\n\005param\030\351\007 \003(\t\022>\n\017blob_share_mo"
      "de\030\352\007 \003(\0162$.caffe.V1LayerParameter.DimCh"
      "eckMode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_deca"
      "y\030\010 \003(\002\022\023\n\013loss_weight\030# \003(\002\0220\n\016accuracy"
      "_param\030\033 \001(\0132\030.caffe.AccuracyParameter\022,"
      "\n\014argmax_param\030\027 \001(\0132\026.caffe.ArgMaxParam"
      "eter\022,\n\014concat_param\030\t \001(\0132\026.caffe.Conca"
      "tParameter\022\?\n\026contrastive_loss_param\030( \001"
      "(\0132\037.caffe.ContrastiveLossParameter\0226\n\021c"
      "onvolution_param\030\n \001(\0132\033.caffe.Convoluti"
      "onParameter\022(\n\ndata_param\030\013 \001(\0132\024.caffe."
      "DataParameter\022.\n\rdropout_param\030\014 \001(\0132\027.c"
      "affe.DropoutParameter\0223\n\020dummy_data_para"
      "m\030\032 \001(\0132\031.caffe.DummyDataParameter\022.\n\rel"
      "twise_param\030\030 \001(\0132\027.caffe.EltwiseParamet"
      "er\022&\n\texp_param\030) \001(\0132\023.caffe.ExpParamet"
      "er\0221\n\017hdf5_data_param\030\r \001(\0132\030.caffe.HDF5"
      "DataParameter\0225\n\021hdf5_output_param\030\016 \001(\013"
      "2\032.caffe.HDF5OutputParameter\0223\n\020hinge_lo"
      "ss_param\030\035 \001(\0132\031.caffe.HingeLossParamete"
      "r\0223\n\020image_data_param\030\017 \001(\0132\031.caffe.Imag"
      "eDataParameter\0229\n\023infogain_loss_param\030\020 "
      "\001(\0132\034.caffe.InfogainLossParameter\0229\n\023inn"
      "er_product_param\030\021 \001(\0132\034.caffe.InnerProd"
      "uctParameter\022&\n\tlrn_param\030\022 \001(\0132\023.caffe."
      "LRNParameter\0225\n\021memory_data_param\030\026 \001(\0132"
      "\032.caffe.MemoryDataParameter\022&\n\tmvn_param"
      "\030\" \001(\0132\023.caffe.MVNParameter\022.\n\rpooling_p"
      "aram\030\023 \001(\0132\027.caffe.PoolingParameter\022*\n\013p"
      "ower_param\030\025 \001(\0132\025.caffe.PowerParameter\022"
      "(\n\nrelu_param\030\036 \001(\0132\024.caffe.ReLUParamete"
      "r\022.\n\rsigmoid_param\030& \001(\0132\027.caffe.Sigmoid"
      "Parameter\022.\n\rsoftmax_param\030\' \001(\0132\027.caffe"
      ".SoftmaxParameter\022*\n\013slice_param\030\037 \001(\0132\025"
      ".caffe.SliceParameter\022(\n\ntanh_param\030% \001("
      "\0132\024.caffe.TanHParameter\0222\n\017threshold_par"
      "am\030\031 \001(\0132\031.caffe.ThresholdParameter\0225\n\021w"
      "indow_data_param\030\024 \001(\0132\032.caffe.WindowDat"
      "aParameter\0227\n\017transform_param\030$ \001(\0132\036.ca"
      "ffe.TransformationParameter\022(\n\nloss_para"
      "m\030* \001(\0132\024.caffe.LossParameter\022&\n\005layer\030\001"
      " \001(\0132\027.caffe.V0LayerParameter\"\330\004\n\tLayerT"
      "ype\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY\020\001\022"
      "\n\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020CON"
      "TRASTIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004DATA"
      "\020\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n\nDU"
      "MMY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELTWIS"
      "E\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DATA\020\t"
      "\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006IM2"
      "COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOSS\020\r"
      "\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMORY_D"
      "ATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022\007\n\003"
      "MVN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU\020\022\022"
      "\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY_LO"
      "SS\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMA"
      "X_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TANH\020\027"
      "\022\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\"*\n\014DimC"
      "heckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\375\007\n"
      "\020V0LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030"
      "\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010biasterm\030\004 "
      "\001(\010:\004true\022-\n\rweight_filler\030\005 \001(\0132\026.caffe"
      ".FillerParameter\022+\n\013bias_filler\030\006 \001(\0132\026."
      "caffe.FillerParameter\022\016\n\003pad\030\007 \001(\r:\0010\022\022\n"
      "\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r:\0011\022\021\n\006s"
      "tride\030\n \001(\r:\0011\0225\n\004pool\030\013 \001(\0162\".caffe.V0L"
      "ayerParameter.PoolMethod:\003MAX\022\032\n\rdropout"
      "_ratio\030\014 \001(\002:\0030.5\022\025\n\nlocal_size\030\r \001(\r:\0015"
      "\022\020\n\005alpha\030\016 \001(\002:\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014"
      "\n\001k\030\026 \001(\002:\0011\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021 "
      "\001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbatchsize\030\023 "
      "\001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(\010"
      ":\005false\022\037\n\005blobs\0302 \003(\0132\020.caffe.BlobProto"
      "\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_decay\0304 \003(\002"
      "\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det_fg_thresho"
      "ld\0306 \001(\002:\0030.5\022\035\n\020det_bg_threshold\0307 \001(\002:"
      "\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002:\0040.25\022\032\n\017d"
      "et_context_pad\030: \001(\r:\0010\022\033\n\rdet_crop_mode"
      "\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005:\0010\022\027\n\014new_"
      "channels\030= \001(\005:\0010\022\025\n\nnew_height\030> \001(\005:\0010"
      "\022\024\n\tnew_width\030\? \001(\005:\0010\022\035\n\016shuffle_images"
      "\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A \001(\r:\0011\0226\n\021"
      "hdf5_output_param\030\351\007 \001(\0132\032.caffe.HDF5Out"
      "putParameter\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003A"
      "VE\020\001\022\016\n\nSTOCHASTIC\020\002\"\243\001\n\021UpsampleParamet"
      "er\022\020\n\005scale\030\001 \001(\r:\0012\022\017\n\007scale_h\030\002 \001(\r\022\017\n"
      "\007scale_w\030\003 \001(\r\022\030\n\tpad_out_h\030\004 \001(\010:\005false"
      "\022\030\n\tpad_out_w\030\005 \001(\010:\005false\022\022\n\nupsample_h"
      "\030\006 \001(\r\022\022\n\nupsample_w\030\007 \001(\r\"W\n\016PReLUParam"
      "eter\022&\n\006filler\030\001 \001(\0132\026.caffe.FillerParam"
      "eter\022\035\n\016channel_shared\030\002 \001(\010:\005false\"F\n\026T"
      "riplet01LossParameter\022\021\n\006margin\030\001 \001(\002:\0012"
      "\022\031\n\nprint_time\030\002 \001(\010:\005false*\034\n\005Phase\022\t\n\005"
      "TRAIN\020\000\022\010\n\004TEST\020\001*B\n\025AffineImage_Norm_Mo"
      "de\022\023\n\017AVE_LE2LM_RE2RM\020\000\022\024\n\020RECT_LE_RE_LM"
      "_RM\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 28565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/caffe/proto/caffe.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[0];
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FillerParameter_VarianceNorm FillerParameter::FAN_IN;
const FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
const FillerParameter_VarianceNorm FillerParameter::AVERAGE;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
const FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
const int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TestProto_TestType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[1];
}
bool TestProto_TestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TestProto_TestType TestProto::FACEVER;
const TestProto_TestType TestProto::FACERET;
const TestProto_TestType TestProto::SEGMENT;
const TestProto_TestType TestProto::CLASSIFY;
const TestProto_TestType TestProto::TestType_MIN;
const TestProto_TestType TestProto::TestType_MAX;
const int TestProto::TestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[2];
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SnapshotFormat SolverParameter::HDF5;
const SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
const SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
const int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[3];
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverMode SolverParameter::CPU;
const SolverParameter_SolverMode SolverParameter::GPU;
const SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
const SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
const int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[4];
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SolverParameter_SolverType SolverParameter::SGD;
const SolverParameter_SolverType SolverParameter::NESTEROV;
const SolverParameter_SolverType SolverParameter::ADAGRAD;
const SolverParameter_SolverType SolverParameter::RMSPROP;
const SolverParameter_SolverType SolverParameter::ADADELTA;
const SolverParameter_SolverType SolverParameter::ADAM;
const SolverParameter_SolverType SolverParameter::SolverType_MIN;
const SolverParameter_SolverType SolverParameter::SolverType_MAX;
const int SolverParameter::SolverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[5];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParamSpec_DimCheckMode ParamSpec::STRICT;
const ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
const ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
const int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GateRecurrent2dParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[6];
}
bool GateRecurrent2dParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::LINEAR;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::SIGMOID;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::RELU;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::TANH;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::Active_MIN;
const GateRecurrent2dParameter_Active GateRecurrent2dParameter::Active_MAX;
const int GateRecurrent2dParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GateRecurrent2dmaskParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[7];
}
bool GateRecurrent2dmaskParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::LINEAR;
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::SIGMOID;
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::RELU;
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::TANH;
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::Active_MIN;
const GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::Active_MAX;
const int GateRecurrent2dmaskParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GateRecurrent2dnoindParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[8];
}
bool GateRecurrent2dnoindParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::LINEAR;
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::SIGMOID;
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::RELU;
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::TANH;
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::Active_MIN;
const GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::Active_MAX;
const int GateRecurrent2dnoindParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GateRecurrent2dmaxParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[9];
}
bool GateRecurrent2dmaxParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::LINEAR;
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::SIGMOID;
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::RELU;
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::TANH;
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::Active_MIN;
const GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::Active_MAX;
const int GateRecurrent2dmaxParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TopInfo_SrcType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[10];
}
bool TopInfo_SrcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TopInfo_SrcType TopInfo::IMAGE;
const TopInfo_SrcType TopInfo::SPARSEPOINT;
const TopInfo_SrcType TopInfo::NUMBER;
const TopInfo_SrcType TopInfo::HEATMAP;
const TopInfo_SrcType TopInfo::DENSEPOINT;
const TopInfo_SrcType TopInfo::LANE;
const TopInfo_SrcType TopInfo::SrcType_MIN;
const TopInfo_SrcType TopInfo::SrcType_MAX;
const int TopInfo::SrcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TopInfo_ResizeType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[11];
}
bool TopInfo_ResizeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TopInfo_ResizeType TopInfo::LINEAR;
const TopInfo_ResizeType TopInfo::NEAREST;
const TopInfo_ResizeType TopInfo::ResizeType_MIN;
const TopInfo_ResizeType TopInfo::ResizeType_MAX;
const int TopInfo::ResizeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FacerecImageDataParameter_DataType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[12];
}
bool FacerecImageDataParameter_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FacerecImageDataParameter_DataType FacerecImageDataParameter::SINGLEPATCH;
const FacerecImageDataParameter_DataType FacerecImageDataParameter::MULTIPATCH;
const FacerecImageDataParameter_DataType FacerecImageDataParameter::DataType_MIN;
const FacerecImageDataParameter_DataType FacerecImageDataParameter::DataType_MAX;
const int FacerecImageDataParameter::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PairImageDataParameter_DataType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[13];
}
bool PairImageDataParameter_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PairImageDataParameter_DataType PairImageDataParameter::SINGLEPATCH;
const PairImageDataParameter_DataType PairImageDataParameter::MULTIPATCH;
const PairImageDataParameter_DataType PairImageDataParameter::DataType_MIN;
const PairImageDataParameter_DataType PairImageDataParameter::DataType_MAX;
const int PairImageDataParameter::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GateRecurrentParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[14];
}
bool GateRecurrentParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GateRecurrentParameter_Active GateRecurrentParameter::LINEAR;
const GateRecurrentParameter_Active GateRecurrentParameter::SIGMOID;
const GateRecurrentParameter_Active GateRecurrentParameter::RELU;
const GateRecurrentParameter_Active GateRecurrentParameter::TANH;
const GateRecurrentParameter_Active GateRecurrentParameter::Active_MIN;
const GateRecurrentParameter_Active GateRecurrentParameter::Active_MAX;
const int GateRecurrentParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SuperCropParameter_Type_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[15];
}
bool SuperCropParameter_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SuperCropParameter_Type SuperCropParameter::CENTER;
const SuperCropParameter_Type SuperCropParameter::RANDOM;
const SuperCropParameter_Type SuperCropParameter::ONEPOINT;
const SuperCropParameter_Type SuperCropParameter::TWOPOINT;
const SuperCropParameter_Type SuperCropParameter::Type_MIN;
const SuperCropParameter_Type SuperCropParameter::Type_MAX;
const int SuperCropParameter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MapMetricLossParameter_LossType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[16];
}
bool MapMetricLossParameter_LossType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MapMetricLossParameter_LossType MapMetricLossParameter::contrastive;
const MapMetricLossParameter_LossType MapMetricLossParameter::weakcontrastive;
const MapMetricLossParameter_LossType MapMetricLossParameter::LossType_MIN;
const MapMetricLossParameter_LossType MapMetricLossParameter::LossType_MAX;
const int MapMetricLossParameter::LossType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ElementHingeLossParameter_Norm_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[17];
}
bool ElementHingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ElementHingeLossParameter_Norm ElementHingeLossParameter::L1;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::L2;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::Norm_MIN;
const ElementHingeLossParameter_Norm ElementHingeLossParameter::Norm_MAX;
const int ElementHingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResizeParameter_Type_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[18];
}
bool ResizeParameter_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResizeParameter_Type ResizeParameter::NEAREST;
const ResizeParameter_Type ResizeParameter::BILINEAR;
const ResizeParameter_Type ResizeParameter::Type_MIN;
const ResizeParameter_Type ResizeParameter::Type_MAX;
const int ResizeParameter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SpatialRecurrentParameter_Active_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[19];
}
bool SpatialRecurrentParameter_Active_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::LINEAR;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::SIGMOID;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::RELU;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::TANH;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::Active_MIN;
const SpatialRecurrentParameter_Active SpatialRecurrentParameter::Active_MAX;
const int SpatialRecurrentParameter::Active_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ManipulatelabelParameter_Type_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[20];
}
bool ManipulatelabelParameter_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ManipulatelabelParameter_Type ManipulatelabelParameter::EDGE;
const ManipulatelabelParameter_Type ManipulatelabelParameter::EXPAND;
const ManipulatelabelParameter_Type ManipulatelabelParameter::DUPLICATE;
const ManipulatelabelParameter_Type ManipulatelabelParameter::ANYONE;
const ManipulatelabelParameter_Type ManipulatelabelParameter::Type_MIN;
const ManipulatelabelParameter_Type ManipulatelabelParameter::Type_MAX;
const int ManipulatelabelParameter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageDataTextLabelParameter_TextLabelType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[21];
}
bool ImageDataTextLabelParameter_TextLabelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::NONE;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::PERPIXEL;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::PERPIXEL_SPARSE;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::WHOLE;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::PERPIXEL_HEATMAP;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::MAT;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::TXT;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::TextLabelType_MIN;
const ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::TextLabelType_MAX;
const int ImageDataTextLabelParameter::TextLabelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[22];
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LossParameter_NormalizationMode LossParameter::FULL;
const LossParameter_NormalizationMode LossParameter::VALID;
const LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
const LossParameter_NormalizationMode LossParameter::NONE;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
const LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
const int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[23];
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
const ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
const ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
const int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[24];
}
bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataParameter_DB DataParameter::LEVELDB;
const DataParameter_DB DataParameter::LMDB;
const DataParameter_DB DataParameter::DB_MIN;
const DataParameter_DB DataParameter::DB_MAX;
const int DataParameter::DB_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[25];
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
const EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
const EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
const int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[26];
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HingeLossParameter_Norm HingeLossParameter::L1;
const HingeLossParameter_Norm HingeLossParameter::L2;
const HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
const HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
const int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[27];
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
const LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
const LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
const int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[28];
}
bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LRNParameter_Engine LRNParameter::DEFAULT;
const LRNParameter_Engine LRNParameter::CAFFE;
const LRNParameter_Engine LRNParameter::CUDNN;
const LRNParameter_Engine LRNParameter::Engine_MIN;
const LRNParameter_Engine LRNParameter::Engine_MAX;
const int LRNParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[29];
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_PoolMethod PoolingParameter::MAX;
const PoolingParameter_PoolMethod PoolingParameter::AVE;
const PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
const PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
const int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[30];
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoolingParameter_Engine PoolingParameter::DEFAULT;
const PoolingParameter_Engine PoolingParameter::CAFFE;
const PoolingParameter_Engine PoolingParameter::CUDNN;
const PoolingParameter_Engine PoolingParameter::Engine_MIN;
const PoolingParameter_Engine PoolingParameter::Engine_MAX;
const int PoolingParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[31];
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReductionParameter_ReductionOp ReductionParameter::SUM;
const ReductionParameter_ReductionOp ReductionParameter::ASUM;
const ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
const ReductionParameter_ReductionOp ReductionParameter::MEAN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
const ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
const int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[32];
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReLUParameter_Engine ReLUParameter::DEFAULT;
const ReLUParameter_Engine ReLUParameter::CAFFE;
const ReLUParameter_Engine ReLUParameter::CUDNN;
const ReLUParameter_Engine ReLUParameter::Engine_MIN;
const ReLUParameter_Engine ReLUParameter::Engine_MAX;
const int ReLUParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[33];
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SigmoidParameter_Engine SigmoidParameter::DEFAULT;
const SigmoidParameter_Engine SigmoidParameter::CAFFE;
const SigmoidParameter_Engine SigmoidParameter::CUDNN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
const SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
const int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[34];
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
const SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
const SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
const int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[35];
}
bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TanHParameter_Engine TanHParameter::DEFAULT;
const TanHParameter_Engine TanHParameter::CAFFE;
const TanHParameter_Engine TanHParameter::CUDNN;
const TanHParameter_Engine TanHParameter::Engine_MIN;
const TanHParameter_Engine TanHParameter::Engine_MAX;
const int TanHParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[36];
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_PoolMethod SPPParameter::MAX;
const SPPParameter_PoolMethod SPPParameter::AVE;
const SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
const SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
const int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[37];
}
bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SPPParameter_Engine SPPParameter::DEFAULT;
const SPPParameter_Engine SPPParameter::CAFFE;
const SPPParameter_Engine SPPParameter::CUDNN;
const SPPParameter_Engine SPPParameter::Engine_MIN;
const SPPParameter_Engine SPPParameter::Engine_MAX;
const int SPPParameter::Engine_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[38];
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_LayerType V1LayerParameter::NONE;
const V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
const V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
const V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
const V1LayerParameter_LayerType V1LayerParameter::BNLL;
const V1LayerParameter_LayerType V1LayerParameter::CONCAT;
const V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DATA;
const V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
const V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
const V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
const V1LayerParameter_LayerType V1LayerParameter::EXP;
const V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
const V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
const V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::IM2COL;
const V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
const V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
const V1LayerParameter_LayerType V1LayerParameter::LRN;
const V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
const V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::MVN;
const V1LayerParameter_LayerType V1LayerParameter::POOLING;
const V1LayerParameter_LayerType V1LayerParameter::POWER;
const V1LayerParameter_LayerType V1LayerParameter::RELU;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
const V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SILENCE;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
const V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
const V1LayerParameter_LayerType V1LayerParameter::SPLIT;
const V1LayerParameter_LayerType V1LayerParameter::SLICE;
const V1LayerParameter_LayerType V1LayerParameter::TANH;
const V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
const V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
const V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
const int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[39];
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
const V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
const int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[40];
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const V0LayerParameter_PoolMethod V0LayerParameter::MAX;
const V0LayerParameter_PoolMethod V0LayerParameter::AVE;
const V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
const V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
const int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[41];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AffineImage_Norm_Mode_descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_enum_descriptors[42];
}
bool AffineImage_Norm_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobShape::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobShape::BlobShape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobShape)
}

void BlobShape::SharedCtor() {
  _cached_size_ = 0;
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:caffe.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobShape::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobShape& BlobShape::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobShape* BlobShape::New(::google::protobuf::Arena* arena) const {
  BlobShape* n = new BlobShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dim = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobShape)
  return false;
#undef DO_
}

void BlobShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dim_cached_byte_size_));
  }
  for (int i = 0, n = this->dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->dim(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobShape)
}

::google::protobuf::uint8* BlobShape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobShape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _dim_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dim_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobShape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobShape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobShape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobShape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::Swap(BlobShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobShape::InternalSwap(BlobShape* other) {
  using std::swap;
  dim_.InternalSwap(&other->dim_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobShape::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
int BlobShape::dim_size() const {
  return dim_.size();
}
void BlobShape::clear_dim() {
  dim_.Clear();
}
::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProto::kShapeFieldNumber;
const int BlobProto::kDataFieldNumber;
const int BlobProto::kDiffFieldNumber;
const int BlobProto::kDoubleDataFieldNumber;
const int BlobProto::kDoubleDiffFieldNumber;
const int BlobProto::kNumFieldNumber;
const int BlobProto::kChannelsFieldNumber;
const int BlobProto::kHeightFieldNumber;
const int BlobProto::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProto::BlobProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_),
      diff_(from.diff_),
      double_data_(from.double_data_),
      double_diff_(from.double_diff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::caffe::BlobShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProto)
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(width_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:caffe.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProto& BlobProto::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProto* BlobProto::New(::google::protobuf::Arena* arena) const {
  BlobProto* n = new BlobProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  if (has_shape()) {
    GOOGLE_DCHECK(shape_ != NULL);
    shape_->::caffe::BlobShape::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&num_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float diff = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_diff())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_diff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BlobShape shape = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_data = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_double_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_diff = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_diff())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74u, input, this->mutable_double_diff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProto)
  return false;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _diff_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->diff().data(), this->diff_size(), output);
  }

  // optional .caffe.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->shape_, output);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _double_data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->double_data().data(), this->double_data_size(), output);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _double_diff_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->double_diff().data(), this->double_diff_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProto)
}

::google::protobuf::uint8* BlobProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _diff_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->diff_, target);
  }

  // optional .caffe.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->shape_, deterministic, target);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _double_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data_, target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->double_diff_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _double_diff_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_diff_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float data = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->double_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->double_diff_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_diff_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.BlobShape shape = 7;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 channels = 2 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 0];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProto::InternalSwap(BlobProto* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  diff_.InternalSwap(&other->diff_);
  double_data_.InternalSwap(&other->double_data_);
  double_diff_.InternalSwap(&other->double_diff_);
  swap(shape_, other->shape_);
  swap(num_, other->num_);
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProto

// optional .caffe.BlobShape shape = 7;
bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& BlobProto::shape() const {
  const ::caffe::BlobShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BlobShape*>(
      &::caffe::_BlobShape_default_instance_);
}
::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
int BlobProto::data_size() const {
  return data_.size();
}
void BlobProto::clear_data() {
  data_.Clear();
}
float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
int BlobProto::diff_size() const {
  return diff_.size();
}
void BlobProto::clear_diff() {
  diff_.Clear();
}
float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
int BlobProto::double_data_size() const {
  return double_data_.size();
}
void BlobProto::clear_double_data() {
  double_data_.Clear();
}
double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProtoVector::kBlobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProtoVector::BlobProtoVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BlobProtoVector)
}
BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  _cached_size_ = 0;
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:caffe.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
}

void BlobProtoVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProtoVector::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlobProtoVector& BlobProtoVector::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlobProtoVector* BlobProtoVector::New(::google::protobuf::Arena* arena) const {
  BlobProtoVector* n = new BlobProtoVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BlobProtoVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlobProtoVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BlobProtoVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobProto blobs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BlobProtoVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BlobProtoVector)
  return false;
#undef DO_
}

void BlobProtoVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BlobProtoVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BlobProtoVector)
}

::google::protobuf::uint8* BlobProtoVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BlobProtoVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobProto blobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blobs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BlobProtoVector)
  return target;
}

size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BlobProtoVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.BlobProto blobs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProtoVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlobProtoVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BlobProtoVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BlobProtoVector)
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
}

void BlobProtoVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {
  return true;
}

void BlobProtoVector::Swap(BlobProtoVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  using std::swap;
  blobs_.InternalSwap(&other->blobs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlobProtoVector::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kChannelsFieldNumber;
const int Datum::kHeightFieldNumber;
const int Datum::kWidthFieldNumber;
const int Datum::kDataFieldNumber;
const int Datum::kLabelFieldNumber;
const int Datum::kFloatDataFieldNumber;
const int Datum::kEncodedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      float_data_(from.float_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channels_, &from.channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
  // @@protoc_insertion_point(copy_constructor:caffe.Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoded_) -
      reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:caffe.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum& Datum::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_data_.Clear();
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&channels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoded_) -
        reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_float_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encoded = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_encoded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // repeated float float_data = 6;
  for (int i = 0, n = this->float_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->float_data(i), output);
  }

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->encoded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // repeated float float_data = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->float_data_, target);

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->encoded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Datum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float float_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->float_data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->float_data_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 channels = 1;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional bool encoded = 7 [default = false];
    if (has_encoded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_data_.MergeFrom(from.float_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoded_ = from.encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  using std::swap;
  float_data_.InternalSwap(&other->float_data_);
  data_.Swap(&other->data_);
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(label_, other->label_);
  swap(encoded_, other->encoded_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional int32 channels = 1;
bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
int Datum::float_data_size() const {
  return float_data_.size();
}
void Datum::clear_float_data() {
  float_data_.Clear();
}
float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> FillerParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FillerParameter::kTypeFieldNumber;
const int FillerParameter::kValueFieldNumber;
const int FillerParameter::kMinFieldNumber;
const int FillerParameter::kMaxFieldNumber;
const int FillerParameter::kMeanFieldNumber;
const int FillerParameter::kStdFieldNumber;
const int FillerParameter::kSparseFieldNumber;
const int FillerParameter::kVarianceNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FillerParameter::FillerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&value_)) + sizeof(std_));
  // @@protoc_insertion_point(copy_constructor:caffe.FillerParameter)
}

void FillerParameter::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&FillerParameter::_default_type_.get());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&variance_norm_) -
      reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
  sparse_ = -1;
  max_ = 1;
  std_ = 1;
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:caffe.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(&FillerParameter::_default_type_.get());
}

void FillerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FillerParameter& FillerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FillerParameter* FillerParameter::New(::google::protobuf::Arena* arena) const {
  FillerParameter* n = new FillerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FillerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&FillerParameter::_default_type_.get()));
    (*type_.UnsafeRawStringPointer())->assign(*&FillerParameter::_default_type_.get());
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variance_norm_) -
        reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
    sparse_ = -1;
    max_ = 1;
    std_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FillerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FillerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "constant"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FillerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sparse = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sparse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FillerParameter_VarianceNorm_IsValid(value)) {
            set_variance_norm(static_cast< ::caffe::FillerParameter_VarianceNorm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FillerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FillerParameter)
  return false;
#undef DO_
}

void FillerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FillerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min(), output);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max(), output);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mean(), output);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->std(), output);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sparse(), output);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->variance_norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FillerParameter)
}

::google::protobuf::uint8* FillerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FillerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FillerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min(), target);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sparse(), target);
  }

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->variance_norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FillerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1 [default = "constant"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (has_variance_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->variance_norm());
    }

    // optional int32 sparse = 7 [default = -1];
    if (has_sparse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparse());
    }

    // optional float max = 4 [default = 1];
    if (has_max()) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (has_std()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FillerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FillerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FillerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&FillerParameter::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      variance_norm_ = from.variance_norm_;
    }
    if (cached_has_bits & 0x00000020u) {
      sparse_ = from.sparse_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      std_ = from.std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FillerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::Swap(FillerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FillerParameter::InternalSwap(FillerParameter* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(value_, other->value_);
  swap(min_, other->min_);
  swap(mean_, other->mean_);
  swap(variance_norm_, other->variance_norm_);
  swap(sparse_, other->sparse_);
  swap(max_, other->max_);
  swap(std_, other->std_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FillerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FillerParameter

// optional string type = 1 [default = "constant"];
bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&FillerParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&FillerParameter::_default_type_.get());
}
::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&FillerParameter::_default_type_.get());
}
void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000040u;
}
void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000040u;
}
void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000080u;
}
void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000080u;
}
void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000020u;
}
void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000020u;
}
void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000010u;
}
void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000010u;
}
void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kNameFieldNumber;
const int NetParameter::kInputFieldNumber;
const int NetParameter::kInputShapeFieldNumber;
const int NetParameter::kInputDimFieldNumber;
const int NetParameter::kForceBackwardFieldNumber;
const int NetParameter::kStateFieldNumber;
const int NetParameter::kDebugInfoFieldNumber;
const int NetParameter::kLayerFieldNumber;
const int NetParameter::kLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layers_(from.layers_),
      input_(from.input_),
      input_dim_(from.input_dim_),
      input_shape_(from.input_shape_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_state()) {
    state_ = new ::caffe::NetState(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&force_backward_, &from.force_backward_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetParameter)
}

void NetParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&state_)) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:caffe.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetParameter& NetParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  input_.Clear();
  input_dim_.Clear();
  input_shape_.Clear();
  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::caffe::NetState::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&force_backward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_info_) -
        reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.V1LayerParameter layers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            static_cast<int>(this->input(this->input_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetParameter.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_dim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_input_dim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_backward = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_force_backward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobShape input_shape = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.LayerParameter layer = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(static_cast<int>(i)), output);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0, n = this->input_dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->input_dim(i), output);
  }

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_backward(), output);
  }

  // optional .caffe.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->state_, output);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_info(), output);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->input_shape(static_cast<int>(i)), output);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->layer(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe.V1LayerParameter layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->layers(static_cast<int>(i)), deterministic, target);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->input_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), static_cast<int>(this->input(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetParameter.input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated int32 input_dim = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->input_dim_, target);

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_backward(), target);
  }

  // optional .caffe.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->state_, deterministic, target);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_info(), target);
  }

  // repeated .caffe.BlobShape input_shape = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->input_shape(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe.LayerParameter layer = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, this->layer(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.V1LayerParameter layers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->layers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers(static_cast<int>(i)));
    }
  }

  // repeated string input = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_size());
  for (int i = 0, n = this->input_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_dim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->input_dim_size());
    total_size += data_size;
  }

  // repeated .caffe.BlobShape input_shape = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->input_shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_shape(static_cast<int>(i)));
    }
  }

  // repeated .caffe.LayerParameter layer = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->layer_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.NetState state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional bool force_backward = 5 [default = false];
    if (has_force_backward()) {
      total_size += 1 + 1;
    }

    // optional bool debug_info = 7 [default = false];
    if (has_debug_info()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  input_shape_.MergeFrom(from.input_shape_);
  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::caffe::NetState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000004u) {
      force_backward_ = from.force_backward_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  layers_.InternalSwap(&other->layers_);
  input_.InternalSwap(&other->input_);
  input_dim_.InternalSwap(&other->input_dim_);
  input_shape_.InternalSwap(&other->input_shape_);
  layer_.InternalSwap(&other->layer_);
  name_.Swap(&other->name_);
  swap(state_, other->state_);
  swap(force_backward_, other->force_backward_);
  swap(debug_info_, other->debug_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// optional string name = 1;
bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
int NetParameter::input_size() const {
  return input_.size();
}
void NetParameter::clear_input() {
  input_.Clear();
}
const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetParameter::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#if LANG_CXX11
void NetParameter::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#endif
void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
const ::caffe::NetState& NetParameter::state() const {
  const ::caffe::NetState* p = state_;
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
int NetParameter::layers_size() const {
  return layers_.size();
}
void NetParameter::clear_layers() {
  layers_.Clear();
}
const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TestProto::_default_source_splitflag_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestProto::kTestTypeFieldNumber;
const int TestProto::kTestFileFieldNumber;
const int TestProto::kMapFileFieldNumber;
const int TestProto::kAffineImageParamFieldNumber;
const int TestProto::kDeployNetFieldNumber;
const int TestProto::kKeyPointsCountFieldNumber;
const int TestProto::kDataFolderFieldNumber;
const int TestProto::kOutputLayernameFieldNumber;
const int TestProto::kDatascaleFieldNumber;
const int TestProto::kMeanvalueFieldNumber;
const int TestProto::kTopnFieldNumber;
const int TestProto::kSaveFeatureFilenameFieldNumber;
const int TestProto::kSourceSplitflagFieldNumber;
const int TestProto::kDataChannelsFieldNumber;
const int TestProto::kWidthFieldNumber;
const int TestProto::kHeightFieldNumber;
const int TestProto::kOutHeightFieldNumber;
const int TestProto::kOutWidthFieldNumber;
const int TestProto::kOutChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestProto::TestProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TestProto)
}
TestProto::TestProto(const TestProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      affine_image_param_(from.affine_image_param_),
      topn_(from.topn_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_test_file()) {
    test_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_file_);
  }
  deploy_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deploy_net()) {
    deploy_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deploy_net_);
  }
  map_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_file()) {
    map_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_file_);
  }
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_folder()) {
    data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
  output_layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_layername()) {
    output_layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_layername_);
  }
  save_feature_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_feature_filename()) {
    save_feature_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_feature_filename_);
  }
  source_splitflag_.UnsafeSetDefault(&TestProto::_default_source_splitflag_.get());
  if (from.has_source_splitflag()) {
    source_splitflag_.AssignWithDefault(&TestProto::_default_source_splitflag_.get(), from.source_splitflag_);
  }
  ::memcpy(&test_type_, &from.test_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&datascale_) -
    reinterpret_cast<char*>(&test_type_)) + sizeof(datascale_));
  // @@protoc_insertion_point(copy_constructor:caffe.TestProto)
}

void TestProto::SharedCtor() {
  _cached_size_ = 0;
  test_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deploy_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_feature_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_splitflag_.UnsafeSetDefault(&TestProto::_default_source_splitflag_.get());
  ::memset(&test_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_channels_) -
      reinterpret_cast<char*>(&test_type_)) + sizeof(out_channels_));
  datascale_ = 1;
}

TestProto::~TestProto() {
  // @@protoc_insertion_point(destructor:caffe.TestProto)
  SharedDtor();
}

void TestProto::SharedDtor() {
  test_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deploy_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_layername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_feature_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_splitflag_.DestroyNoArena(&TestProto::_default_source_splitflag_.get());
}

void TestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestProto::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestProto& TestProto::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestProto* TestProto::New(::google::protobuf::Arena* arena) const {
  TestProto* n = new TestProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TestProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affine_image_param_.Clear();
  topn_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!test_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*test_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!deploy_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deploy_net_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!map_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!data_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_folder_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!output_layername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*output_layername_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!save_feature_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*save_feature_filename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!source_splitflag_.IsDefault(&TestProto::_default_source_splitflag_.get()));
      (*source_splitflag_.UnsafeRawStringPointer())->assign(*&TestProto::_default_source_splitflag_.get());
    }
  }
  test_type_ = 0;
  if (cached_has_bits & 65280u) {
    ::memset(&key_points_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&out_channels_) -
        reinterpret_cast<char*>(&key_points_count_)) + sizeof(out_channels_));
  }
  datascale_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TestProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TestProto.TestType test_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TestProto_TestType_IsValid(value)) {
            set_test_type(static_cast< ::caffe::TestProto_TestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string test_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_file().data(), static_cast<int>(this->test_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.test_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.AffineImageParameter affine_image_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_affine_image_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deploy_net = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deploy_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deploy_net().data(), static_cast<int>(this->deploy_net().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.deploy_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_points_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_key_points_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_points_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_file = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_file().data(), static_cast<int>(this->map_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.map_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_folder = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_folder().data(), static_cast<int>(this->data_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.data_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string output_layername = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_layername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_layername().data(), static_cast<int>(this->output_layername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.output_layername");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float datascale = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_datascale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &datascale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float meanvalue = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_meanvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 topn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_topn())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_topn())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string save_feature_filename = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_feature_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_feature_filename().data(), static_cast<int>(this->save_feature_filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.save_feature_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_splitflag = 13 [default = "||"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_splitflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TestProto.source_splitflag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data_channels = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_data_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_height = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_out_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_width = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_out_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 out_channels = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_out_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TestProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TestProto)
  return false;
#undef DO_
}

void TestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TestProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TestProto.TestType test_type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->test_type(), output);
  }

  // optional string test_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_file().data(), static_cast<int>(this->test_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.test_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->test_file(), output);
  }

  // repeated .caffe.AffineImageParameter affine_image_param = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_image_param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->affine_image_param(static_cast<int>(i)), output);
  }

  // optional string deploy_net = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deploy_net().data(), static_cast<int>(this->deploy_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.deploy_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deploy_net(), output);
  }

  // optional int32 key_points_count = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->key_points_count(), output);
  }

  // optional string map_file = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_file().data(), static_cast<int>(this->map_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.map_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->map_file(), output);
  }

  // optional string data_folder = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.data_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data_folder(), output);
  }

  // optional string output_layername = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_layername().data(), static_cast<int>(this->output_layername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.output_layername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->output_layername(), output);
  }

  // optional float datascale = 9 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->datascale(), output);
  }

  // optional float meanvalue = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->meanvalue(), output);
  }

  // repeated int32 topn = 11;
  for (int i = 0, n = this->topn_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->topn(i), output);
  }

  // optional string save_feature_filename = 12 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_feature_filename().data(), static_cast<int>(this->save_feature_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.save_feature_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->save_feature_filename(), output);
  }

  // optional string source_splitflag = 13 [default = "||"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.source_splitflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->source_splitflag(), output);
  }

  // optional int32 data_channels = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->data_channels(), output);
  }

  // optional int32 width = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->width(), output);
  }

  // optional int32 height = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->height(), output);
  }

  // optional int32 out_height = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->out_height(), output);
  }

  // optional int32 out_width = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->out_width(), output);
  }

  // optional int32 out_channels = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->out_channels(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TestProto)
}

::google::protobuf::uint8* TestProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TestProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TestProto.TestType test_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->test_type(), target);
  }

  // optional string test_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_file().data(), static_cast<int>(this->test_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.test_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->test_file(), target);
  }

  // repeated .caffe.AffineImageParameter affine_image_param = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_image_param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->affine_image_param(static_cast<int>(i)), deterministic, target);
  }

  // optional string deploy_net = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deploy_net().data(), static_cast<int>(this->deploy_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.deploy_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deploy_net(), target);
  }

  // optional int32 key_points_count = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->key_points_count(), target);
  }

  // optional string map_file = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_file().data(), static_cast<int>(this->map_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.map_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map_file(), target);
  }

  // optional string data_folder = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.data_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data_folder(), target);
  }

  // optional string output_layername = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_layername().data(), static_cast<int>(this->output_layername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.output_layername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->output_layername(), target);
  }

  // optional float datascale = 9 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->datascale(), target);
  }

  // optional float meanvalue = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->meanvalue(), target);
  }

  // repeated int32 topn = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->topn_, target);

  // optional string save_feature_filename = 12 [default = ""];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_feature_filename().data(), static_cast<int>(this->save_feature_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.save_feature_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->save_feature_filename(), target);
  }

  // optional string source_splitflag = 13 [default = "||"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TestProto.source_splitflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->source_splitflag(), target);
  }

  // optional int32 data_channels = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->data_channels(), target);
  }

  // optional int32 width = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->width(), target);
  }

  // optional int32 height = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->height(), target);
  }

  // optional int32 out_height = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->out_height(), target);
  }

  // optional int32 out_width = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->out_width(), target);
  }

  // optional int32 out_channels = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->out_channels(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TestProto)
  return target;
}

size_t TestProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TestProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.AffineImageParameter affine_image_param = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->affine_image_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affine_image_param(static_cast<int>(i)));
    }
  }

  // repeated int32 topn = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->topn_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->topn_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string test_file = 2;
    if (has_test_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test_file());
    }

    // optional string deploy_net = 4;
    if (has_deploy_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deploy_net());
    }

    // optional string map_file = 6;
    if (has_map_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_file());
    }

    // optional string data_folder = 7;
    if (has_data_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_folder());
    }

    // optional string output_layername = 8;
    if (has_output_layername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_layername());
    }

    // optional string save_feature_filename = 12 [default = ""];
    if (has_save_feature_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_feature_filename());
    }

    // optional string source_splitflag = 13 [default = "||"];
    if (has_source_splitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_splitflag());
    }

    // optional .caffe.TestProto.TestType test_type = 1;
    if (has_test_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 key_points_count = 5;
    if (has_key_points_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_points_count());
    }

    // optional float meanvalue = 10 [default = 0];
    if (has_meanvalue()) {
      total_size += 1 + 4;
    }

    // optional int32 data_channels = 14;
    if (has_data_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_channels());
    }

    // optional int32 width = 15;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 16;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 out_height = 17;
    if (has_out_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_height());
    }

    // optional int32 out_width = 18;
    if (has_out_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_width());
    }

    // optional int32 out_channels = 19;
    if (has_out_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_channels());
    }

  }
  // optional float datascale = 9 [default = 1];
  if (has_datascale()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TestProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TestProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TestProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TestProto)
    MergeFrom(*source);
  }
}

void TestProto::MergeFrom(const TestProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TestProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affine_image_param_.MergeFrom(from.affine_image_param_);
  topn_.MergeFrom(from.topn_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_test_file();
      test_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_deploy_net();
      deploy_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deploy_net_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_map_file();
      map_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_data_folder();
      data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_output_layername();
      output_layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_layername_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_save_feature_filename();
      save_feature_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_feature_filename_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_source_splitflag();
      source_splitflag_.AssignWithDefault(&TestProto::_default_source_splitflag_.get(), from.source_splitflag_);
    }
    if (cached_has_bits & 0x00000080u) {
      test_type_ = from.test_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      key_points_count_ = from.key_points_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      meanvalue_ = from.meanvalue_;
    }
    if (cached_has_bits & 0x00000400u) {
      data_channels_ = from.data_channels_;
    }
    if (cached_has_bits & 0x00000800u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00001000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00002000u) {
      out_height_ = from.out_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      out_width_ = from.out_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      out_channels_ = from.out_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_datascale(from.datascale());
  }
}

void TestProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestProto::CopyFrom(const TestProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TestProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto::IsInitialized() const {
  return true;
}

void TestProto::Swap(TestProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestProto::InternalSwap(TestProto* other) {
  using std::swap;
  affine_image_param_.InternalSwap(&other->affine_image_param_);
  topn_.InternalSwap(&other->topn_);
  test_file_.Swap(&other->test_file_);
  deploy_net_.Swap(&other->deploy_net_);
  map_file_.Swap(&other->map_file_);
  data_folder_.Swap(&other->data_folder_);
  output_layername_.Swap(&other->output_layername_);
  save_feature_filename_.Swap(&other->save_feature_filename_);
  source_splitflag_.Swap(&other->source_splitflag_);
  swap(test_type_, other->test_type_);
  swap(key_points_count_, other->key_points_count_);
  swap(meanvalue_, other->meanvalue_);
  swap(data_channels_, other->data_channels_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(out_height_, other->out_height_);
  swap(out_width_, other->out_width_);
  swap(out_channels_, other->out_channels_);
  swap(datascale_, other->datascale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestProto::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestProto

// optional .caffe.TestProto.TestType test_type = 1;
bool TestProto::has_test_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TestProto::set_has_test_type() {
  _has_bits_[0] |= 0x00000080u;
}
void TestProto::clear_has_test_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void TestProto::clear_test_type() {
  test_type_ = 0;
  clear_has_test_type();
}
::caffe::TestProto_TestType TestProto::test_type() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.test_type)
  return static_cast< ::caffe::TestProto_TestType >(test_type_);
}
void TestProto::set_test_type(::caffe::TestProto_TestType value) {
  assert(::caffe::TestProto_TestType_IsValid(value));
  set_has_test_type();
  test_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.test_type)
}

// optional string test_file = 2;
bool TestProto::has_test_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestProto::set_has_test_file() {
  _has_bits_[0] |= 0x00000001u;
}
void TestProto::clear_has_test_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestProto::clear_test_file() {
  test_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_test_file();
}
const ::std::string& TestProto::test_file() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.test_file)
  return test_file_.GetNoArena();
}
void TestProto::set_test_file(const ::std::string& value) {
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.test_file)
}
#if LANG_CXX11
void TestProto::set_test_file(::std::string&& value) {
  set_has_test_file();
  test_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.test_file)
}
#endif
void TestProto::set_test_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.test_file)
}
void TestProto::set_test_file(const char* value, size_t size) {
  set_has_test_file();
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.test_file)
}
::std::string* TestProto::mutable_test_file() {
  set_has_test_file();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.test_file)
  return test_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_test_file() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.test_file)
  clear_has_test_file();
  return test_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_test_file(::std::string* test_file) {
  if (test_file != NULL) {
    set_has_test_file();
  } else {
    clear_has_test_file();
  }
  test_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.test_file)
}

// optional string map_file = 6;
bool TestProto::has_map_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestProto::set_has_map_file() {
  _has_bits_[0] |= 0x00000004u;
}
void TestProto::clear_has_map_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestProto::clear_map_file() {
  map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_file();
}
const ::std::string& TestProto::map_file() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.map_file)
  return map_file_.GetNoArena();
}
void TestProto::set_map_file(const ::std::string& value) {
  set_has_map_file();
  map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.map_file)
}
#if LANG_CXX11
void TestProto::set_map_file(::std::string&& value) {
  set_has_map_file();
  map_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.map_file)
}
#endif
void TestProto::set_map_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_file();
  map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.map_file)
}
void TestProto::set_map_file(const char* value, size_t size) {
  set_has_map_file();
  map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.map_file)
}
::std::string* TestProto::mutable_map_file() {
  set_has_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.map_file)
  return map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_map_file() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.map_file)
  clear_has_map_file();
  return map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_map_file(::std::string* map_file) {
  if (map_file != NULL) {
    set_has_map_file();
  } else {
    clear_has_map_file();
  }
  map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.map_file)
}

// repeated .caffe.AffineImageParameter affine_image_param = 3;
int TestProto::affine_image_param_size() const {
  return affine_image_param_.size();
}
void TestProto::clear_affine_image_param() {
  affine_image_param_.Clear();
}
const ::caffe::AffineImageParameter& TestProto::affine_image_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.affine_image_param)
  return affine_image_param_.Get(index);
}
::caffe::AffineImageParameter* TestProto::mutable_affine_image_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.affine_image_param)
  return affine_image_param_.Mutable(index);
}
::caffe::AffineImageParameter* TestProto::add_affine_image_param() {
  // @@protoc_insertion_point(field_add:caffe.TestProto.affine_image_param)
  return affine_image_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
TestProto::mutable_affine_image_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TestProto.affine_image_param)
  return &affine_image_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
TestProto::affine_image_param() const {
  // @@protoc_insertion_point(field_list:caffe.TestProto.affine_image_param)
  return affine_image_param_;
}

// optional string deploy_net = 4;
bool TestProto::has_deploy_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestProto::set_has_deploy_net() {
  _has_bits_[0] |= 0x00000002u;
}
void TestProto::clear_has_deploy_net() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestProto::clear_deploy_net() {
  deploy_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deploy_net();
}
const ::std::string& TestProto::deploy_net() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.deploy_net)
  return deploy_net_.GetNoArena();
}
void TestProto::set_deploy_net(const ::std::string& value) {
  set_has_deploy_net();
  deploy_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.deploy_net)
}
#if LANG_CXX11
void TestProto::set_deploy_net(::std::string&& value) {
  set_has_deploy_net();
  deploy_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.deploy_net)
}
#endif
void TestProto::set_deploy_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deploy_net();
  deploy_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.deploy_net)
}
void TestProto::set_deploy_net(const char* value, size_t size) {
  set_has_deploy_net();
  deploy_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.deploy_net)
}
::std::string* TestProto::mutable_deploy_net() {
  set_has_deploy_net();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.deploy_net)
  return deploy_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_deploy_net() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.deploy_net)
  clear_has_deploy_net();
  return deploy_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_deploy_net(::std::string* deploy_net) {
  if (deploy_net != NULL) {
    set_has_deploy_net();
  } else {
    clear_has_deploy_net();
  }
  deploy_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deploy_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.deploy_net)
}

// optional int32 key_points_count = 5;
bool TestProto::has_key_points_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TestProto::set_has_key_points_count() {
  _has_bits_[0] |= 0x00000100u;
}
void TestProto::clear_has_key_points_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void TestProto::clear_key_points_count() {
  key_points_count_ = 0;
  clear_has_key_points_count();
}
::google::protobuf::int32 TestProto::key_points_count() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.key_points_count)
  return key_points_count_;
}
void TestProto::set_key_points_count(::google::protobuf::int32 value) {
  set_has_key_points_count();
  key_points_count_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.key_points_count)
}

// optional string data_folder = 7;
bool TestProto::has_data_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestProto::set_has_data_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void TestProto::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestProto::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_folder();
}
const ::std::string& TestProto::data_folder() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.data_folder)
  return data_folder_.GetNoArena();
}
void TestProto::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.data_folder)
}
#if LANG_CXX11
void TestProto::set_data_folder(::std::string&& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.data_folder)
}
#endif
void TestProto::set_data_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.data_folder)
}
void TestProto::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.data_folder)
}
::std::string* TestProto::mutable_data_folder() {
  set_has_data_folder();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.data_folder)
  return data_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_data_folder() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.data_folder)
  clear_has_data_folder();
  return data_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder != NULL) {
    set_has_data_folder();
  } else {
    clear_has_data_folder();
  }
  data_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.data_folder)
}

// optional string output_layername = 8;
bool TestProto::has_output_layername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TestProto::set_has_output_layername() {
  _has_bits_[0] |= 0x00000010u;
}
void TestProto::clear_has_output_layername() {
  _has_bits_[0] &= ~0x00000010u;
}
void TestProto::clear_output_layername() {
  output_layername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_layername();
}
const ::std::string& TestProto::output_layername() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.output_layername)
  return output_layername_.GetNoArena();
}
void TestProto::set_output_layername(const ::std::string& value) {
  set_has_output_layername();
  output_layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.output_layername)
}
#if LANG_CXX11
void TestProto::set_output_layername(::std::string&& value) {
  set_has_output_layername();
  output_layername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.output_layername)
}
#endif
void TestProto::set_output_layername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_layername();
  output_layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.output_layername)
}
void TestProto::set_output_layername(const char* value, size_t size) {
  set_has_output_layername();
  output_layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.output_layername)
}
::std::string* TestProto::mutable_output_layername() {
  set_has_output_layername();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.output_layername)
  return output_layername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_output_layername() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.output_layername)
  clear_has_output_layername();
  return output_layername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_output_layername(::std::string* output_layername) {
  if (output_layername != NULL) {
    set_has_output_layername();
  } else {
    clear_has_output_layername();
  }
  output_layername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_layername);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.output_layername)
}

// optional float datascale = 9 [default = 1];
bool TestProto::has_datascale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TestProto::set_has_datascale() {
  _has_bits_[0] |= 0x00010000u;
}
void TestProto::clear_has_datascale() {
  _has_bits_[0] &= ~0x00010000u;
}
void TestProto::clear_datascale() {
  datascale_ = 1;
  clear_has_datascale();
}
float TestProto::datascale() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.datascale)
  return datascale_;
}
void TestProto::set_datascale(float value) {
  set_has_datascale();
  datascale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.datascale)
}

// optional float meanvalue = 10 [default = 0];
bool TestProto::has_meanvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TestProto::set_has_meanvalue() {
  _has_bits_[0] |= 0x00000200u;
}
void TestProto::clear_has_meanvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
void TestProto::clear_meanvalue() {
  meanvalue_ = 0;
  clear_has_meanvalue();
}
float TestProto::meanvalue() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.meanvalue)
  return meanvalue_;
}
void TestProto::set_meanvalue(float value) {
  set_has_meanvalue();
  meanvalue_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.meanvalue)
}

// repeated int32 topn = 11;
int TestProto::topn_size() const {
  return topn_.size();
}
void TestProto::clear_topn() {
  topn_.Clear();
}
::google::protobuf::int32 TestProto::topn(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.topn)
  return topn_.Get(index);
}
void TestProto::set_topn(int index, ::google::protobuf::int32 value) {
  topn_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.topn)
}
void TestProto::add_topn(::google::protobuf::int32 value) {
  topn_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TestProto.topn)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestProto::topn() const {
  // @@protoc_insertion_point(field_list:caffe.TestProto.topn)
  return topn_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestProto::mutable_topn() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TestProto.topn)
  return &topn_;
}

// optional string save_feature_filename = 12 [default = ""];
bool TestProto::has_save_feature_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TestProto::set_has_save_feature_filename() {
  _has_bits_[0] |= 0x00000020u;
}
void TestProto::clear_has_save_feature_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
void TestProto::clear_save_feature_filename() {
  save_feature_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_feature_filename();
}
const ::std::string& TestProto::save_feature_filename() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.save_feature_filename)
  return save_feature_filename_.GetNoArena();
}
void TestProto::set_save_feature_filename(const ::std::string& value) {
  set_has_save_feature_filename();
  save_feature_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.save_feature_filename)
}
#if LANG_CXX11
void TestProto::set_save_feature_filename(::std::string&& value) {
  set_has_save_feature_filename();
  save_feature_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.save_feature_filename)
}
#endif
void TestProto::set_save_feature_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_feature_filename();
  save_feature_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.save_feature_filename)
}
void TestProto::set_save_feature_filename(const char* value, size_t size) {
  set_has_save_feature_filename();
  save_feature_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.save_feature_filename)
}
::std::string* TestProto::mutable_save_feature_filename() {
  set_has_save_feature_filename();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.save_feature_filename)
  return save_feature_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TestProto::release_save_feature_filename() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.save_feature_filename)
  clear_has_save_feature_filename();
  return save_feature_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TestProto::set_allocated_save_feature_filename(::std::string* save_feature_filename) {
  if (save_feature_filename != NULL) {
    set_has_save_feature_filename();
  } else {
    clear_has_save_feature_filename();
  }
  save_feature_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_feature_filename);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.save_feature_filename)
}

// optional string source_splitflag = 13 [default = "||"];
bool TestProto::has_source_splitflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TestProto::set_has_source_splitflag() {
  _has_bits_[0] |= 0x00000040u;
}
void TestProto::clear_has_source_splitflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void TestProto::clear_source_splitflag() {
  source_splitflag_.ClearToDefaultNoArena(&TestProto::_default_source_splitflag_.get());
  clear_has_source_splitflag();
}
const ::std::string& TestProto::source_splitflag() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.source_splitflag)
  return source_splitflag_.GetNoArena();
}
void TestProto::set_source_splitflag(const ::std::string& value) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&TestProto::_default_source_splitflag_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.TestProto.source_splitflag)
}
#if LANG_CXX11
void TestProto::set_source_splitflag(::std::string&& value) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(
    &TestProto::_default_source_splitflag_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TestProto.source_splitflag)
}
#endif
void TestProto::set_source_splitflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&TestProto::_default_source_splitflag_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TestProto.source_splitflag)
}
void TestProto::set_source_splitflag(const char* value, size_t size) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&TestProto::_default_source_splitflag_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TestProto.source_splitflag)
}
::std::string* TestProto::mutable_source_splitflag() {
  set_has_source_splitflag();
  // @@protoc_insertion_point(field_mutable:caffe.TestProto.source_splitflag)
  return source_splitflag_.MutableNoArena(&TestProto::_default_source_splitflag_.get());
}
::std::string* TestProto::release_source_splitflag() {
  // @@protoc_insertion_point(field_release:caffe.TestProto.source_splitflag)
  clear_has_source_splitflag();
  return source_splitflag_.ReleaseNoArena(&TestProto::_default_source_splitflag_.get());
}
void TestProto::set_allocated_source_splitflag(::std::string* source_splitflag) {
  if (source_splitflag != NULL) {
    set_has_source_splitflag();
  } else {
    clear_has_source_splitflag();
  }
  source_splitflag_.SetAllocatedNoArena(&TestProto::_default_source_splitflag_.get(), source_splitflag);
  // @@protoc_insertion_point(field_set_allocated:caffe.TestProto.source_splitflag)
}

// optional int32 data_channels = 14;
bool TestProto::has_data_channels() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TestProto::set_has_data_channels() {
  _has_bits_[0] |= 0x00000400u;
}
void TestProto::clear_has_data_channels() {
  _has_bits_[0] &= ~0x00000400u;
}
void TestProto::clear_data_channels() {
  data_channels_ = 0;
  clear_has_data_channels();
}
::google::protobuf::int32 TestProto::data_channels() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.data_channels)
  return data_channels_;
}
void TestProto::set_data_channels(::google::protobuf::int32 value) {
  set_has_data_channels();
  data_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.data_channels)
}

// optional int32 width = 15;
bool TestProto::has_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TestProto::set_has_width() {
  _has_bits_[0] |= 0x00000800u;
}
void TestProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000800u;
}
void TestProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 TestProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.width)
  return width_;
}
void TestProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.width)
}

// optional int32 height = 16;
bool TestProto::has_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TestProto::set_has_height() {
  _has_bits_[0] |= 0x00001000u;
}
void TestProto::clear_has_height() {
  _has_bits_[0] &= ~0x00001000u;
}
void TestProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 TestProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.height)
  return height_;
}
void TestProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.height)
}

// optional int32 out_height = 17;
bool TestProto::has_out_height() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TestProto::set_has_out_height() {
  _has_bits_[0] |= 0x00002000u;
}
void TestProto::clear_has_out_height() {
  _has_bits_[0] &= ~0x00002000u;
}
void TestProto::clear_out_height() {
  out_height_ = 0;
  clear_has_out_height();
}
::google::protobuf::int32 TestProto::out_height() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.out_height)
  return out_height_;
}
void TestProto::set_out_height(::google::protobuf::int32 value) {
  set_has_out_height();
  out_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.out_height)
}

// optional int32 out_width = 18;
bool TestProto::has_out_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TestProto::set_has_out_width() {
  _has_bits_[0] |= 0x00004000u;
}
void TestProto::clear_has_out_width() {
  _has_bits_[0] &= ~0x00004000u;
}
void TestProto::clear_out_width() {
  out_width_ = 0;
  clear_has_out_width();
}
::google::protobuf::int32 TestProto::out_width() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.out_width)
  return out_width_;
}
void TestProto::set_out_width(::google::protobuf::int32 value) {
  set_has_out_width();
  out_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.out_width)
}

// optional int32 out_channels = 19;
bool TestProto::has_out_channels() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TestProto::set_has_out_channels() {
  _has_bits_[0] |= 0x00008000u;
}
void TestProto::clear_has_out_channels() {
  _has_bits_[0] &= ~0x00008000u;
}
void TestProto::clear_out_channels() {
  out_channels_ = 0;
  clear_has_out_channels();
}
::google::protobuf::int32 TestProto::out_channels() const {
  // @@protoc_insertion_point(field_get:caffe.TestProto.out_channels)
  return out_channels_;
}
void TestProto::set_out_channels(::google::protobuf::int32 value) {
  set_has_out_channels();
  out_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.TestProto.out_channels)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestProtos::kTestProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestProtos::TestProtos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TestProtos)
}
TestProtos::TestProtos(const TestProtos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      test_proto_(from.test_proto_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.TestProtos)
}

void TestProtos::SharedCtor() {
  _cached_size_ = 0;
}

TestProtos::~TestProtos() {
  // @@protoc_insertion_point(destructor:caffe.TestProtos)
  SharedDtor();
}

void TestProtos::SharedDtor() {
}

void TestProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestProtos::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestProtos& TestProtos::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestProtos* TestProtos::New(::google::protobuf::Arena* arena) const {
  TestProtos* n = new TestProtos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TestProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_proto_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TestProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.TestProto test_proto = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TestProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TestProtos)
  return false;
#undef DO_
}

void TestProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TestProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.TestProto test_proto = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_proto_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->test_proto(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TestProtos)
}

::google::protobuf::uint8* TestProtos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TestProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.TestProto test_proto = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_proto_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->test_proto(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TestProtos)
  return target;
}

size_t TestProtos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TestProtos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.TestProto test_proto = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->test_proto_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_proto(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TestProtos)
  GOOGLE_DCHECK_NE(&from, this);
  const TestProtos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestProtos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TestProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TestProtos)
    MergeFrom(*source);
  }
}

void TestProtos::MergeFrom(const TestProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TestProtos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_proto_.MergeFrom(from.test_proto_);
}

void TestProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TestProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestProtos::CopyFrom(const TestProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TestProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProtos::IsInitialized() const {
  return true;
}

void TestProtos::Swap(TestProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestProtos::InternalSwap(TestProtos* other) {
  using std::swap;
  test_proto_.InternalSwap(&other->test_proto_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestProtos::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestProtos

// repeated .caffe.TestProto test_proto = 1;
int TestProtos::test_proto_size() const {
  return test_proto_.size();
}
void TestProtos::clear_test_proto() {
  test_proto_.Clear();
}
const ::caffe::TestProto& TestProtos::test_proto(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TestProtos.test_proto)
  return test_proto_.Get(index);
}
::caffe::TestProto* TestProtos::mutable_test_proto(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TestProtos.test_proto)
  return test_proto_.Mutable(index);
}
::caffe::TestProto* TestProtos::add_test_proto() {
  // @@protoc_insertion_point(field_add:caffe.TestProtos.test_proto)
  return test_proto_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::TestProto >*
TestProtos::mutable_test_proto() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TestProtos.test_proto)
  return &test_proto_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::TestProto >&
TestProtos::test_proto() const {
  // @@protoc_insertion_point(field_list:caffe.TestProtos.test_proto)
  return test_proto_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_regularization_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SolverParameter::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverParameter::kNetFieldNumber;
const int SolverParameter::kNetParamFieldNumber;
const int SolverParameter::kTrainNetFieldNumber;
const int SolverParameter::kTestNetFieldNumber;
const int SolverParameter::kTrainNetParamFieldNumber;
const int SolverParameter::kTestNetParamFieldNumber;
const int SolverParameter::kTrainStateFieldNumber;
const int SolverParameter::kTestStateFieldNumber;
const int SolverParameter::kTestIterFieldNumber;
const int SolverParameter::kTestIntervalFieldNumber;
const int SolverParameter::kTestComputeLossFieldNumber;
const int SolverParameter::kTestInitializationFieldNumber;
const int SolverParameter::kBaseLrFieldNumber;
const int SolverParameter::kDisplayFieldNumber;
const int SolverParameter::kAverageLossFieldNumber;
const int SolverParameter::kMaxIterFieldNumber;
const int SolverParameter::kIterSizeFieldNumber;
const int SolverParameter::kLrPolicyFieldNumber;
const int SolverParameter::kGammaFieldNumber;
const int SolverParameter::kPowerFieldNumber;
const int SolverParameter::kMomentumFieldNumber;
const int SolverParameter::kWeightDecayFieldNumber;
const int SolverParameter::kRegularizationTypeFieldNumber;
const int SolverParameter::kStepsizeFieldNumber;
const int SolverParameter::kStepvalueFieldNumber;
const int SolverParameter::kClipGradientsFieldNumber;
const int SolverParameter::kSnapshotFieldNumber;
const int SolverParameter::kSnapshotPrefixFieldNumber;
const int SolverParameter::kSnapshotDiffFieldNumber;
const int SolverParameter::kSnapshotFormatFieldNumber;
const int SolverParameter::kSolverModeFieldNumber;
const int SolverParameter::kDeviceIdFieldNumber;
const int SolverParameter::kRandomSeedFieldNumber;
const int SolverParameter::kTypeFieldNumber;
const int SolverParameter::kDeltaFieldNumber;
const int SolverParameter::kMomentum2FieldNumber;
const int SolverParameter::kRmsDecayFieldNumber;
const int SolverParameter::kDebugInfoFieldNumber;
const int SolverParameter::kSnapshotAfterTrainFieldNumber;
const int SolverParameter::kSolverTypeFieldNumber;
const int SolverParameter::kPrintDatadiffFieldNumber;
const int SolverParameter::kPrintParamFieldNumber;
const int SolverParameter::kSaveBlobFieldNumber;
const int SolverParameter::kSaveBlobPathFieldNumber;
const int SolverParameter::kSaveTestBlobsFieldNumber;
const int SolverParameter::kTestProtosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverParameter::SolverParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverParameter)
}
SolverParameter::SolverParameter(const SolverParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      test_net_(from.test_net_),
      test_iter_(from.test_iter_),
      test_net_param_(from.test_net_param_),
      test_state_(from.test_state_),
      stepvalue_(from.stepvalue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_train_net()) {
    train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
  }
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lr_policy()) {
    lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
  }
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snapshot_prefix()) {
    snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net()) {
    net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  regularization_type_.UnsafeSetDefault(&SolverParameter::_default_regularization_type_.get());
  if (from.has_regularization_type()) {
    regularization_type_.AssignWithDefault(&SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
  }
  type_.UnsafeSetDefault(&SolverParameter::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&SolverParameter::_default_type_.get(), from.type_);
  }
  save_blob_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_save_blob_path()) {
    save_blob_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_blob_path_);
  }
  if (from.has_train_net_param()) {
    train_net_param_ = new ::caffe::NetParameter(*from.train_net_param_);
  } else {
    train_net_param_ = NULL;
  }
  if (from.has_net_param()) {
    net_param_ = new ::caffe::NetParameter(*from.net_param_);
  } else {
    net_param_ = NULL;
  }
  if (from.has_train_state()) {
    train_state_ = new ::caffe::NetState(*from.train_state_);
  } else {
    train_state_ = NULL;
  }
  if (from.has_test_protos()) {
    test_protos_ = new ::caffe::TestProtos(*from.test_protos_);
  } else {
    test_protos_ = NULL;
  }
  ::memcpy(&test_interval_, &from.test_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&momentum2_) -
    reinterpret_cast<char*>(&test_interval_)) + sizeof(momentum2_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverParameter)
}

void SolverParameter::SharedCtor() {
  train_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(&SolverParameter::_default_regularization_type_.get());
  type_.UnsafeSetDefault(&SolverParameter::_default_type_.get());
  save_blob_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&train_net_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_blob_) -
      reinterpret_cast<char*>(&train_net_param_)) + sizeof(save_blob_));
  random_seed_ = GOOGLE_LONGLONG(-1);
  solver_mode_ = 1;
  test_initialization_ = true;
  snapshot_after_train_ = true;
  delta_ = 1e-08f;
  average_loss_ = 1;
  clip_gradients_ = -1;
  iter_size_ = 1;
  snapshot_format_ = 1;
  momentum2_ = 0.999f;
  _cached_size_ = 0;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:caffe.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  train_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(&SolverParameter::_default_regularization_type_.get());
  type_.DestroyNoArena(&SolverParameter::_default_type_.get());
  save_blob_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete train_net_param_;
  if (this != internal_default_instance()) delete net_param_;
  if (this != internal_default_instance()) delete train_state_;
  if (this != internal_default_instance()) delete test_protos_;
}

void SolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverParameter& SolverParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverParameter* SolverParameter::New(::google::protobuf::Arena* arena) const {
  SolverParameter* n = new SolverParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_net_.Clear();
  test_iter_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  stepvalue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!train_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*train_net_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!lr_policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lr_policy_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!snapshot_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*snapshot_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!regularization_type_.IsDefault(&SolverParameter::_default_regularization_type_.get()));
      (*regularization_type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_regularization_type_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!type_.IsDefault(&SolverParameter::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&SolverParameter::_default_type_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!save_blob_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*save_blob_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(train_net_param_ != NULL);
      train_net_param_->::caffe::NetParameter::Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(net_param_ != NULL);
      net_param_->::caffe::NetParameter::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(train_state_ != NULL);
      train_state_->::caffe::NetState::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(test_protos_ != NULL);
      test_protos_->::caffe::TestProtos::Clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&test_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamma_) -
        reinterpret_cast<char*>(&test_interval_)) + sizeof(gamma_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snapshot_diff_) -
        reinterpret_cast<char*>(&power_)) + sizeof(snapshot_diff_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&debug_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&save_blob_) -
        reinterpret_cast<char*>(&debug_info_)) + sizeof(save_blob_));
    random_seed_ = GOOGLE_LONGLONG(-1);
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    solver_mode_ = 1;
    test_initialization_ = true;
    snapshot_after_train_ = true;
    delta_ = 1e-08f;
    average_loss_ = 1;
    clip_gradients_ = -1;
    iter_size_ = 1;
    snapshot_format_ = 1;
  }
  momentum2_ = 0.999f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_net().data(), static_cast<int>(this->train_net().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.train_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string test_net = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_net(this->test_net_size() - 1).data(),
            static_cast<int>(this->test_net(this->test_net_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.test_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 test_iter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_test_iter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_test_iter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 test_interval = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_test_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float base_lr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_base_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lr_policy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lr_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.lr_policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float power = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_decay = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_weight_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stepsize = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_stepsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stepsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 snapshot = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_snapshot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snapshot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snapshot_prefix = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.snapshot_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_diff = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_snapshot_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverMode_IsValid(value)) {
            set_solver_mode(static_cast< ::caffe::SolverParameter_SolverMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 device_id = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_compute_loss = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_test_compute_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_compute_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 random_seed = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter train_net_param = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetParameter test_net_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_debug_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net().data(), static_cast<int>(this->net().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetParameter net_param = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.NetState train_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetState test_state = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_test_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snapshot_after_train = 28 [default = true];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_snapshot_after_train();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snapshot_after_train_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string regularization_type = 29 [default = "L2"];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularization_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.regularization_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SolverType_IsValid(value)) {
            set_solver_type(static_cast< ::caffe::SolverParameter_SolverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                30, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 31 [default = 1e-08];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool test_initialization = 32 [default = true];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_test_initialization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_initialization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_loss = 33 [default = 1];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_average_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stepvalue = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272u, input, this->mutable_stepvalue())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stepvalue())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clip_gradients = 35 [default = -1];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
          set_has_clip_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iter_size = 36 [default = 1];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_iter_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SolverParameter_SnapshotFormat_IsValid(value)) {
            set_snapshot_format(static_cast< ::caffe::SolverParameter_SnapshotFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rms_decay = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {
          set_has_rms_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rms_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float momentum2 = 39 [default = 0.999];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {
          set_has_momentum2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 40 [default = "SGD"];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_datadiff = 42 [default = 0];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_print_datadiff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_datadiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_param = 43 [default = 0];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_print_param();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 save_blob = 44 [default = 0];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_save_blob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_blob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string save_blob_path = 45 [default = ""];
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_blob_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_blob_path().data(), static_cast<int>(this->save_blob_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverParameter.save_blob_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool save_test_blobs = 46 [default = false];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_save_test_blobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_test_blobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TestProtos test_protos = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_protos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverParameter)
  return false;
#undef DO_
}

void SolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), static_cast<int>(this->train_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->train_net(), output);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), static_cast<int>(this->test_net(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_net(i), output);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0, n = this->test_iter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->test_iter(i), output);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_interval(), output);
  }

  // optional float base_lr = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->base_lr(), output);
  }

  // optional int32 display = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display(), output);
  }

  // optional int32 max_iter = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_iter(), output);
  }

  // optional string lr_policy = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lr_policy(), output);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma(), output);
  }

  // optional float power = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->power(), output);
  }

  // optional float momentum = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->momentum(), output);
  }

  // optional float weight_decay = 12;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_decay(), output);
  }

  // optional int32 stepsize = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stepsize(), output);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->snapshot(), output);
  }

  // optional string snapshot_prefix = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->snapshot_prefix(), output);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->snapshot_diff(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->solver_mode(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 device_id = 18 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->device_id(), output);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->test_compute_loss(), output);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->random_seed(), output);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->train_net_param_, output);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_net_param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->test_net_param(static_cast<int>(i)), output);
  }

  // optional bool debug_info = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->debug_info(), output);
  }

  // optional string net = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->net(), output);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->net_param_, output);
  }

  // optional .caffe.NetState train_state = 26;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->train_state_, output);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->test_state(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool snapshot_after_train = 28 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->snapshot_after_train(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string regularization_type = 29 [default = "L2"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->regularization_type(), output);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->solver_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float delta = 31 [default = 1e-08];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->delta(), output);
  }

  // optional bool test_initialization = 32 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->test_initialization(), output);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->average_loss(), output);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0, n = this->stepvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->stepvalue(i), output);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->clip_gradients(), output);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->iter_size(), output);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->snapshot_format(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float rms_decay = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->rms_decay(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float momentum2 = 39 [default = 0.999];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->momentum2(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string type = 40 [default = "SGD"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->type(), output);
  }

  // optional int32 print_datadiff = 42 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->print_datadiff(), output);
  }

  // optional int32 print_param = 43 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->print_param(), output);
  }

  // optional int32 save_blob = 44 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->save_blob(), output);
  }

  // optional string save_blob_path = 45 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_blob_path().data(), static_cast<int>(this->save_blob_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.save_blob_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->save_blob_path(), output);
  }

  // optional bool save_test_blobs = 46 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->save_test_blobs(), output);
  }

  // optional .caffe.TestProtos test_protos = 47;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->test_protos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverParameter)
}

::google::protobuf::uint8* SolverParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_net().data(), static_cast<int>(this->train_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.train_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_net(i).data(), static_cast<int>(this->test_net(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.test_net");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_net(i), target);
  }

  // repeated int32 test_iter = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->test_iter_, target);

  // optional int32 test_interval = 4 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_interval(), target);
  }

  // optional float base_lr = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->base_lr(), target);
  }

  // optional int32 display = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display(), target);
  }

  // optional int32 max_iter = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lr_policy().data(), static_cast<int>(this->lr_policy().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.lr_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lr_policy(), target);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma(), target);
  }

  // optional float power = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->power(), target);
  }

  // optional float momentum = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->momentum(), target);
  }

  // optional float weight_decay = 12;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snapshot_prefix().data(), static_cast<int>(this->snapshot_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.snapshot_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->snapshot_diff(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->solver_mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 device_id = 18 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->random_seed(), target);
  }

  // optional .caffe.NetParameter train_net_param = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->train_net_param_, deterministic, target);
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_net_param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->test_net_param(static_cast<int>(i)), deterministic, target);
  }

  // optional bool debug_info = 23 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->debug_info(), target);
  }

  // optional string net = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net().data(), static_cast<int>(this->net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->net(), target);
  }

  // optional .caffe.NetParameter net_param = 25;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->net_param_, deterministic, target);
  }

  // optional .caffe.NetState train_state = 26;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->train_state_, deterministic, target);
  }

  // repeated .caffe.NetState test_state = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->test_state(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool snapshot_after_train = 28 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->snapshot_after_train(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string regularization_type = 29 [default = "L2"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regularization_type().data(), static_cast<int>(this->regularization_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.regularization_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->regularization_type(), target);
  }

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->solver_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float delta = 31 [default = 1e-08];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->delta(), target);
  }

  // optional bool test_initialization = 32 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->test_initialization(), target);
  }

  // optional int32 average_loss = 33 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(34, this->stepvalue_, target);

  // optional float clip_gradients = 35 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->iter_size(), target);
  }

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->snapshot_format(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float rms_decay = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->rms_decay(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float momentum2 = 39 [default = 0.999];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->momentum2(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string type = 40 [default = "SGD"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->type(), target);
  }

  // optional int32 print_datadiff = 42 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->print_datadiff(), target);
  }

  // optional int32 print_param = 43 [default = 0];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->print_param(), target);
  }

  // optional int32 save_blob = 44 [default = 0];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->save_blob(), target);
  }

  // optional string save_blob_path = 45 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_blob_path().data(), static_cast<int>(this->save_blob_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverParameter.save_blob_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->save_blob_path(), target);
  }

  // optional bool save_test_blobs = 46 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->save_test_blobs(), target);
  }

  // optional .caffe.TestProtos test_protos = 47;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *this->test_protos_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverParameter)
  return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string test_net = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_net_size());
  for (int i = 0, n = this->test_net_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_net(i));
  }

  // repeated int32 test_iter = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->test_iter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->test_iter_size());
    total_size += data_size;
  }

  // repeated .caffe.NetParameter test_net_param = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->test_net_param_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_net_param(static_cast<int>(i)));
    }
  }

  // repeated .caffe.NetState test_state = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->test_state_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_state(static_cast<int>(i)));
    }
  }

  // repeated int32 stepvalue = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stepvalue_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->stepvalue_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string train_net = 1;
    if (has_train_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_net());
    }

    // optional string lr_policy = 8;
    if (has_lr_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lr_policy());
    }

    // optional string snapshot_prefix = 15;
    if (has_snapshot_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot_prefix());
    }

    // optional string net = 24;
    if (has_net()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (has_regularization_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularization_type());
    }

    // optional string type = 40 [default = "SGD"];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string save_blob_path = 45 [default = ""];
    if (has_save_blob_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_blob_path());
    }

    // optional .caffe.NetParameter train_net_param = 21;
    if (has_train_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_net_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.NetParameter net_param = 25;
    if (has_net_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->net_param_);
    }

    // optional .caffe.NetState train_state = 26;
    if (has_train_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_state_);
    }

    // optional .caffe.TestProtos test_protos = 47;
    if (has_test_protos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->test_protos_);
    }

    // optional int32 test_interval = 4 [default = 0];
    if (has_test_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_interval());
    }

    // optional float base_lr = 5;
    if (has_base_lr()) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 max_iter = 7;
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float power = 10;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float momentum = 11;
    if (has_momentum()) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (has_weight_decay()) {
      total_size += 1 + 4;
    }

    // optional int32 stepsize = 13;
    if (has_stepsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stepsize());
    }

    // optional int32 snapshot = 14 [default = 0];
    if (has_snapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snapshot());
    }

    // optional int32 device_id = 18 [default = 0];
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (has_test_compute_loss()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_diff = 16 [default = false];
    if (has_snapshot_diff()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool debug_info = 23 [default = false];
    if (has_debug_info()) {
      total_size += 2 + 1;
    }

    // optional bool save_test_blobs = 46 [default = false];
    if (has_save_test_blobs()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (has_solver_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_type());
    }

    // optional float rms_decay = 38;
    if (has_rms_decay()) {
      total_size += 2 + 4;
    }

    // optional int32 print_datadiff = 42 [default = 0];
    if (has_print_datadiff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_datadiff());
    }

    // optional int32 print_param = 43 [default = 0];
    if (has_print_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_param());
    }

    // optional int32 save_blob = 44 [default = 0];
    if (has_save_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_blob());
    }

    // optional int64 random_seed = 20 [default = -1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->random_seed());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (has_solver_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solver_mode());
    }

    // optional bool test_initialization = 32 [default = true];
    if (has_test_initialization()) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (has_snapshot_after_train()) {
      total_size += 2 + 1;
    }

    // optional float delta = 31 [default = 1e-08];
    if (has_delta()) {
      total_size += 2 + 4;
    }

    // optional int32 average_loss = 33 [default = 1];
    if (has_average_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_loss());
    }

    // optional float clip_gradients = 35 [default = -1];
    if (has_clip_gradients()) {
      total_size += 2 + 4;
    }

    // optional int32 iter_size = 36 [default = 1];
    if (has_iter_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter_size());
    }

    // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (has_snapshot_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->snapshot_format());
    }

  }
  // optional float momentum2 = 39 [default = 0.999];
  if (has_momentum2()) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_net_.MergeFrom(from.test_net_);
  test_iter_.MergeFrom(from.test_iter_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  stepvalue_.MergeFrom(from.stepvalue_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_train_net();
      train_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_lr_policy();
      lr_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_snapshot_prefix();
      snapshot_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_net();
      net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_regularization_type();
      regularization_type_.AssignWithDefault(&SolverParameter::_default_regularization_type_.get(), from.regularization_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_type();
      type_.AssignWithDefault(&SolverParameter::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_save_blob_path();
      save_blob_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_blob_path_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_train_net_param()->::caffe::NetParameter::MergeFrom(from.train_net_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_net_param()->::caffe::NetParameter::MergeFrom(from.net_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_train_state()->::caffe::NetState::MergeFrom(from.train_state());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_test_protos()->::caffe::TestProtos::MergeFrom(from.test_protos());
    }
    if (cached_has_bits & 0x00000800u) {
      test_interval_ = from.test_interval_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_lr_ = from.base_lr_;
    }
    if (cached_has_bits & 0x00002000u) {
      display_ = from.display_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00008000u) {
      gamma_ = from.gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00020000u) {
      momentum_ = from.momentum_;
    }
    if (cached_has_bits & 0x00040000u) {
      weight_decay_ = from.weight_decay_;
    }
    if (cached_has_bits & 0x00080000u) {
      stepsize_ = from.stepsize_;
    }
    if (cached_has_bits & 0x00100000u) {
      snapshot_ = from.snapshot_;
    }
    if (cached_has_bits & 0x00200000u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      test_compute_loss_ = from.test_compute_loss_;
    }
    if (cached_has_bits & 0x00800000u) {
      snapshot_diff_ = from.snapshot_diff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      debug_info_ = from.debug_info_;
    }
    if (cached_has_bits & 0x02000000u) {
      save_test_blobs_ = from.save_test_blobs_;
    }
    if (cached_has_bits & 0x04000000u) {
      solver_type_ = from.solver_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      rms_decay_ = from.rms_decay_;
    }
    if (cached_has_bits & 0x10000000u) {
      print_datadiff_ = from.print_datadiff_;
    }
    if (cached_has_bits & 0x20000000u) {
      print_param_ = from.print_param_;
    }
    if (cached_has_bits & 0x40000000u) {
      save_blob_ = from.save_blob_;
    }
    if (cached_has_bits & 0x80000000u) {
      random_seed_ = from.random_seed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      solver_mode_ = from.solver_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      test_initialization_ = from.test_initialization_;
    }
    if (cached_has_bits & 0x00000004u) {
      snapshot_after_train_ = from.snapshot_after_train_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_loss_ = from.average_loss_;
    }
    if (cached_has_bits & 0x00000020u) {
      clip_gradients_ = from.clip_gradients_;
    }
    if (cached_has_bits & 0x00000040u) {
      iter_size_ = from.iter_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      snapshot_format_ = from.snapshot_format_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_momentum2(from.momentum2());
  }
}

void SolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  return true;
}

void SolverParameter::Swap(SolverParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverParameter::InternalSwap(SolverParameter* other) {
  using std::swap;
  test_net_.InternalSwap(&other->test_net_);
  test_iter_.InternalSwap(&other->test_iter_);
  test_net_param_.InternalSwap(&other->test_net_param_);
  test_state_.InternalSwap(&other->test_state_);
  stepvalue_.InternalSwap(&other->stepvalue_);
  train_net_.Swap(&other->train_net_);
  lr_policy_.Swap(&other->lr_policy_);
  snapshot_prefix_.Swap(&other->snapshot_prefix_);
  net_.Swap(&other->net_);
  regularization_type_.Swap(&other->regularization_type_);
  type_.Swap(&other->type_);
  save_blob_path_.Swap(&other->save_blob_path_);
  swap(train_net_param_, other->train_net_param_);
  swap(net_param_, other->net_param_);
  swap(train_state_, other->train_state_);
  swap(test_protos_, other->test_protos_);
  swap(test_interval_, other->test_interval_);
  swap(base_lr_, other->base_lr_);
  swap(display_, other->display_);
  swap(max_iter_, other->max_iter_);
  swap(gamma_, other->gamma_);
  swap(power_, other->power_);
  swap(momentum_, other->momentum_);
  swap(weight_decay_, other->weight_decay_);
  swap(stepsize_, other->stepsize_);
  swap(snapshot_, other->snapshot_);
  swap(device_id_, other->device_id_);
  swap(test_compute_loss_, other->test_compute_loss_);
  swap(snapshot_diff_, other->snapshot_diff_);
  swap(debug_info_, other->debug_info_);
  swap(save_test_blobs_, other->save_test_blobs_);
  swap(solver_type_, other->solver_type_);
  swap(rms_decay_, other->rms_decay_);
  swap(print_datadiff_, other->print_datadiff_);
  swap(print_param_, other->print_param_);
  swap(save_blob_, other->save_blob_);
  swap(random_seed_, other->random_seed_);
  swap(solver_mode_, other->solver_mode_);
  swap(test_initialization_, other->test_initialization_);
  swap(snapshot_after_train_, other->snapshot_after_train_);
  swap(delta_, other->delta_);
  swap(average_loss_, other->average_loss_);
  swap(clip_gradients_, other->clip_gradients_);
  swap(iter_size_, other->iter_size_);
  swap(snapshot_format_, other->snapshot_format_);
  swap(momentum2_, other->momentum2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverParameter

// optional string net = 24;
bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000100u;
}
void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
const ::caffe::NetParameter& SolverParameter::net_param() const {
  const ::caffe::NetParameter* p = net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena();
}
void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
#if LANG_CXX11
void SolverParameter::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
#endif
void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
int SolverParameter::test_net_size() const {
  return test_net_.size();
}
void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SolverParameter::set_test_net(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
#endif
void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
void SolverParameter::add_test_net(::std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#endif
void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000080u;
}
void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  const ::caffe::NetParameter* p = train_net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000200u;
}
void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000200u;
}
void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
const ::caffe::NetState& SolverParameter::train_state() const {
  const ::caffe::NetState* p = train_state_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
int SolverParameter::test_state_size() const {
  return test_state_.size();
}
void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000800u;
}
void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000800u;
}
void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00400000u;
}
void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00400000u;
}
void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void SolverParameter::set_has_test_initialization() {
  _has_bits_[1] |= 0x00000002u;
}
void SolverParameter::clear_has_test_initialization() {
  _has_bits_[1] &= ~0x00000002u;
}
void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00001000u;
}
void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00001000u;
}
void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00002000u;
}
void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00002000u;
}
void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
bool SolverParameter::has_average_loss() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void SolverParameter::set_has_average_loss() {
  _has_bits_[1] |= 0x00000010u;
}
void SolverParameter::clear_has_average_loss() {
  _has_bits_[1] &= ~0x00000010u;
}
void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00004000u;
}
void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00004000u;
}
void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
bool SolverParameter::has_iter_size() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void SolverParameter::set_has_iter_size() {
  _has_bits_[1] |= 0x00000040u;
}
void SolverParameter::clear_has_iter_size() {
  _has_bits_[1] &= ~0x00000040u;
}
void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena();
}
void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
#if LANG_CXX11
void SolverParameter::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
#endif
void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00008000u;
}
void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00008000u;
}
void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00010000u;
}
void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00010000u;
}
void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00020000u;
}
void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00020000u;
}
void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00040000u;
}
void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00040000u;
}
void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&SolverParameter::_default_regularization_type_.get());
  clear_has_regularization_type();
}
const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena();
}
void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
#if LANG_CXX11
void SolverParameter::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &SolverParameter::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.regularization_type)
}
#endif
void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&SolverParameter::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&SolverParameter::_default_regularization_type_.get());
}
::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&SolverParameter::_default_regularization_type_.get());
}
void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&SolverParameter::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00080000u;
}
void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00080000u;
}
void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void SolverParameter::set_has_clip_gradients() {
  _has_bits_[1] |= 0x00000020u;
}
void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[1] &= ~0x00000020u;
}
void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x00100000u;
}
void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00100000u;
}
void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00800000u;
}
void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00800000u;
}
void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000080u;
}
void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000080u;
}
void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void SolverParameter::set_has_solver_mode() {
  _has_bits_[1] |= 0x00000001u;
}
void SolverParameter::clear_has_solver_mode() {
  _has_bits_[1] &= ~0x00000001u;
}
void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00200000u;
}
void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
bool SolverParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SolverParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x80000000u;
}
void SolverParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x80000000u;
}
void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
bool SolverParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SolverParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SolverParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(&SolverParameter::_default_type_.get());
  clear_has_type();
}
const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena();
}
void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
#if LANG_CXX11
void SolverParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &SolverParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.type)
}
#endif
void SolverParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&SolverParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(&SolverParameter::_default_type_.get());
}
::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&SolverParameter::_default_type_.get());
}
void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&SolverParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000008u;
}
void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000008u;
}
void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000100u;
}
void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000100u;
}
void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38;
bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SolverParameter::set_has_rms_decay() {
  _has_bits_[0] |= 0x08000000u;
}
void SolverParameter::clear_has_rms_decay() {
  _has_bits_[0] &= ~0x08000000u;
}
void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
bool SolverParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SolverParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x01000000u;
}
void SolverParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x01000000u;
}
void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00000004u;
}
void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00000004u;
}
void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x04000000u;
}
void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x04000000u;
}
void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional int32 print_datadiff = 42 [default = 0];
bool SolverParameter::has_print_datadiff() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SolverParameter::set_has_print_datadiff() {
  _has_bits_[0] |= 0x10000000u;
}
void SolverParameter::clear_has_print_datadiff() {
  _has_bits_[0] &= ~0x10000000u;
}
void SolverParameter::clear_print_datadiff() {
  print_datadiff_ = 0;
  clear_has_print_datadiff();
}
::google::protobuf::int32 SolverParameter::print_datadiff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.print_datadiff)
  return print_datadiff_;
}
void SolverParameter::set_print_datadiff(::google::protobuf::int32 value) {
  set_has_print_datadiff();
  print_datadiff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.print_datadiff)
}

// optional int32 print_param = 43 [default = 0];
bool SolverParameter::has_print_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SolverParameter::set_has_print_param() {
  _has_bits_[0] |= 0x20000000u;
}
void SolverParameter::clear_has_print_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void SolverParameter::clear_print_param() {
  print_param_ = 0;
  clear_has_print_param();
}
::google::protobuf::int32 SolverParameter::print_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.print_param)
  return print_param_;
}
void SolverParameter::set_print_param(::google::protobuf::int32 value) {
  set_has_print_param();
  print_param_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.print_param)
}

// optional int32 save_blob = 44 [default = 0];
bool SolverParameter::has_save_blob() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SolverParameter::set_has_save_blob() {
  _has_bits_[0] |= 0x40000000u;
}
void SolverParameter::clear_has_save_blob() {
  _has_bits_[0] &= ~0x40000000u;
}
void SolverParameter::clear_save_blob() {
  save_blob_ = 0;
  clear_has_save_blob();
}
::google::protobuf::int32 SolverParameter::save_blob() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.save_blob)
  return save_blob_;
}
void SolverParameter::set_save_blob(::google::protobuf::int32 value) {
  set_has_save_blob();
  save_blob_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.save_blob)
}

// optional string save_blob_path = 45 [default = ""];
bool SolverParameter::has_save_blob_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SolverParameter::set_has_save_blob_path() {
  _has_bits_[0] |= 0x00000040u;
}
void SolverParameter::clear_has_save_blob_path() {
  _has_bits_[0] &= ~0x00000040u;
}
void SolverParameter::clear_save_blob_path() {
  save_blob_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_blob_path();
}
const ::std::string& SolverParameter::save_blob_path() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.save_blob_path)
  return save_blob_path_.GetNoArena();
}
void SolverParameter::set_save_blob_path(const ::std::string& value) {
  set_has_save_blob_path();
  save_blob_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.save_blob_path)
}
#if LANG_CXX11
void SolverParameter::set_save_blob_path(::std::string&& value) {
  set_has_save_blob_path();
  save_blob_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.save_blob_path)
}
#endif
void SolverParameter::set_save_blob_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_save_blob_path();
  save_blob_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.save_blob_path)
}
void SolverParameter::set_save_blob_path(const char* value, size_t size) {
  set_has_save_blob_path();
  save_blob_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.save_blob_path)
}
::std::string* SolverParameter::mutable_save_blob_path() {
  set_has_save_blob_path();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.save_blob_path)
  return save_blob_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverParameter::release_save_blob_path() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.save_blob_path)
  clear_has_save_blob_path();
  return save_blob_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverParameter::set_allocated_save_blob_path(::std::string* save_blob_path) {
  if (save_blob_path != NULL) {
    set_has_save_blob_path();
  } else {
    clear_has_save_blob_path();
  }
  save_blob_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_blob_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.save_blob_path)
}

// optional bool save_test_blobs = 46 [default = false];
bool SolverParameter::has_save_test_blobs() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SolverParameter::set_has_save_test_blobs() {
  _has_bits_[0] |= 0x02000000u;
}
void SolverParameter::clear_has_save_test_blobs() {
  _has_bits_[0] &= ~0x02000000u;
}
void SolverParameter::clear_save_test_blobs() {
  save_test_blobs_ = false;
  clear_has_save_test_blobs();
}
bool SolverParameter::save_test_blobs() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.save_test_blobs)
  return save_test_blobs_;
}
void SolverParameter::set_save_test_blobs(bool value) {
  set_has_save_test_blobs();
  save_test_blobs_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.save_test_blobs)
}

// optional .caffe.TestProtos test_protos = 47;
bool SolverParameter::has_test_protos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SolverParameter::set_has_test_protos() {
  _has_bits_[0] |= 0x00000400u;
}
void SolverParameter::clear_has_test_protos() {
  _has_bits_[0] &= ~0x00000400u;
}
void SolverParameter::clear_test_protos() {
  if (test_protos_ != NULL) test_protos_->::caffe::TestProtos::Clear();
  clear_has_test_protos();
}
const ::caffe::TestProtos& SolverParameter::test_protos() const {
  const ::caffe::TestProtos* p = test_protos_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_protos)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TestProtos*>(
      &::caffe::_TestProtos_default_instance_);
}
::caffe::TestProtos* SolverParameter::mutable_test_protos() {
  set_has_test_protos();
  if (test_protos_ == NULL) {
    test_protos_ = new ::caffe::TestProtos;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_protos)
  return test_protos_;
}
::caffe::TestProtos* SolverParameter::release_test_protos() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.test_protos)
  clear_has_test_protos();
  ::caffe::TestProtos* temp = test_protos_;
  test_protos_ = NULL;
  return temp;
}
void SolverParameter::set_allocated_test_protos(::caffe::TestProtos* test_protos) {
  delete test_protos_;
  test_protos_ = test_protos;
  if (test_protos) {
    set_has_test_protos();
  } else {
    clear_has_test_protos();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.test_protos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SolverState::kIterFieldNumber;
const int SolverState::kLearnedNetFieldNumber;
const int SolverState::kHistoryFieldNumber;
const int SolverState::kCurrentStepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SolverState::SolverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_learned_net()) {
    learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
  }
  ::memcpy(&iter_, &from.iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_step_) -
    reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
  // @@protoc_insertion_point(copy_constructor:caffe.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  learned_net_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_step_) -
      reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:caffe.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SolverState& SolverState::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SolverState* SolverState::New(::google::protobuf::Arena* arena) const {
  SolverState* n = new SolverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SolverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  if (has_learned_net()) {
    GOOGLE_DCHECK(!learned_net_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*learned_net_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&iter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_step_) -
        reinterpret_cast<char*>(&iter_)) + sizeof(current_step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string learned_net = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_learned_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->learned_net().data(), static_cast<int>(this->learned_net().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SolverState.learned_net");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto history = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_step = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_current_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SolverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), static_cast<int>(this->learned_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->learned_net(), output);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(static_cast<int>(i)), output);
  }

  // optional int32 current_step = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_step(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SolverState)
}

::google::protobuf::uint8* SolverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SolverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->learned_net().data(), static_cast<int>(this->learned_net().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SolverState.learned_net");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->learned_net(), target);
  }

  // repeated .caffe.BlobProto history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->history(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 current_step = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_step(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SolverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.BlobProto history = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string learned_net = 2;
    if (has_learned_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->learned_net());
    }

    // optional int32 iter = 1;
    if (has_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iter());
    }

    // optional int32 current_step = 4 [default = 0];
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SolverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SolverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_learned_net();
      learned_net_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      iter_ = from.iter_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_step_ = from.current_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SolverState::InternalSwap(SolverState* other) {
  using std::swap;
  history_.InternalSwap(&other->history_);
  learned_net_.Swap(&other->learned_net_);
  swap(iter_, other->iter_);
  swap(current_step_, other->current_step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SolverState

// optional int32 iter = 1;
bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
int SolverState::history_size() const {
  return history_.size();
}
void SolverState::clear_history() {
  history_.Clear();
}
const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetState::kPhaseFieldNumber;
const int NetState::kLevelFieldNumber;
const int NetState::kStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetState::NetState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetState)
}
NetState::NetState(const NetState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stage_(from.stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&level_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetState)
}

void NetState::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  phase_ = 1;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:caffe.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetState::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetState& NetState::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetState* NetState::New(::google::protobuf::Arena* arena) const {
  NetState* n = new NetState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    level_ = 0;
    phase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1 [default = TEST];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            static_cast<int>(this->stage(this->stage_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetState.stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetState)
  return false;
#undef DO_
}

void NetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), static_cast<int>(this->stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetState)
}

::google::protobuf::uint8* NetState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), static_cast<int>(this->stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetState.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string stage = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .caffe.Phase phase = 1 [default = TEST];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  const NetState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::Swap(NetState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetState::InternalSwap(NetState* other) {
  using std::swap;
  stage_.InternalSwap(&other->stage_);
  swap(level_, other->level_);
  swap(phase_, other->phase_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetState::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
int NetState::stage_size() const {
  return stage_.size();
}
void NetState::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetState::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#if LANG_CXX11
void NetState::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#endif
void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetStateRule::kPhaseFieldNumber;
const int NetStateRule::kMinLevelFieldNumber;
const int NetStateRule::kMaxLevelFieldNumber;
const int NetStateRule::kStageFieldNumber;
const int NetStateRule::kNotStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetStateRule::NetStateRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.NetStateRule)
}
NetStateRule::NetStateRule(const NetStateRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stage_(from.stage_),
      not_stage_(from.not_stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:caffe.NetStateRule)
}

void NetStateRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_level_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:caffe.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
}

void NetStateRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStateRule::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetStateRule& NetStateRule::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetStateRule* NetStateRule::New(::google::protobuf::Arena* arena) const {
  NetStateRule* n = new NetStateRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.NetStateRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  not_stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_level_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetStateRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.NetStateRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.Phase phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage(this->stage_size() - 1).data(),
            static_cast<int>(this->stage(this->stage_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string not_stage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_not_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->not_stage(this->not_stage_size() - 1).data(),
            static_cast<int>(this->not_stage(this->not_stage_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.NetStateRule.not_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.NetStateRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.NetStateRule)
  return false;
#undef DO_
}

void NetStateRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.NetStateRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), static_cast<int>(this->stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stage(i), output);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), static_cast<int>(this->not_stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->not_stage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.NetStateRule)
}

::google::protobuf::uint8* NetStateRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.NetStateRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage(i).data(), static_cast<int>(this->stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->stage(i), target);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->not_stage(i).data(), static_cast<int>(this->not_stage(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.NetStateRule.not_stage");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->not_stage(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.NetStateRule)
  return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.NetStateRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string stage = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stage_size());
  for (int i = 0, n = this->stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stage(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->not_stage_size());
  for (int i = 0, n = this->not_stage_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->not_stage(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.Phase phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStateRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  const NetStateRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetStateRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.NetStateRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.NetStateRule)
    MergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetStateRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {
  return true;
}

void NetStateRule::Swap(NetStateRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetStateRule::InternalSwap(NetStateRule* other) {
  using std::swap;
  stage_.InternalSwap(&other->stage_);
  not_stage_.InternalSwap(&other->not_stage_);
  swap(phase_, other->phase_);
  swap(min_level_, other->min_level_);
  swap(max_level_, other->max_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetStateRule::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetStateRule

// optional .caffe.Phase phase = 1;
bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
int NetStateRule::stage_size() const {
  return stage_.size();
}
void NetStateRule::clear_stage() {
  stage_.Clear();
}
const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetStateRule::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#if LANG_CXX11
void NetStateRule::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#endif
void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetStateRule::set_not_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
#endif
void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#if LANG_CXX11
void NetStateRule::add_not_stage(::std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#endif
void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamSpec::kNameFieldNumber;
const int ParamSpec::kShareModeFieldNumber;
const int ParamSpec::kLrMultFieldNumber;
const int ParamSpec::kDecayMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamSpec::ParamSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&share_mode_, &from.share_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&decay_mult_) -
    reinterpret_cast<char*>(&share_mode_)) + sizeof(decay_mult_));
  // @@protoc_insertion_point(copy_constructor:caffe.ParamSpec)
}

void ParamSpec::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:caffe.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamSpec::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamSpec& ParamSpec::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParamSpec* ParamSpec::New(::google::protobuf::Arena* arena) const {
  ParamSpec* n = new ParamSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ParamSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParamSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ParamSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ParamSpec.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ParamSpec_DimCheckMode_IsValid(value)) {
            set_share_mode(static_cast< ::caffe::ParamSpec_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lr_mult = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_lr_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decay_mult = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_decay_mult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decay_mult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ParamSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ParamSpec)
  return false;
#undef DO_
}

void ParamSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ParamSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->share_mode(), output);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lr_mult(), output);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->decay_mult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ParamSpec)
}

::google::protobuf::uint8* ParamSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ParamSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ParamSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->decay_mult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ParamSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
    if (has_share_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (has_lr_mult()) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (has_decay_mult()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ParamSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      share_mode_ = from.share_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lr_mult_ = from.lr_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      decay_mult_ = from.decay_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParamSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::Swap(ParamSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamSpec::InternalSwap(ParamSpec* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(share_mode_, other->share_mode_);
  swap(lr_mult_, other->lr_mult_);
  swap(decay_mult_, other->decay_mult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamSpec::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamSpec

// optional string name = 1;
bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
void ParamSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kPhaseFieldNumber;
const int LayerParameter::kLossWeightFieldNumber;
const int LayerParameter::kParamFieldNumber;
const int LayerParameter::kBlobsFieldNumber;
const int LayerParameter::kPropagateDownFieldNumber;
const int LayerParameter::kIncludeFieldNumber;
const int LayerParameter::kExcludeFieldNumber;
const int LayerParameter::kTransformParamFieldNumber;
const int LayerParameter::kLossParamFieldNumber;
const int LayerParameter::kAccuracyParamFieldNumber;
const int LayerParameter::kArgmaxParamFieldNumber;
const int LayerParameter::kBatchNormParamFieldNumber;
const int LayerParameter::kBiasParamFieldNumber;
const int LayerParameter::kConcatParamFieldNumber;
const int LayerParameter::kContrastiveLossParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kDropoutParamFieldNumber;
const int LayerParameter::kDummyDataParamFieldNumber;
const int LayerParameter::kEltwiseParamFieldNumber;
const int LayerParameter::kEluParamFieldNumber;
const int LayerParameter::kEmbedParamFieldNumber;
const int LayerParameter::kExpParamFieldNumber;
const int LayerParameter::kFlattenParamFieldNumber;
const int LayerParameter::kHdf5DataParamFieldNumber;
const int LayerParameter::kHdf5OutputParamFieldNumber;
const int LayerParameter::kHingeLossParamFieldNumber;
const int LayerParameter::kImageDataParamFieldNumber;
const int LayerParameter::kInfogainLossParamFieldNumber;
const int LayerParameter::kInnerProductParamFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kLogParamFieldNumber;
const int LayerParameter::kLrnParamFieldNumber;
const int LayerParameter::kMemoryDataParamFieldNumber;
const int LayerParameter::kMvnParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kPowerParamFieldNumber;
const int LayerParameter::kPreluParamFieldNumber;
const int LayerParameter::kPythonParamFieldNumber;
const int LayerParameter::kReductionParamFieldNumber;
const int LayerParameter::kReluParamFieldNumber;
const int LayerParameter::kReshapeParamFieldNumber;
const int LayerParameter::kScaleParamFieldNumber;
const int LayerParameter::kSigmoidParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kSppParamFieldNumber;
const int LayerParameter::kSliceParamFieldNumber;
const int LayerParameter::kTanhParamFieldNumber;
const int LayerParameter::kThresholdParamFieldNumber;
const int LayerParameter::kTileParamFieldNumber;
const int LayerParameter::kWindowDataParamFieldNumber;
const int LayerParameter::kUpsampleParamFieldNumber;
const int LayerParameter::kTriplet01LossParamFieldNumber;
const int LayerParameter::kGaterecurrent2DmaskParamFieldNumber;
const int LayerParameter::kGaterecurrent2DnoindParamFieldNumber;
const int LayerParameter::kDivideParamFieldNumber;
const int LayerParameter::kGaterecurrent2DmaxParamFieldNumber;
const int LayerParameter::kHuberLossParamFieldNumber;
const int LayerParameter::kImageDataArbitraryParamFieldNumber;
const int LayerParameter::kManipulateLabelParamFieldNumber;
const int LayerParameter::kSpatialrecurrentParamFieldNumber;
const int LayerParameter::kSpatiallstmParamFieldNumber;
const int LayerParameter::kWeakgatelstmParamFieldNumber;
const int LayerParameter::kTemporallstmParamFieldNumber;
const int LayerParameter::kResizeParamFieldNumber;
const int LayerParameter::kManipulateLossParamFieldNumber;
const int LayerParameter::kElementHingeLossParamFieldNumber;
const int LayerParameter::kBnParamFieldNumber;
const int LayerParameter::kRegionconvolutionParamFieldNumber;
const int LayerParameter::kMapmetricLossParamFieldNumber;
const int LayerParameter::kImageDataTextLabelParamFieldNumber;
const int LayerParameter::kSuperCropParamFieldNumber;
const int LayerParameter::kHardsampleParamFieldNumber;
const int LayerParameter::kGatelstmParamFieldNumber;
const int LayerParameter::kGaterecurrentParamFieldNumber;
const int LayerParameter::kDenseCrfParamFieldNumber;
const int LayerParameter::kPairImageDataParamFieldNumber;
const int LayerParameter::kTripletLossParamFieldNumber;
const int LayerParameter::kL2NormParamFieldNumber;
const int LayerParameter::kPadParamFieldNumber;
const int LayerParameter::kFacerecImageDataParamFieldNumber;
const int LayerParameter::kTripletDataParamFieldNumber;
const int LayerParameter::kSegmentDataParamFieldNumber;
const int LayerParameter::kLearnCrfParamFieldNumber;
const int LayerParameter::kGaterecurrent2DParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bottom_(from.bottom_),
      top_(from.top_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blobs_(from.blobs_),
      include_(from.include_),
      exclude_(from.exclude_),
      propagate_down_(from.propagate_down_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_transform_param()) {
    transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  if (from.has_accuracy_param()) {
    accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = NULL;
  }
  if (from.has_argmax_param()) {
    argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = NULL;
  }
  if (from.has_concat_param()) {
    concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = NULL;
  }
  if (from.has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = NULL;
  }
  if (from.has_convolution_param()) {
    convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = NULL;
  }
  if (from.has_data_param()) {
    data_param_ = new ::caffe::DataParameter(*from.data_param_);
  } else {
    data_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_dummy_data_param()) {
    dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = NULL;
  }
  if (from.has_eltwise_param()) {
    eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = NULL;
  }
  if (from.has_exp_param()) {
    exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = NULL;
  }
  if (from.has_hdf5_data_param()) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  if (from.has_hinge_loss_param()) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = NULL;
  }
  if (from.has_image_data_param()) {
    image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = NULL;
  }
  if (from.has_infogain_loss_param()) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = NULL;
  }
  if (from.has_inner_product_param()) {
    inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = NULL;
  }
  if (from.has_lrn_param()) {
    lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = NULL;
  }
  if (from.has_memory_data_param()) {
    memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = NULL;
  }
  if (from.has_mvn_param()) {
    mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_power_param()) {
    power_param_ = new ::caffe::PowerParameter(*from.power_param_);
  } else {
    power_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_sigmoid_param()) {
    sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_slice_param()) {
    slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = NULL;
  }
  if (from.has_tanh_param()) {
    tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = NULL;
  }
  if (from.has_threshold_param()) {
    threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = NULL;
  }
  if (from.has_window_data_param()) {
    window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = NULL;
  }
  if (from.has_python_param()) {
    python_param_ = new ::caffe::PythonParameter(*from.python_param_);
  } else {
    python_param_ = NULL;
  }
  if (from.has_prelu_param()) {
    prelu_param_ = new ::caffe::PReLUParameter(*from.prelu_param_);
  } else {
    prelu_param_ = NULL;
  }
  if (from.has_spp_param()) {
    spp_param_ = new ::caffe::SPPParameter(*from.spp_param_);
  } else {
    spp_param_ = NULL;
  }
  if (from.has_reshape_param()) {
    reshape_param_ = new ::caffe::ReshapeParameter(*from.reshape_param_);
  } else {
    reshape_param_ = NULL;
  }
  if (from.has_log_param()) {
    log_param_ = new ::caffe::LogParameter(*from.log_param_);
  } else {
    log_param_ = NULL;
  }
  if (from.has_flatten_param()) {
    flatten_param_ = new ::caffe::FlattenParameter(*from.flatten_param_);
  } else {
    flatten_param_ = NULL;
  }
  if (from.has_reduction_param()) {
    reduction_param_ = new ::caffe::ReductionParameter(*from.reduction_param_);
  } else {
    reduction_param_ = NULL;
  }
  if (from.has_embed_param()) {
    embed_param_ = new ::caffe::EmbedParameter(*from.embed_param_);
  } else {
    embed_param_ = NULL;
  }
  if (from.has_tile_param()) {
    tile_param_ = new ::caffe::TileParameter(*from.tile_param_);
  } else {
    tile_param_ = NULL;
  }
  if (from.has_batch_norm_param()) {
    batch_norm_param_ = new ::caffe::BatchNormParameter(*from.batch_norm_param_);
  } else {
    batch_norm_param_ = NULL;
  }
  if (from.has_elu_param()) {
    elu_param_ = new ::caffe::ELUParameter(*from.elu_param_);
  } else {
    elu_param_ = NULL;
  }
  if (from.has_bias_param()) {
    bias_param_ = new ::caffe::BiasParameter(*from.bias_param_);
  } else {
    bias_param_ = NULL;
  }
  if (from.has_scale_param()) {
    scale_param_ = new ::caffe::ScaleParameter(*from.scale_param_);
  } else {
    scale_param_ = NULL;
  }
  if (from.has_input_param()) {
    input_param_ = new ::caffe::InputParameter(*from.input_param_);
  } else {
    input_param_ = NULL;
  }
  if (from.has_crop_param()) {
    crop_param_ = new ::caffe::CropParameter(*from.crop_param_);
  } else {
    crop_param_ = NULL;
  }
  if (from.has_upsample_param()) {
    upsample_param_ = new ::caffe::UpsampleParameter(*from.upsample_param_);
  } else {
    upsample_param_ = NULL;
  }
  if (from.has_triplet01_loss_param()) {
    triplet01_loss_param_ = new ::caffe::Triplet01LossParameter(*from.triplet01_loss_param_);
  } else {
    triplet01_loss_param_ = NULL;
  }
  if (from.has_gaterecurrent2dmask_param()) {
    gaterecurrent2dmask_param_ = new ::caffe::GateRecurrent2dmaskParameter(*from.gaterecurrent2dmask_param_);
  } else {
    gaterecurrent2dmask_param_ = NULL;
  }
  if (from.has_gaterecurrent2dnoind_param()) {
    gaterecurrent2dnoind_param_ = new ::caffe::GateRecurrent2dnoindParameter(*from.gaterecurrent2dnoind_param_);
  } else {
    gaterecurrent2dnoind_param_ = NULL;
  }
  if (from.has_divide_param()) {
    divide_param_ = new ::caffe::DivideParameter(*from.divide_param_);
  } else {
    divide_param_ = NULL;
  }
  if (from.has_gaterecurrent2dmax_param()) {
    gaterecurrent2dmax_param_ = new ::caffe::GateRecurrent2dmaxParameter(*from.gaterecurrent2dmax_param_);
  } else {
    gaterecurrent2dmax_param_ = NULL;
  }
  if (from.has_huber_loss_param()) {
    huber_loss_param_ = new ::caffe::HuberLossParameter(*from.huber_loss_param_);
  } else {
    huber_loss_param_ = NULL;
  }
  if (from.has_image_data_arbitrary_param()) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter(*from.image_data_arbitrary_param_);
  } else {
    image_data_arbitrary_param_ = NULL;
  }
  if (from.has_manipulate_label_param()) {
    manipulate_label_param_ = new ::caffe::ManipulatelabelParameter(*from.manipulate_label_param_);
  } else {
    manipulate_label_param_ = NULL;
  }
  if (from.has_spatialrecurrent_param()) {
    spatialrecurrent_param_ = new ::caffe::SpatialRecurrentParameter(*from.spatialrecurrent_param_);
  } else {
    spatialrecurrent_param_ = NULL;
  }
  if (from.has_spatiallstm_param()) {
    spatiallstm_param_ = new ::caffe::SpatialLstmParameter(*from.spatiallstm_param_);
  } else {
    spatiallstm_param_ = NULL;
  }
  if (from.has_weakgatelstm_param()) {
    weakgatelstm_param_ = new ::caffe::WeakGateLstmParameter(*from.weakgatelstm_param_);
  } else {
    weakgatelstm_param_ = NULL;
  }
  if (from.has_temporallstm_param()) {
    temporallstm_param_ = new ::caffe::TemporalLstmParameter(*from.temporallstm_param_);
  } else {
    temporallstm_param_ = NULL;
  }
  if (from.has_resize_param()) {
    resize_param_ = new ::caffe::ResizeParameter(*from.resize_param_);
  } else {
    resize_param_ = NULL;
  }
  if (from.has_manipulate_loss_param()) {
    manipulate_loss_param_ = new ::caffe::ManipulateLossParameter(*from.manipulate_loss_param_);
  } else {
    manipulate_loss_param_ = NULL;
  }
  if (from.has_element_hinge_loss_param()) {
    element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter(*from.element_hinge_loss_param_);
  } else {
    element_hinge_loss_param_ = NULL;
  }
  if (from.has_bn_param()) {
    bn_param_ = new ::caffe::BNParameter(*from.bn_param_);
  } else {
    bn_param_ = NULL;
  }
  if (from.has_regionconvolution_param()) {
    regionconvolution_param_ = new ::caffe::RegionconvolutionParameter(*from.regionconvolution_param_);
  } else {
    regionconvolution_param_ = NULL;
  }
  if (from.has_mapmetric_loss_param()) {
    mapmetric_loss_param_ = new ::caffe::MapMetricLossParameter(*from.mapmetric_loss_param_);
  } else {
    mapmetric_loss_param_ = NULL;
  }
  if (from.has_image_data_text_label_param()) {
    image_data_text_label_param_ = new ::caffe::ImageDataTextLabelParameter(*from.image_data_text_label_param_);
  } else {
    image_data_text_label_param_ = NULL;
  }
  if (from.has_super_crop_param()) {
    super_crop_param_ = new ::caffe::SuperCropParameter(*from.super_crop_param_);
  } else {
    super_crop_param_ = NULL;
  }
  if (from.has_hardsample_param()) {
    hardsample_param_ = new ::caffe::HardSampleParameter(*from.hardsample_param_);
  } else {
    hardsample_param_ = NULL;
  }
  if (from.has_gatelstm_param()) {
    gatelstm_param_ = new ::caffe::GateLstmParameter(*from.gatelstm_param_);
  } else {
    gatelstm_param_ = NULL;
  }
  if (from.has_gaterecurrent_param()) {
    gaterecurrent_param_ = new ::caffe::GateRecurrentParameter(*from.gaterecurrent_param_);
  } else {
    gaterecurrent_param_ = NULL;
  }
  if (from.has_dense_crf_param()) {
    dense_crf_param_ = new ::caffe::DenseCRFParameter(*from.dense_crf_param_);
  } else {
    dense_crf_param_ = NULL;
  }
  if (from.has_pair_image_data_param()) {
    pair_image_data_param_ = new ::caffe::PairImageDataParameter(*from.pair_image_data_param_);
  } else {
    pair_image_data_param_ = NULL;
  }
  if (from.has_triplet_loss_param()) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter(*from.triplet_loss_param_);
  } else {
    triplet_loss_param_ = NULL;
  }
  if (from.has_l2norm_param()) {
    l2norm_param_ = new ::caffe::L2NormParameter(*from.l2norm_param_);
  } else {
    l2norm_param_ = NULL;
  }
  if (from.has_pad_param()) {
    pad_param_ = new ::caffe::PadParameter(*from.pad_param_);
  } else {
    pad_param_ = NULL;
  }
  if (from.has_facerec_image_data_param()) {
    facerec_image_data_param_ = new ::caffe::FacerecImageDataParameter(*from.facerec_image_data_param_);
  } else {
    facerec_image_data_param_ = NULL;
  }
  if (from.has_triplet_data_param()) {
    triplet_data_param_ = new ::caffe::TripletDataParameter(*from.triplet_data_param_);
  } else {
    triplet_data_param_ = NULL;
  }
  if (from.has_segment_data_param()) {
    segment_data_param_ = new ::caffe::SegmentDataParameter(*from.segment_data_param_);
  } else {
    segment_data_param_ = NULL;
  }
  if (from.has_learn_crf_param()) {
    learn_crf_param_ = new ::caffe::LearnCRFParameter(*from.learn_crf_param_);
  } else {
    learn_crf_param_ = NULL;
  }
  if (from.has_gaterecurrent2d_param()) {
    gaterecurrent2d_param_ = new ::caffe::GateRecurrent2dParameter(*from.gaterecurrent2d_param_);
  } else {
    gaterecurrent2d_param_ = NULL;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:caffe.LayerParameter)
}

void LayerParameter::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transform_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&transform_param_)) + sizeof(phase_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_param_;
  if (this != internal_default_instance()) delete loss_param_;
  if (this != internal_default_instance()) delete accuracy_param_;
  if (this != internal_default_instance()) delete argmax_param_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete contrastive_loss_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete dummy_data_param_;
  if (this != internal_default_instance()) delete eltwise_param_;
  if (this != internal_default_instance()) delete exp_param_;
  if (this != internal_default_instance()) delete hdf5_data_param_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
  if (this != internal_default_instance()) delete hinge_loss_param_;
  if (this != internal_default_instance()) delete image_data_param_;
  if (this != internal_default_instance()) delete infogain_loss_param_;
  if (this != internal_default_instance()) delete inner_product_param_;
  if (this != internal_default_instance()) delete lrn_param_;
  if (this != internal_default_instance()) delete memory_data_param_;
  if (this != internal_default_instance()) delete mvn_param_;
  if (this != internal_default_instance()) delete pooling_param_;
  if (this != internal_default_instance()) delete power_param_;
  if (this != internal_default_instance()) delete relu_param_;
  if (this != internal_default_instance()) delete sigmoid_param_;
  if (this != internal_default_instance()) delete softmax_param_;
  if (this != internal_default_instance()) delete slice_param_;
  if (this != internal_default_instance()) delete tanh_param_;
  if (this != internal_default_instance()) delete threshold_param_;
  if (this != internal_default_instance()) delete window_data_param_;
  if (this != internal_default_instance()) delete python_param_;
  if (this != internal_default_instance()) delete prelu_param_;
  if (this != internal_default_instance()) delete spp_param_;
  if (this != internal_default_instance()) delete reshape_param_;
  if (this != internal_default_instance()) delete log_param_;
  if (this != internal_default_instance()) delete flatten_param_;
  if (this != internal_default_instance()) delete reduction_param_;
  if (this != internal_default_instance()) delete embed_param_;
  if (this != internal_default_instance()) delete tile_param_;
  if (this != internal_default_instance()) delete batch_norm_param_;
  if (this != internal_default_instance()) delete elu_param_;
  if (this != internal_default_instance()) delete bias_param_;
  if (this != internal_default_instance()) delete scale_param_;
  if (this != internal_default_instance()) delete input_param_;
  if (this != internal_default_instance()) delete crop_param_;
  if (this != internal_default_instance()) delete upsample_param_;
  if (this != internal_default_instance()) delete triplet01_loss_param_;
  if (this != internal_default_instance()) delete gaterecurrent2dmask_param_;
  if (this != internal_default_instance()) delete gaterecurrent2dnoind_param_;
  if (this != internal_default_instance()) delete divide_param_;
  if (this != internal_default_instance()) delete gaterecurrent2dmax_param_;
  if (this != internal_default_instance()) delete huber_loss_param_;
  if (this != internal_default_instance()) delete image_data_arbitrary_param_;
  if (this != internal_default_instance()) delete manipulate_label_param_;
  if (this != internal_default_instance()) delete spatialrecurrent_param_;
  if (this != internal_default_instance()) delete spatiallstm_param_;
  if (this != internal_default_instance()) delete weakgatelstm_param_;
  if (this != internal_default_instance()) delete temporallstm_param_;
  if (this != internal_default_instance()) delete resize_param_;
  if (this != internal_default_instance()) delete manipulate_loss_param_;
  if (this != internal_default_instance()) delete element_hinge_loss_param_;
  if (this != internal_default_instance()) delete bn_param_;
  if (this != internal_default_instance()) delete regionconvolution_param_;
  if (this != internal_default_instance()) delete mapmetric_loss_param_;
  if (this != internal_default_instance()) delete image_data_text_label_param_;
  if (this != internal_default_instance()) delete super_crop_param_;
  if (this != internal_default_instance()) delete hardsample_param_;
  if (this != internal_default_instance()) delete gatelstm_param_;
  if (this != internal_default_instance()) delete gaterecurrent_param_;
  if (this != internal_default_instance()) delete dense_crf_param_;
  if (this != internal_default_instance()) delete pair_image_data_param_;
  if (this != internal_default_instance()) delete triplet_loss_param_;
  if (this != internal_default_instance()) delete l2norm_param_;
  if (this != internal_default_instance()) delete pad_param_;
  if (this != internal_default_instance()) delete facerec_image_data_param_;
  if (this != internal_default_instance()) delete triplet_data_param_;
  if (this != internal_default_instance()) delete segment_data_param_;
  if (this != internal_default_instance()) delete learn_crf_param_;
  if (this != internal_default_instance()) delete gaterecurrent2d_param_;
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LayerParameter& LayerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  include_.Clear();
  exclude_.Clear();
  propagate_down_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transform_param_ != NULL);
      transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(loss_param_ != NULL);
      loss_param_->::caffe::LossParameter::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(accuracy_param_ != NULL);
      accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(argmax_param_ != NULL);
      argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(concat_param_ != NULL);
      concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
      contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(convolution_param_ != NULL);
      convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(data_param_ != NULL);
      data_param_->::caffe::DataParameter::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(dropout_param_ != NULL);
      dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(dummy_data_param_ != NULL);
      dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(eltwise_param_ != NULL);
      eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(exp_param_ != NULL);
      exp_param_->::caffe::ExpParameter::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(hdf5_data_param_ != NULL);
      hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(hinge_loss_param_ != NULL);
      hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(image_data_param_ != NULL);
      image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(infogain_loss_param_ != NULL);
      infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(inner_product_param_ != NULL);
      inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(lrn_param_ != NULL);
      lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(memory_data_param_ != NULL);
      memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(mvn_param_ != NULL);
      mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(power_param_ != NULL);
      power_param_->::caffe::PowerParameter::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(sigmoid_param_ != NULL);
      sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(softmax_param_ != NULL);
      softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(slice_param_ != NULL);
      slice_param_->::caffe::SliceParameter::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(tanh_param_ != NULL);
      tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(threshold_param_ != NULL);
      threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(window_data_param_ != NULL);
      window_data_param_->::caffe::WindowDataParameter::Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(python_param_ != NULL);
      python_param_->::caffe::PythonParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prelu_param_ != NULL);
      prelu_param_->::caffe::PReLUParameter::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spp_param_ != NULL);
      spp_param_->::caffe::SPPParameter::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reshape_param_ != NULL);
      reshape_param_->::caffe::ReshapeParameter::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(log_param_ != NULL);
      log_param_->::caffe::LogParameter::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(flatten_param_ != NULL);
      flatten_param_->::caffe::FlattenParameter::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reduction_param_ != NULL);
      reduction_param_->::caffe::ReductionParameter::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(embed_param_ != NULL);
      embed_param_->::caffe::EmbedParameter::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tile_param_ != NULL);
      tile_param_->::caffe::TileParameter::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(batch_norm_param_ != NULL);
      batch_norm_param_->::caffe::BatchNormParameter::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(elu_param_ != NULL);
      elu_param_->::caffe::ELUParameter::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(bias_param_ != NULL);
      bias_param_->::caffe::BiasParameter::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(scale_param_ != NULL);
      scale_param_->::caffe::ScaleParameter::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(input_param_ != NULL);
      input_param_->::caffe::InputParameter::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(crop_param_ != NULL);
      crop_param_->::caffe::CropParameter::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(upsample_param_ != NULL);
      upsample_param_->::caffe::UpsampleParameter::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(triplet01_loss_param_ != NULL);
      triplet01_loss_param_->::caffe::Triplet01LossParameter::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(gaterecurrent2dmask_param_ != NULL);
      gaterecurrent2dmask_param_->::caffe::GateRecurrent2dmaskParameter::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(gaterecurrent2dnoind_param_ != NULL);
      gaterecurrent2dnoind_param_->::caffe::GateRecurrent2dnoindParameter::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(divide_param_ != NULL);
      divide_param_->::caffe::DivideParameter::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(gaterecurrent2dmax_param_ != NULL);
      gaterecurrent2dmax_param_->::caffe::GateRecurrent2dmaxParameter::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(huber_loss_param_ != NULL);
      huber_loss_param_->::caffe::HuberLossParameter::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(image_data_arbitrary_param_ != NULL);
      image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(manipulate_label_param_ != NULL);
      manipulate_label_param_->::caffe::ManipulatelabelParameter::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(spatialrecurrent_param_ != NULL);
      spatialrecurrent_param_->::caffe::SpatialRecurrentParameter::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(spatiallstm_param_ != NULL);
      spatiallstm_param_->::caffe::SpatialLstmParameter::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(weakgatelstm_param_ != NULL);
      weakgatelstm_param_->::caffe::WeakGateLstmParameter::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(temporallstm_param_ != NULL);
      temporallstm_param_->::caffe::TemporalLstmParameter::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(resize_param_ != NULL);
      resize_param_->::caffe::ResizeParameter::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(manipulate_loss_param_ != NULL);
      manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(element_hinge_loss_param_ != NULL);
      element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(bn_param_ != NULL);
      bn_param_->::caffe::BNParameter::Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(regionconvolution_param_ != NULL);
      regionconvolution_param_->::caffe::RegionconvolutionParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mapmetric_loss_param_ != NULL);
      mapmetric_loss_param_->::caffe::MapMetricLossParameter::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_data_text_label_param_ != NULL);
      image_data_text_label_param_->::caffe::ImageDataTextLabelParameter::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(super_crop_param_ != NULL);
      super_crop_param_->::caffe::SuperCropParameter::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hardsample_param_ != NULL);
      hardsample_param_->::caffe::HardSampleParameter::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gatelstm_param_ != NULL);
      gatelstm_param_->::caffe::GateLstmParameter::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gaterecurrent_param_ != NULL);
      gaterecurrent_param_->::caffe::GateRecurrentParameter::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dense_crf_param_ != NULL);
      dense_crf_param_->::caffe::DenseCRFParameter::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(pair_image_data_param_ != NULL);
      pair_image_data_param_->::caffe::PairImageDataParameter::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(triplet_loss_param_ != NULL);
      triplet_loss_param_->::caffe::TripletLossParameter::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(l2norm_param_ != NULL);
      l2norm_param_->::caffe::L2NormParameter::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(pad_param_ != NULL);
      pad_param_->::caffe::PadParameter::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(facerec_image_data_param_ != NULL);
      facerec_image_data_param_->::caffe::FacerecImageDataParameter::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(triplet_data_param_ != NULL);
      triplet_data_param_->::caffe::TripletDataParameter::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(segment_data_param_ != NULL);
      segment_data_param_->::caffe::SegmentDataParameter::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(learn_crf_param_ != NULL);
      learn_crf_param_->::caffe::LearnCRFParameter::Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(gaterecurrent2d_param_ != NULL);
    gaterecurrent2d_param_->::caffe::GateRecurrent2dParameter::Clear();
  }
  phase_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            static_cast<int>(this->bottom(this->bottom_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string top = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            static_cast<int>(this->top(this->top_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float loss_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_loss_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.ParamSpec param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule include = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule exclude = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.Phase phase = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::Phase_IsValid(value)) {
            set_phase(static_cast< ::caffe::Phase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool propagate_down = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88u, input, this->mutable_propagate_down())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_propagate_down())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter loss_param = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter data_param = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 866 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpParameter exp_param = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 914 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 930 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 938 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 946 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 119;
      case 119: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 954 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PowerParameter power_param = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 986 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 124;
      case 124: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 994 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 125;
      case 125: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 1002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SliceParameter slice_param = 126;
      case 126: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 1010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 127;
      case 127: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 128;
      case 128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 129;
      case 129: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PythonParameter python_param = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_python_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PReLUParameter prelu_param = 131;
      case 131: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1050 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prelu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter spp_param = 132;
      case 132: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReshapeParameter reshape_param = 133;
      case 133: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshape_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LogParameter log_param = 134;
      case 134: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 1074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FlattenParameter flatten_param = 135;
      case 135: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 1082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flatten_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReductionParameter reduction_param = 136;
      case 136: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 1090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reduction_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EmbedParameter embed_param = 137;
      case 137: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_embed_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TileParameter tile_param = 138;
      case 138: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 1106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tile_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BatchNormParameter batch_norm_param = 139;
      case 139: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ELUParameter elu_param = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 1122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BiasParameter bias_param = 141;
      case 141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ScaleParameter scale_param = 142;
      case 142: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 1138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InputParameter input_param = 143;
      case 143: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 1146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.CropParameter crop_param = 144;
      case 144: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 1154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.UpsampleParameter upsample_param = 159;
      case 159: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsample_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.Triplet01LossParameter triplet01_loss_param = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 1282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet01_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dmaskParameter gaterecurrent2dmask_param = 161;
      case 161: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaterecurrent2dmask_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dnoindParameter gaterecurrent2dnoind_param = 162;
      case 162: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 1298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaterecurrent2dnoind_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DivideParameter divide_param = 163;
      case 163: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_divide_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dmaxParameter gaterecurrent2dmax_param = 164;
      case 164: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 1314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaterecurrent2dmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HuberLossParameter huber_loss_param = 165;
      case 165: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 1322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huber_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 8010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_arbitrary_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 8018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manipulate_label_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 8026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spatialrecurrent_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
      case 1004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 8034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spatiallstm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 8042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weakgatelstm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
      case 1006: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 8050 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temporallstm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ResizeParameter resize_param = 1007;
      case 1007: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 8058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resize_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
      case 1008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 8066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manipulate_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
      case 1009: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 8074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.BNParameter bn_param = 1010;
      case 1010: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 8082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
      case 1011: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 8090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regionconvolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
      case 1012: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 8098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapmetric_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
      case 1013: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 8106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_text_label_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SuperCropParameter super_crop_param = 1014;
      case 1014: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 8114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_crop_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HardSampleParameter hardsample_param = 1015;
      case 1015: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 8122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardsample_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateLstmParameter gatelstm_param = 1016;
      case 1016: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 8130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gatelstm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
      case 1017: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 8138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaterecurrent_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DenseCRFParameter dense_crf_param = 1018;
      case 1018: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 8146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_crf_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
      case 1019: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 8154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pair_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TripletLossParameter triplet_loss_param = 1020;
      case 1020: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 8162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.L2NormParameter l2norm_param = 1021;
      case 1021: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 8170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l2norm_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PadParameter pad_param = 1022;
      case 1022: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 8178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
      case 1023: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 8186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facerec_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TripletDataParameter triplet_data_param = 1024;
      case 1024: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 8194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SegmentDataParameter segment_data_param = 1025;
      case 1025: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 8202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LearnCRFParameter learn_crf_param = 1026;
      case 1026: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 8210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learn_crf_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
      case 1027: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 8218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaterecurrent2d_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), static_cast<int>(this->top(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(i), output);
  }

  // repeated float loss_weight = 5;
  for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->loss_weight(i), output);
  }

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->param(static_cast<int>(i)), output);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blobs(static_cast<int>(i)), output);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->include(static_cast<int>(i)), output);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exclude(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .caffe.Phase phase = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->phase(), output);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0, n = this->propagate_down_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->propagate_down(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->transform_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->loss_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->accuracy_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *this->argmax_param_, output);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->concat_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, *this->dropout_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, *this->dummy_data_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->eltwise_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, *this->exp_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      113, *this->hdf5_output_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      115, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      116, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      118, *this->lrn_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      119, *this->memory_data_param_, output);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, *this->mvn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, *this->pooling_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      122, *this->power_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, *this->relu_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      125, *this->softmax_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      126, *this->slice_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      127, *this->tanh_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, *this->threshold_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, *this->window_data_param_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, *this->python_param_, output);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, *this->prelu_param_, output);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, *this->spp_param_, output);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      133, *this->reshape_param_, output);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      134, *this->log_param_, output);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      135, *this->flatten_param_, output);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, *this->reduction_param_, output);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      137, *this->embed_param_, output);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      138, *this->tile_param_, output);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      139, *this->batch_norm_param_, output);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, *this->elu_param_, output);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, *this->bias_param_, output);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, *this->scale_param_, output);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, *this->input_param_, output);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, *this->crop_param_, output);
  }

  // optional .caffe.UpsampleParameter upsample_param = 159;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      159, *this->upsample_param_, output);
  }

  // optional .caffe.Triplet01LossParameter triplet01_loss_param = 160;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160, *this->triplet01_loss_param_, output);
  }

  // optional .caffe.GateRecurrent2dmaskParameter gaterecurrent2dmask_param = 161;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      161, *this->gaterecurrent2dmask_param_, output);
  }

  // optional .caffe.GateRecurrent2dnoindParameter gaterecurrent2dnoind_param = 162;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      162, *this->gaterecurrent2dnoind_param_, output);
  }

  // optional .caffe.DivideParameter divide_param = 163;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163, *this->divide_param_, output);
  }

  // optional .caffe.GateRecurrent2dmaxParameter gaterecurrent2dmax_param = 164;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      164, *this->gaterecurrent2dmax_param_, output);
  }

  // optional .caffe.HuberLossParameter huber_loss_param = 165;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      165, *this->huber_loss_param_, output);
  }

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->image_data_arbitrary_param_, output);
  }

  // optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, *this->manipulate_label_param_, output);
  }

  // optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, *this->spatialrecurrent_param_, output);
  }

  // optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, *this->spatiallstm_param_, output);
  }

  // optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, *this->weakgatelstm_param_, output);
  }

  // optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1006, *this->temporallstm_param_, output);
  }

  // optional .caffe.ResizeParameter resize_param = 1007;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1007, *this->resize_param_, output);
  }

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1008, *this->manipulate_loss_param_, output);
  }

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1009, *this->element_hinge_loss_param_, output);
  }

  // optional .caffe.BNParameter bn_param = 1010;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1010, *this->bn_param_, output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1011, *this->regionconvolution_param_, output);
  }

  // optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1012, *this->mapmetric_loss_param_, output);
  }

  // optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1013, *this->image_data_text_label_param_, output);
  }

  // optional .caffe.SuperCropParameter super_crop_param = 1014;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1014, *this->super_crop_param_, output);
  }

  // optional .caffe.HardSampleParameter hardsample_param = 1015;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1015, *this->hardsample_param_, output);
  }

  // optional .caffe.GateLstmParameter gatelstm_param = 1016;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1016, *this->gatelstm_param_, output);
  }

  // optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1017, *this->gaterecurrent_param_, output);
  }

  // optional .caffe.DenseCRFParameter dense_crf_param = 1018;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1018, *this->dense_crf_param_, output);
  }

  // optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1019, *this->pair_image_data_param_, output);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 1020;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1020, *this->triplet_loss_param_, output);
  }

  // optional .caffe.L2NormParameter l2norm_param = 1021;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1021, *this->l2norm_param_, output);
  }

  // optional .caffe.PadParameter pad_param = 1022;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1022, *this->pad_param_, output);
  }

  // optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1023, *this->facerec_image_data_param_, output);
  }

  // optional .caffe.TripletDataParameter triplet_data_param = 1024;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1024, *this->triplet_data_param_, output);
  }

  // optional .caffe.SegmentDataParameter segment_data_param = 1025;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1025, *this->segment_data_param_, output);
  }

  // optional .caffe.LearnCRFParameter learn_crf_param = 1026;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1026, *this->learn_crf_param_, output);
  }

  // optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1027, *this->gaterecurrent2d_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), static_cast<int>(this->top(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->top(i), target);
  }

  // repeated float loss_weight = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->loss_weight_, target);

  // repeated .caffe.ParamSpec param = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->param(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe.BlobProto blobs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->blobs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe.NetStateRule include = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->include(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe.NetStateRule exclude = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->exclude(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .caffe.Phase phase = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->phase(), target);
  }

  // repeated bool propagate_down = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(11, this->propagate_down_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->transform_param_, deterministic, target);
  }

  // optional .caffe.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->loss_param_, deterministic, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->accuracy_param_, deterministic, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *this->argmax_param_, deterministic, target);
  }

  // optional .caffe.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->concat_param_, deterministic, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->contrastive_loss_param_, deterministic, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->convolution_param_, deterministic, target);
  }

  // optional .caffe.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->data_param_, deterministic, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        108, *this->dropout_param_, deterministic, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        109, *this->dummy_data_param_, deterministic, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        110, *this->eltwise_param_, deterministic, target);
  }

  // optional .caffe.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        111, *this->exp_param_, deterministic, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *this->hdf5_data_param_, deterministic, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        113, *this->hdf5_output_param_, deterministic, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        114, *this->hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        115, *this->image_data_param_, deterministic, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        116, *this->infogain_loss_param_, deterministic, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        117, *this->inner_product_param_, deterministic, target);
  }

  // optional .caffe.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        118, *this->lrn_param_, deterministic, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        119, *this->memory_data_param_, deterministic, target);
  }

  // optional .caffe.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        120, *this->mvn_param_, deterministic, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, *this->pooling_param_, deterministic, target);
  }

  // optional .caffe.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        122, *this->power_param_, deterministic, target);
  }

  // optional .caffe.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        123, *this->relu_param_, deterministic, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        124, *this->sigmoid_param_, deterministic, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        125, *this->softmax_param_, deterministic, target);
  }

  // optional .caffe.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        126, *this->slice_param_, deterministic, target);
  }

  // optional .caffe.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        127, *this->tanh_param_, deterministic, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        128, *this->threshold_param_, deterministic, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        129, *this->window_data_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        130, *this->python_param_, deterministic, target);
  }

  // optional .caffe.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        131, *this->prelu_param_, deterministic, target);
  }

  // optional .caffe.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        132, *this->spp_param_, deterministic, target);
  }

  // optional .caffe.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        133, *this->reshape_param_, deterministic, target);
  }

  // optional .caffe.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        134, *this->log_param_, deterministic, target);
  }

  // optional .caffe.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        135, *this->flatten_param_, deterministic, target);
  }

  // optional .caffe.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        136, *this->reduction_param_, deterministic, target);
  }

  // optional .caffe.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        137, *this->embed_param_, deterministic, target);
  }

  // optional .caffe.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        138, *this->tile_param_, deterministic, target);
  }

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        139, *this->batch_norm_param_, deterministic, target);
  }

  // optional .caffe.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        140, *this->elu_param_, deterministic, target);
  }

  // optional .caffe.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        141, *this->bias_param_, deterministic, target);
  }

  // optional .caffe.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        142, *this->scale_param_, deterministic, target);
  }

  // optional .caffe.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        143, *this->input_param_, deterministic, target);
  }

  // optional .caffe.CropParameter crop_param = 144;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        144, *this->crop_param_, deterministic, target);
  }

  // optional .caffe.UpsampleParameter upsample_param = 159;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        159, *this->upsample_param_, deterministic, target);
  }

  // optional .caffe.Triplet01LossParameter triplet01_loss_param = 160;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        160, *this->triplet01_loss_param_, deterministic, target);
  }

  // optional .caffe.GateRecurrent2dmaskParameter gaterecurrent2dmask_param = 161;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        161, *this->gaterecurrent2dmask_param_, deterministic, target);
  }

  // optional .caffe.GateRecurrent2dnoindParameter gaterecurrent2dnoind_param = 162;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        162, *this->gaterecurrent2dnoind_param_, deterministic, target);
  }

  // optional .caffe.DivideParameter divide_param = 163;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        163, *this->divide_param_, deterministic, target);
  }

  // optional .caffe.GateRecurrent2dmaxParameter gaterecurrent2dmax_param = 164;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        164, *this->gaterecurrent2dmax_param_, deterministic, target);
  }

  // optional .caffe.HuberLossParameter huber_loss_param = 165;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        165, *this->huber_loss_param_, deterministic, target);
  }

  // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->image_data_arbitrary_param_, deterministic, target);
  }

  // optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1002, *this->manipulate_label_param_, deterministic, target);
  }

  // optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1003, *this->spatialrecurrent_param_, deterministic, target);
  }

  // optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1004, *this->spatiallstm_param_, deterministic, target);
  }

  // optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1005, *this->weakgatelstm_param_, deterministic, target);
  }

  // optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1006, *this->temporallstm_param_, deterministic, target);
  }

  // optional .caffe.ResizeParameter resize_param = 1007;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1007, *this->resize_param_, deterministic, target);
  }

  // optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1008, *this->manipulate_loss_param_, deterministic, target);
  }

  // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1009, *this->element_hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.BNParameter bn_param = 1010;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1010, *this->bn_param_, deterministic, target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1011, *this->regionconvolution_param_, deterministic, target);
  }

  // optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1012, *this->mapmetric_loss_param_, deterministic, target);
  }

  // optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1013, *this->image_data_text_label_param_, deterministic, target);
  }

  // optional .caffe.SuperCropParameter super_crop_param = 1014;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1014, *this->super_crop_param_, deterministic, target);
  }

  // optional .caffe.HardSampleParameter hardsample_param = 1015;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1015, *this->hardsample_param_, deterministic, target);
  }

  // optional .caffe.GateLstmParameter gatelstm_param = 1016;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1016, *this->gatelstm_param_, deterministic, target);
  }

  // optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1017, *this->gaterecurrent_param_, deterministic, target);
  }

  // optional .caffe.DenseCRFParameter dense_crf_param = 1018;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1018, *this->dense_crf_param_, deterministic, target);
  }

  // optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1019, *this->pair_image_data_param_, deterministic, target);
  }

  // optional .caffe.TripletLossParameter triplet_loss_param = 1020;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1020, *this->triplet_loss_param_, deterministic, target);
  }

  // optional .caffe.L2NormParameter l2norm_param = 1021;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1021, *this->l2norm_param_, deterministic, target);
  }

  // optional .caffe.PadParameter pad_param = 1022;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1022, *this->pad_param_, deterministic, target);
  }

  // optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1023, *this->facerec_image_data_param_, deterministic, target);
  }

  // optional .caffe.TripletDataParameter triplet_data_param = 1024;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1024, *this->triplet_data_param_, deterministic, target);
  }

  // optional .caffe.SegmentDataParameter segment_data_param = 1025;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1025, *this->segment_data_param_, deterministic, target);
  }

  // optional .caffe.LearnCRFParameter learn_crf_param = 1026;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1026, *this->learn_crf_param_, deterministic, target);
  }

  // optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1027, *this->gaterecurrent2d_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string bottom = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0, n = this->top_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated float loss_weight = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  // repeated .caffe.ParamSpec param = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param(static_cast<int>(i)));
    }
  }

  // repeated .caffe.BlobProto blobs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(static_cast<int>(i)));
    }
  }

  // repeated .caffe.NetStateRule include = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->include_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(static_cast<int>(i)));
    }
  }

  // repeated .caffe.NetStateRule exclude = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->exclude_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(static_cast<int>(i)));
    }
  }

  // repeated bool propagate_down = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->propagate_down_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->propagate_down_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe.TransformationParameter transform_param = 100;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.LossParameter loss_param = 101;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 102;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.ArgMaxParameter argmax_param = 103;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.ConcatParameter concat_param = 104;
    if (has_concat_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.ConvolutionParameter convolution_param = 106;
    if (has_convolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 107;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 108;
    if (has_dropout_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 109;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 110;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ExpParameter exp_param = 111;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
    if (has_hdf5_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.HingeLossParameter hinge_loss_param = 114;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ImageDataParameter image_data_param = 115;
    if (has_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 117;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 118;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 119;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

    // optional .caffe.MVNParameter mvn_param = 120;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 121;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.PowerParameter power_param = 122;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 123;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 124;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 125;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.SliceParameter slice_param = 126;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 127;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 128;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 129;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .caffe.PythonParameter python_param = 130;
    if (has_python_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->python_param_);
    }

    // optional .caffe.PReLUParameter prelu_param = 131;
    if (has_prelu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prelu_param_);
    }

    // optional .caffe.SPPParameter spp_param = 132;
    if (has_spp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spp_param_);
    }

    // optional .caffe.ReshapeParameter reshape_param = 133;
    if (has_reshape_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshape_param_);
    }

    // optional .caffe.LogParameter log_param = 134;
    if (has_log_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_param_);
    }

    // optional .caffe.FlattenParameter flatten_param = 135;
    if (has_flatten_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flatten_param_);
    }

    // optional .caffe.ReductionParameter reduction_param = 136;
    if (has_reduction_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reduction_param_);
    }

    // optional .caffe.EmbedParameter embed_param = 137;
    if (has_embed_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->embed_param_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .caffe.TileParameter tile_param = 138;
    if (has_tile_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tile_param_);
    }

    // optional .caffe.BatchNormParameter batch_norm_param = 139;
    if (has_batch_norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->batch_norm_param_);
    }

    // optional .caffe.ELUParameter elu_param = 140;
    if (has_elu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->elu_param_);
    }

    // optional .caffe.BiasParameter bias_param = 141;
    if (has_bias_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_param_);
    }

    // optional .caffe.ScaleParameter scale_param = 142;
    if (has_scale_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_param_);
    }

    // optional .caffe.InputParameter input_param = 143;
    if (has_input_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->input_param_);
    }

    // optional .caffe.CropParameter crop_param = 144;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crop_param_);
    }

    // optional .caffe.UpsampleParameter upsample_param = 159;
    if (has_upsample_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->upsample_param_);
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .caffe.Triplet01LossParameter triplet01_loss_param = 160;
    if (has_triplet01_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->triplet01_loss_param_);
    }

    // optional .caffe.GateRecurrent2dmaskParameter gaterecurrent2dmask_param = 161;
    if (has_gaterecurrent2dmask_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaterecurrent2dmask_param_);
    }

    // optional .caffe.GateRecurrent2dnoindParameter gaterecurrent2dnoind_param = 162;
    if (has_gaterecurrent2dnoind_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaterecurrent2dnoind_param_);
    }

    // optional .caffe.DivideParameter divide_param = 163;
    if (has_divide_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->divide_param_);
    }

    // optional .caffe.GateRecurrent2dmaxParameter gaterecurrent2dmax_param = 164;
    if (has_gaterecurrent2dmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaterecurrent2dmax_param_);
    }

    // optional .caffe.HuberLossParameter huber_loss_param = 165;
    if (has_huber_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->huber_loss_param_);
    }

    // optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
    if (has_image_data_arbitrary_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_arbitrary_param_);
    }

    // optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
    if (has_manipulate_label_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->manipulate_label_param_);
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
    if (has_spatialrecurrent_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spatialrecurrent_param_);
    }

    // optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
    if (has_spatiallstm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->spatiallstm_param_);
    }

    // optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
    if (has_weakgatelstm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weakgatelstm_param_);
    }

    // optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
    if (has_temporallstm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->temporallstm_param_);
    }

    // optional .caffe.ResizeParameter resize_param = 1007;
    if (has_resize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resize_param_);
    }

    // optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
    if (has_manipulate_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->manipulate_loss_param_);
    }

    // optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
    if (has_element_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->element_hinge_loss_param_);
    }

    // optional .caffe.BNParameter bn_param = 1010;
    if (has_bn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bn_param_);
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
    if (has_regionconvolution_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->regionconvolution_param_);
    }

    // optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
    if (has_mapmetric_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mapmetric_loss_param_);
    }

    // optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
    if (has_image_data_text_label_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_text_label_param_);
    }

    // optional .caffe.SuperCropParameter super_crop_param = 1014;
    if (has_super_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->super_crop_param_);
    }

    // optional .caffe.HardSampleParameter hardsample_param = 1015;
    if (has_hardsample_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hardsample_param_);
    }

    // optional .caffe.GateLstmParameter gatelstm_param = 1016;
    if (has_gatelstm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gatelstm_param_);
    }

    // optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
    if (has_gaterecurrent_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaterecurrent_param_);
    }

    // optional .caffe.DenseCRFParameter dense_crf_param = 1018;
    if (has_dense_crf_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dense_crf_param_);
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
    if (has_pair_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pair_image_data_param_);
    }

    // optional .caffe.TripletLossParameter triplet_loss_param = 1020;
    if (has_triplet_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->triplet_loss_param_);
    }

    // optional .caffe.L2NormParameter l2norm_param = 1021;
    if (has_l2norm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->l2norm_param_);
    }

    // optional .caffe.PadParameter pad_param = 1022;
    if (has_pad_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pad_param_);
    }

    // optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
    if (has_facerec_image_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->facerec_image_data_param_);
    }

    // optional .caffe.TripletDataParameter triplet_data_param = 1024;
    if (has_triplet_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->triplet_data_param_);
    }

    // optional .caffe.SegmentDataParameter segment_data_param = 1025;
    if (has_segment_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->segment_data_param_);
    }

    // optional .caffe.LearnCRFParameter learn_crf_param = 1026;
    if (has_learn_crf_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->learn_crf_param_);
    }

  }
  if (_has_bits_[80 / 32] & 196608u) {
    // optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
    if (has_gaterecurrent2d_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaterecurrent2d_param_);
    }

    // optional .caffe.Phase phase = 10;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  propagate_down_.MergeFrom(from.propagate_down_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_python_param()->::caffe::PythonParameter::MergeFrom(from.python_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prelu_param()->::caffe::PReLUParameter::MergeFrom(from.prelu_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_spp_param()->::caffe::SPPParameter::MergeFrom(from.spp_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reshape_param()->::caffe::ReshapeParameter::MergeFrom(from.reshape_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_log_param()->::caffe::LogParameter::MergeFrom(from.log_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_flatten_param()->::caffe::FlattenParameter::MergeFrom(from.flatten_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_reduction_param()->::caffe::ReductionParameter::MergeFrom(from.reduction_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_embed_param()->::caffe::EmbedParameter::MergeFrom(from.embed_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_tile_param()->::caffe::TileParameter::MergeFrom(from.tile_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_batch_norm_param()->::caffe::BatchNormParameter::MergeFrom(from.batch_norm_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_elu_param()->::caffe::ELUParameter::MergeFrom(from.elu_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_bias_param()->::caffe::BiasParameter::MergeFrom(from.bias_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_scale_param()->::caffe::ScaleParameter::MergeFrom(from.scale_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_input_param()->::caffe::InputParameter::MergeFrom(from.input_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_crop_param()->::caffe::CropParameter::MergeFrom(from.crop_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_upsample_param()->::caffe::UpsampleParameter::MergeFrom(from.upsample_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_triplet01_loss_param()->::caffe::Triplet01LossParameter::MergeFrom(from.triplet01_loss_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_gaterecurrent2dmask_param()->::caffe::GateRecurrent2dmaskParameter::MergeFrom(from.gaterecurrent2dmask_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_gaterecurrent2dnoind_param()->::caffe::GateRecurrent2dnoindParameter::MergeFrom(from.gaterecurrent2dnoind_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_divide_param()->::caffe::DivideParameter::MergeFrom(from.divide_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_gaterecurrent2dmax_param()->::caffe::GateRecurrent2dmaxParameter::MergeFrom(from.gaterecurrent2dmax_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_huber_loss_param()->::caffe::HuberLossParameter::MergeFrom(from.huber_loss_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_image_data_arbitrary_param()->::caffe::ImageDataArbitraryParameter::MergeFrom(from.image_data_arbitrary_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_manipulate_label_param()->::caffe::ManipulatelabelParameter::MergeFrom(from.manipulate_label_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_spatialrecurrent_param()->::caffe::SpatialRecurrentParameter::MergeFrom(from.spatialrecurrent_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_spatiallstm_param()->::caffe::SpatialLstmParameter::MergeFrom(from.spatiallstm_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_weakgatelstm_param()->::caffe::WeakGateLstmParameter::MergeFrom(from.weakgatelstm_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_temporallstm_param()->::caffe::TemporalLstmParameter::MergeFrom(from.temporallstm_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_resize_param()->::caffe::ResizeParameter::MergeFrom(from.resize_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_manipulate_loss_param()->::caffe::ManipulateLossParameter::MergeFrom(from.manipulate_loss_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_element_hinge_loss_param()->::caffe::ElementHingeLossParameter::MergeFrom(from.element_hinge_loss_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_bn_param()->::caffe::BNParameter::MergeFrom(from.bn_param());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_regionconvolution_param()->::caffe::RegionconvolutionParameter::MergeFrom(from.regionconvolution_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mapmetric_loss_param()->::caffe::MapMetricLossParameter::MergeFrom(from.mapmetric_loss_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image_data_text_label_param()->::caffe::ImageDataTextLabelParameter::MergeFrom(from.image_data_text_label_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_super_crop_param()->::caffe::SuperCropParameter::MergeFrom(from.super_crop_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hardsample_param()->::caffe::HardSampleParameter::MergeFrom(from.hardsample_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gatelstm_param()->::caffe::GateLstmParameter::MergeFrom(from.gatelstm_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_gaterecurrent_param()->::caffe::GateRecurrentParameter::MergeFrom(from.gaterecurrent_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_dense_crf_param()->::caffe::DenseCRFParameter::MergeFrom(from.dense_crf_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_pair_image_data_param()->::caffe::PairImageDataParameter::MergeFrom(from.pair_image_data_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_triplet_loss_param()->::caffe::TripletLossParameter::MergeFrom(from.triplet_loss_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_l2norm_param()->::caffe::L2NormParameter::MergeFrom(from.l2norm_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_pad_param()->::caffe::PadParameter::MergeFrom(from.pad_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_facerec_image_data_param()->::caffe::FacerecImageDataParameter::MergeFrom(from.facerec_image_data_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_triplet_data_param()->::caffe::TripletDataParameter::MergeFrom(from.triplet_data_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_segment_data_param()->::caffe::SegmentDataParameter::MergeFrom(from.segment_data_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_learn_crf_param()->::caffe::LearnCRFParameter::MergeFrom(from.learn_crf_param());
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_gaterecurrent2d_param()->::caffe::GateRecurrent2dParameter::MergeFrom(from.gaterecurrent2d_param());
    }
    if (cached_has_bits & 0x00020000u) {
      phase_ = from.phase_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blobs_.InternalSwap(&other->blobs_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  propagate_down_.InternalSwap(&other->propagate_down_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  swap(transform_param_, other->transform_param_);
  swap(loss_param_, other->loss_param_);
  swap(accuracy_param_, other->accuracy_param_);
  swap(argmax_param_, other->argmax_param_);
  swap(concat_param_, other->concat_param_);
  swap(contrastive_loss_param_, other->contrastive_loss_param_);
  swap(convolution_param_, other->convolution_param_);
  swap(data_param_, other->data_param_);
  swap(dropout_param_, other->dropout_param_);
  swap(dummy_data_param_, other->dummy_data_param_);
  swap(eltwise_param_, other->eltwise_param_);
  swap(exp_param_, other->exp_param_);
  swap(hdf5_data_param_, other->hdf5_data_param_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(hinge_loss_param_, other->hinge_loss_param_);
  swap(image_data_param_, other->image_data_param_);
  swap(infogain_loss_param_, other->infogain_loss_param_);
  swap(inner_product_param_, other->inner_product_param_);
  swap(lrn_param_, other->lrn_param_);
  swap(memory_data_param_, other->memory_data_param_);
  swap(mvn_param_, other->mvn_param_);
  swap(pooling_param_, other->pooling_param_);
  swap(power_param_, other->power_param_);
  swap(relu_param_, other->relu_param_);
  swap(sigmoid_param_, other->sigmoid_param_);
  swap(softmax_param_, other->softmax_param_);
  swap(slice_param_, other->slice_param_);
  swap(tanh_param_, other->tanh_param_);
  swap(threshold_param_, other->threshold_param_);
  swap(window_data_param_, other->window_data_param_);
  swap(python_param_, other->python_param_);
  swap(prelu_param_, other->prelu_param_);
  swap(spp_param_, other->spp_param_);
  swap(reshape_param_, other->reshape_param_);
  swap(log_param_, other->log_param_);
  swap(flatten_param_, other->flatten_param_);
  swap(reduction_param_, other->reduction_param_);
  swap(embed_param_, other->embed_param_);
  swap(tile_param_, other->tile_param_);
  swap(batch_norm_param_, other->batch_norm_param_);
  swap(elu_param_, other->elu_param_);
  swap(bias_param_, other->bias_param_);
  swap(scale_param_, other->scale_param_);
  swap(input_param_, other->input_param_);
  swap(crop_param_, other->crop_param_);
  swap(upsample_param_, other->upsample_param_);
  swap(triplet01_loss_param_, other->triplet01_loss_param_);
  swap(gaterecurrent2dmask_param_, other->gaterecurrent2dmask_param_);
  swap(gaterecurrent2dnoind_param_, other->gaterecurrent2dnoind_param_);
  swap(divide_param_, other->divide_param_);
  swap(gaterecurrent2dmax_param_, other->gaterecurrent2dmax_param_);
  swap(huber_loss_param_, other->huber_loss_param_);
  swap(image_data_arbitrary_param_, other->image_data_arbitrary_param_);
  swap(manipulate_label_param_, other->manipulate_label_param_);
  swap(spatialrecurrent_param_, other->spatialrecurrent_param_);
  swap(spatiallstm_param_, other->spatiallstm_param_);
  swap(weakgatelstm_param_, other->weakgatelstm_param_);
  swap(temporallstm_param_, other->temporallstm_param_);
  swap(resize_param_, other->resize_param_);
  swap(manipulate_loss_param_, other->manipulate_loss_param_);
  swap(element_hinge_loss_param_, other->element_hinge_loss_param_);
  swap(bn_param_, other->bn_param_);
  swap(regionconvolution_param_, other->regionconvolution_param_);
  swap(mapmetric_loss_param_, other->mapmetric_loss_param_);
  swap(image_data_text_label_param_, other->image_data_text_label_param_);
  swap(super_crop_param_, other->super_crop_param_);
  swap(hardsample_param_, other->hardsample_param_);
  swap(gatelstm_param_, other->gatelstm_param_);
  swap(gaterecurrent_param_, other->gaterecurrent_param_);
  swap(dense_crf_param_, other->dense_crf_param_);
  swap(pair_image_data_param_, other->pair_image_data_param_);
  swap(triplet_loss_param_, other->triplet_loss_param_);
  swap(l2norm_param_, other->l2norm_param_);
  swap(pad_param_, other->pad_param_);
  swap(facerec_image_data_param_, other->facerec_image_data_param_);
  swap(triplet_data_param_, other->triplet_data_param_);
  swap(segment_data_param_, other->segment_data_param_);
  swap(learn_crf_param_, other->learn_crf_param_);
  swap(gaterecurrent2d_param_, other->gaterecurrent2d_param_);
  swap(phase_, other->phase_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string name = 1;
bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
int LayerParameter::bottom_size() const {
  return bottom_.size();
}
void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
void LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#endif
void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
int LayerParameter::top_size() const {
  return top_.size();
}
void LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#if LANG_CXX11
void LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#endif
void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
bool LayerParameter::has_phase() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void LayerParameter::set_has_phase() {
  _has_bits_[2] |= 0x00020000u;
}
void LayerParameter::clear_has_phase() {
  _has_bits_[2] &= ~0x00020000u;
}
void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
int LayerParameter::param_size() const {
  return param_.size();
}
void LayerParameter::clear_param() {
  param_.Clear();
}
const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
int LayerParameter::blobs_size() const {
  return blobs_.size();
}
void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
int LayerParameter::include_size() const {
  return include_.size();
}
void LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
int LayerParameter::exclude_size() const {
  return exclude_.size();
}
void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000004u;
}
void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  const ::caffe::TransformationParameter* p = transform_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TransformationParameter*>(
      &::caffe::_TransformationParameter_default_instance_);
}
::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00000008u;
}
void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& LayerParameter::loss_param() const {
  const ::caffe::LossParameter* p = loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LossParameter*>(
      &::caffe::_LossParameter_default_instance_);
}
::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00000010u;
}
void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  const ::caffe::AccuracyParameter* p = accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AccuracyParameter*>(
      &::caffe::_AccuracyParameter_default_instance_);
}
::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00000020u;
}
void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  const ::caffe::ArgMaxParameter* p = argmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ArgMaxParameter*>(
      &::caffe::_ArgMaxParameter_default_instance_);
}
::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[1] |= 0x00000200u;
}
void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[1] &= ~0x00000200u;
}
void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  const ::caffe::BatchNormParameter* p = batch_norm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BatchNormParameter*>(
      &::caffe::_BatchNormParameter_default_instance_);
}
::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
bool LayerParameter::has_bias_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void LayerParameter::set_has_bias_param() {
  _has_bits_[1] |= 0x00000800u;
}
void LayerParameter::clear_has_bias_param() {
  _has_bits_[1] &= ~0x00000800u;
}
void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  const ::caffe::BiasParameter* p = bias_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BiasParameter*>(
      &::caffe::_BiasParameter_default_instance_);
}
::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00000080u;
}
void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  const ::caffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ContrastiveLossParameter*>(
      &::caffe::_ContrastiveLossParameter_default_instance_);
}
::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
bool LayerParameter::has_crop_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void LayerParameter::set_has_crop_param() {
  _has_bits_[1] |= 0x00004000u;
}
void LayerParameter::clear_has_crop_param() {
  _has_bits_[1] &= ~0x00004000u;
}
void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
const ::caffe::CropParameter& LayerParameter::crop_param() const {
  const ::caffe::CropParameter* p = crop_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::CropParameter*>(
      &::caffe::_CropParameter_default_instance_);
}
::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& LayerParameter::data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
}
void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000400u;
}
void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00000800u;
}
void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  const ::caffe::DummyDataParameter* p = dummy_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DummyDataParameter*>(
      &::caffe::_DummyDataParameter_default_instance_);
}
::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00001000u;
}
void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  const ::caffe::EltwiseParameter* p = eltwise_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseParameter*>(
      &::caffe::_EltwiseParameter_default_instance_);
}
::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
bool LayerParameter::has_elu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void LayerParameter::set_has_elu_param() {
  _has_bits_[1] |= 0x00000400u;
}
void LayerParameter::clear_has_elu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  const ::caffe::ELUParameter* p = elu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ELUParameter*>(
      &::caffe::_ELUParameter_default_instance_);
}
::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000080u;
}
void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000080u;
}
void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  const ::caffe::EmbedParameter* p = embed_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EmbedParameter*>(
      &::caffe::_EmbedParameter_default_instance_);
}
::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00002000u;
}
void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  const ::caffe::ExpParameter* p = exp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ExpParameter*>(
      &::caffe::_ExpParameter_default_instance_);
}
::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000020u;
}
void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000020u;
}
void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  const ::caffe::FlattenParameter* p = flatten_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FlattenParameter*>(
      &::caffe::_FlattenParameter_default_instance_);
}
::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00008000u;
}
void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00010000u;
}
void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  const ::caffe::HingeLossParameter* p = hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HingeLossParameter*>(
      &::caffe::_HingeLossParameter_default_instance_);
}
::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
void LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00080000u;
}
void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00002000u;
}
void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00002000u;
}
void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
const ::caffe::InputParameter& LayerParameter::input_param() const {
  const ::caffe::InputParameter* p = input_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InputParameter*>(
      &::caffe::_InputParameter_default_instance_);
}
::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
const ::caffe::LogParameter& LayerParameter::log_param() const {
  const ::caffe::LogParameter* p = log_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LogParameter*>(
      &::caffe::_LogParameter_default_instance_);
}
::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
}
void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x00400000u;
}
void LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  const ::caffe::MVNParameter* p = mvn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MVNParameter*>(
      &::caffe::_MVNParameter_default_instance_);
}
::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00800000u;
}
void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x01000000u;
}
void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& LayerParameter::power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000002u;
}
void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  const ::caffe::PReLUParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PReLUParameter*>(
      &::caffe::_PReLUParameter_default_instance_);
}
::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00000001u;
}
void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00000001u;
}
void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
const ::caffe::PythonParameter& LayerParameter::python_param() const {
  const ::caffe::PythonParameter* p = python_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PythonParameter*>(
      &::caffe::_PythonParameter_default_instance_);
}
::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00000040u;
}
void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00000040u;
}
void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  const ::caffe::ReductionParameter* p = reduction_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReductionParameter*>(
      &::caffe::_ReductionParameter_default_instance_);
}
::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x02000000u;
}
void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00000008u;
}
void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00000008u;
}
void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  const ::caffe::ReshapeParameter* p = reshape_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReshapeParameter*>(
      &::caffe::_ReshapeParameter_default_instance_);
}
::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00001000u;
}
void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00001000u;
}
void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  const ::caffe::ScaleParameter* p = scale_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ScaleParameter*>(
      &::caffe::_ScaleParameter_default_instance_);
}
::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x04000000u;
}
void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x08000000u;
}
void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  const ::caffe::SoftmaxParameter* p = softmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxParameter*>(
      &::caffe::_SoftmaxParameter_default_instance_);
}
::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00000004u;
}
void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00000004u;
}
void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  const ::caffe::SPPParameter* p = spp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SPPParameter*>(
      &::caffe::_SPPParameter_default_instance_);
}
::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
bool LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x10000000u;
}
void LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  const ::caffe::SliceParameter* p = slice_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SliceParameter*>(
      &::caffe::_SliceParameter_default_instance_);
}
::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x20000000u;
}
void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  const ::caffe::TanHParameter* p = tanh_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TanHParameter*>(
      &::caffe::_TanHParameter_default_instance_);
}
::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x40000000u;
}
void LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  const ::caffe::ThresholdParameter* p = threshold_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ThresholdParameter*>(
      &::caffe::_ThresholdParameter_default_instance_);
}
::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x00000100u;
}
void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x00000100u;
}
void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
const ::caffe::TileParameter& LayerParameter::tile_param() const {
  const ::caffe::TileParameter* p = tile_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TileParameter*>(
      &::caffe::_TileParameter_default_instance_);
}
::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x80000000u;
}
void LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.UpsampleParameter upsample_param = 159;
bool LayerParameter::has_upsample_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void LayerParameter::set_has_upsample_param() {
  _has_bits_[1] |= 0x00008000u;
}
void LayerParameter::clear_has_upsample_param() {
  _has_bits_[1] &= ~0x00008000u;
}
void LayerParameter::clear_upsample_param() {
  if (upsample_param_ != NULL) upsample_param_->::caffe::UpsampleParameter::Clear();
  clear_has_upsample_param();
}
const ::caffe::UpsampleParameter& LayerParameter::upsample_param() const {
  const ::caffe::UpsampleParameter* p = upsample_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.upsample_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::UpsampleParameter*>(
      &::caffe::_UpsampleParameter_default_instance_);
}
::caffe::UpsampleParameter* LayerParameter::mutable_upsample_param() {
  set_has_upsample_param();
  if (upsample_param_ == NULL) {
    upsample_param_ = new ::caffe::UpsampleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.upsample_param)
  return upsample_param_;
}
::caffe::UpsampleParameter* LayerParameter::release_upsample_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.upsample_param)
  clear_has_upsample_param();
  ::caffe::UpsampleParameter* temp = upsample_param_;
  upsample_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_upsample_param(::caffe::UpsampleParameter* upsample_param) {
  delete upsample_param_;
  upsample_param_ = upsample_param;
  if (upsample_param) {
    set_has_upsample_param();
  } else {
    clear_has_upsample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.upsample_param)
}

// optional .caffe.Triplet01LossParameter triplet01_loss_param = 160;
bool LayerParameter::has_triplet01_loss_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void LayerParameter::set_has_triplet01_loss_param() {
  _has_bits_[1] |= 0x00010000u;
}
void LayerParameter::clear_has_triplet01_loss_param() {
  _has_bits_[1] &= ~0x00010000u;
}
void LayerParameter::clear_triplet01_loss_param() {
  if (triplet01_loss_param_ != NULL) triplet01_loss_param_->::caffe::Triplet01LossParameter::Clear();
  clear_has_triplet01_loss_param();
}
const ::caffe::Triplet01LossParameter& LayerParameter::triplet01_loss_param() const {
  const ::caffe::Triplet01LossParameter* p = triplet01_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.triplet01_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::Triplet01LossParameter*>(
      &::caffe::_Triplet01LossParameter_default_instance_);
}
::caffe::Triplet01LossParameter* LayerParameter::mutable_triplet01_loss_param() {
  set_has_triplet01_loss_param();
  if (triplet01_loss_param_ == NULL) {
    triplet01_loss_param_ = new ::caffe::Triplet01LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.triplet01_loss_param)
  return triplet01_loss_param_;
}
::caffe::Triplet01LossParameter* LayerParameter::release_triplet01_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.triplet01_loss_param)
  clear_has_triplet01_loss_param();
  ::caffe::Triplet01LossParameter* temp = triplet01_loss_param_;
  triplet01_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_triplet01_loss_param(::caffe::Triplet01LossParameter* triplet01_loss_param) {
  delete triplet01_loss_param_;
  triplet01_loss_param_ = triplet01_loss_param;
  if (triplet01_loss_param) {
    set_has_triplet01_loss_param();
  } else {
    clear_has_triplet01_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.triplet01_loss_param)
}

// optional .caffe.GateRecurrent2dmaskParameter gaterecurrent2dmask_param = 161;
bool LayerParameter::has_gaterecurrent2dmask_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void LayerParameter::set_has_gaterecurrent2dmask_param() {
  _has_bits_[1] |= 0x00020000u;
}
void LayerParameter::clear_has_gaterecurrent2dmask_param() {
  _has_bits_[1] &= ~0x00020000u;
}
void LayerParameter::clear_gaterecurrent2dmask_param() {
  if (gaterecurrent2dmask_param_ != NULL) gaterecurrent2dmask_param_->::caffe::GateRecurrent2dmaskParameter::Clear();
  clear_has_gaterecurrent2dmask_param();
}
const ::caffe::GateRecurrent2dmaskParameter& LayerParameter::gaterecurrent2dmask_param() const {
  const ::caffe::GateRecurrent2dmaskParameter* p = gaterecurrent2dmask_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gaterecurrent2dmask_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateRecurrent2dmaskParameter*>(
      &::caffe::_GateRecurrent2dmaskParameter_default_instance_);
}
::caffe::GateRecurrent2dmaskParameter* LayerParameter::mutable_gaterecurrent2dmask_param() {
  set_has_gaterecurrent2dmask_param();
  if (gaterecurrent2dmask_param_ == NULL) {
    gaterecurrent2dmask_param_ = new ::caffe::GateRecurrent2dmaskParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gaterecurrent2dmask_param)
  return gaterecurrent2dmask_param_;
}
::caffe::GateRecurrent2dmaskParameter* LayerParameter::release_gaterecurrent2dmask_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gaterecurrent2dmask_param)
  clear_has_gaterecurrent2dmask_param();
  ::caffe::GateRecurrent2dmaskParameter* temp = gaterecurrent2dmask_param_;
  gaterecurrent2dmask_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gaterecurrent2dmask_param(::caffe::GateRecurrent2dmaskParameter* gaterecurrent2dmask_param) {
  delete gaterecurrent2dmask_param_;
  gaterecurrent2dmask_param_ = gaterecurrent2dmask_param;
  if (gaterecurrent2dmask_param) {
    set_has_gaterecurrent2dmask_param();
  } else {
    clear_has_gaterecurrent2dmask_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gaterecurrent2dmask_param)
}

// optional .caffe.GateRecurrent2dnoindParameter gaterecurrent2dnoind_param = 162;
bool LayerParameter::has_gaterecurrent2dnoind_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void LayerParameter::set_has_gaterecurrent2dnoind_param() {
  _has_bits_[1] |= 0x00040000u;
}
void LayerParameter::clear_has_gaterecurrent2dnoind_param() {
  _has_bits_[1] &= ~0x00040000u;
}
void LayerParameter::clear_gaterecurrent2dnoind_param() {
  if (gaterecurrent2dnoind_param_ != NULL) gaterecurrent2dnoind_param_->::caffe::GateRecurrent2dnoindParameter::Clear();
  clear_has_gaterecurrent2dnoind_param();
}
const ::caffe::GateRecurrent2dnoindParameter& LayerParameter::gaterecurrent2dnoind_param() const {
  const ::caffe::GateRecurrent2dnoindParameter* p = gaterecurrent2dnoind_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gaterecurrent2dnoind_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateRecurrent2dnoindParameter*>(
      &::caffe::_GateRecurrent2dnoindParameter_default_instance_);
}
::caffe::GateRecurrent2dnoindParameter* LayerParameter::mutable_gaterecurrent2dnoind_param() {
  set_has_gaterecurrent2dnoind_param();
  if (gaterecurrent2dnoind_param_ == NULL) {
    gaterecurrent2dnoind_param_ = new ::caffe::GateRecurrent2dnoindParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gaterecurrent2dnoind_param)
  return gaterecurrent2dnoind_param_;
}
::caffe::GateRecurrent2dnoindParameter* LayerParameter::release_gaterecurrent2dnoind_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gaterecurrent2dnoind_param)
  clear_has_gaterecurrent2dnoind_param();
  ::caffe::GateRecurrent2dnoindParameter* temp = gaterecurrent2dnoind_param_;
  gaterecurrent2dnoind_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gaterecurrent2dnoind_param(::caffe::GateRecurrent2dnoindParameter* gaterecurrent2dnoind_param) {
  delete gaterecurrent2dnoind_param_;
  gaterecurrent2dnoind_param_ = gaterecurrent2dnoind_param;
  if (gaterecurrent2dnoind_param) {
    set_has_gaterecurrent2dnoind_param();
  } else {
    clear_has_gaterecurrent2dnoind_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gaterecurrent2dnoind_param)
}

// optional .caffe.DivideParameter divide_param = 163;
bool LayerParameter::has_divide_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void LayerParameter::set_has_divide_param() {
  _has_bits_[1] |= 0x00080000u;
}
void LayerParameter::clear_has_divide_param() {
  _has_bits_[1] &= ~0x00080000u;
}
void LayerParameter::clear_divide_param() {
  if (divide_param_ != NULL) divide_param_->::caffe::DivideParameter::Clear();
  clear_has_divide_param();
}
const ::caffe::DivideParameter& LayerParameter::divide_param() const {
  const ::caffe::DivideParameter* p = divide_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.divide_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DivideParameter*>(
      &::caffe::_DivideParameter_default_instance_);
}
::caffe::DivideParameter* LayerParameter::mutable_divide_param() {
  set_has_divide_param();
  if (divide_param_ == NULL) {
    divide_param_ = new ::caffe::DivideParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.divide_param)
  return divide_param_;
}
::caffe::DivideParameter* LayerParameter::release_divide_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.divide_param)
  clear_has_divide_param();
  ::caffe::DivideParameter* temp = divide_param_;
  divide_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_divide_param(::caffe::DivideParameter* divide_param) {
  delete divide_param_;
  divide_param_ = divide_param;
  if (divide_param) {
    set_has_divide_param();
  } else {
    clear_has_divide_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.divide_param)
}

// optional .caffe.GateRecurrent2dmaxParameter gaterecurrent2dmax_param = 164;
bool LayerParameter::has_gaterecurrent2dmax_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void LayerParameter::set_has_gaterecurrent2dmax_param() {
  _has_bits_[1] |= 0x00100000u;
}
void LayerParameter::clear_has_gaterecurrent2dmax_param() {
  _has_bits_[1] &= ~0x00100000u;
}
void LayerParameter::clear_gaterecurrent2dmax_param() {
  if (gaterecurrent2dmax_param_ != NULL) gaterecurrent2dmax_param_->::caffe::GateRecurrent2dmaxParameter::Clear();
  clear_has_gaterecurrent2dmax_param();
}
const ::caffe::GateRecurrent2dmaxParameter& LayerParameter::gaterecurrent2dmax_param() const {
  const ::caffe::GateRecurrent2dmaxParameter* p = gaterecurrent2dmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gaterecurrent2dmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateRecurrent2dmaxParameter*>(
      &::caffe::_GateRecurrent2dmaxParameter_default_instance_);
}
::caffe::GateRecurrent2dmaxParameter* LayerParameter::mutable_gaterecurrent2dmax_param() {
  set_has_gaterecurrent2dmax_param();
  if (gaterecurrent2dmax_param_ == NULL) {
    gaterecurrent2dmax_param_ = new ::caffe::GateRecurrent2dmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gaterecurrent2dmax_param)
  return gaterecurrent2dmax_param_;
}
::caffe::GateRecurrent2dmaxParameter* LayerParameter::release_gaterecurrent2dmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gaterecurrent2dmax_param)
  clear_has_gaterecurrent2dmax_param();
  ::caffe::GateRecurrent2dmaxParameter* temp = gaterecurrent2dmax_param_;
  gaterecurrent2dmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gaterecurrent2dmax_param(::caffe::GateRecurrent2dmaxParameter* gaterecurrent2dmax_param) {
  delete gaterecurrent2dmax_param_;
  gaterecurrent2dmax_param_ = gaterecurrent2dmax_param;
  if (gaterecurrent2dmax_param) {
    set_has_gaterecurrent2dmax_param();
  } else {
    clear_has_gaterecurrent2dmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gaterecurrent2dmax_param)
}

// optional .caffe.HuberLossParameter huber_loss_param = 165;
bool LayerParameter::has_huber_loss_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void LayerParameter::set_has_huber_loss_param() {
  _has_bits_[1] |= 0x00200000u;
}
void LayerParameter::clear_has_huber_loss_param() {
  _has_bits_[1] &= ~0x00200000u;
}
void LayerParameter::clear_huber_loss_param() {
  if (huber_loss_param_ != NULL) huber_loss_param_->::caffe::HuberLossParameter::Clear();
  clear_has_huber_loss_param();
}
const ::caffe::HuberLossParameter& LayerParameter::huber_loss_param() const {
  const ::caffe::HuberLossParameter* p = huber_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.huber_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HuberLossParameter*>(
      &::caffe::_HuberLossParameter_default_instance_);
}
::caffe::HuberLossParameter* LayerParameter::mutable_huber_loss_param() {
  set_has_huber_loss_param();
  if (huber_loss_param_ == NULL) {
    huber_loss_param_ = new ::caffe::HuberLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.huber_loss_param)
  return huber_loss_param_;
}
::caffe::HuberLossParameter* LayerParameter::release_huber_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.huber_loss_param)
  clear_has_huber_loss_param();
  ::caffe::HuberLossParameter* temp = huber_loss_param_;
  huber_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_huber_loss_param(::caffe::HuberLossParameter* huber_loss_param) {
  delete huber_loss_param_;
  huber_loss_param_ = huber_loss_param;
  if (huber_loss_param) {
    set_has_huber_loss_param();
  } else {
    clear_has_huber_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.huber_loss_param)
}

// optional .caffe.ImageDataArbitraryParameter image_data_arbitrary_param = 1001;
bool LayerParameter::has_image_data_arbitrary_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void LayerParameter::set_has_image_data_arbitrary_param() {
  _has_bits_[1] |= 0x00400000u;
}
void LayerParameter::clear_has_image_data_arbitrary_param() {
  _has_bits_[1] &= ~0x00400000u;
}
void LayerParameter::clear_image_data_arbitrary_param() {
  if (image_data_arbitrary_param_ != NULL) image_data_arbitrary_param_->::caffe::ImageDataArbitraryParameter::Clear();
  clear_has_image_data_arbitrary_param();
}
const ::caffe::ImageDataArbitraryParameter& LayerParameter::image_data_arbitrary_param() const {
  const ::caffe::ImageDataArbitraryParameter* p = image_data_arbitrary_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_arbitrary_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataArbitraryParameter*>(
      &::caffe::_ImageDataArbitraryParameter_default_instance_);
}
::caffe::ImageDataArbitraryParameter* LayerParameter::mutable_image_data_arbitrary_param() {
  set_has_image_data_arbitrary_param();
  if (image_data_arbitrary_param_ == NULL) {
    image_data_arbitrary_param_ = new ::caffe::ImageDataArbitraryParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_arbitrary_param)
  return image_data_arbitrary_param_;
}
::caffe::ImageDataArbitraryParameter* LayerParameter::release_image_data_arbitrary_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_arbitrary_param)
  clear_has_image_data_arbitrary_param();
  ::caffe::ImageDataArbitraryParameter* temp = image_data_arbitrary_param_;
  image_data_arbitrary_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_arbitrary_param(::caffe::ImageDataArbitraryParameter* image_data_arbitrary_param) {
  delete image_data_arbitrary_param_;
  image_data_arbitrary_param_ = image_data_arbitrary_param;
  if (image_data_arbitrary_param) {
    set_has_image_data_arbitrary_param();
  } else {
    clear_has_image_data_arbitrary_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_arbitrary_param)
}

// optional .caffe.ManipulatelabelParameter manipulate_label_param = 1002;
bool LayerParameter::has_manipulate_label_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void LayerParameter::set_has_manipulate_label_param() {
  _has_bits_[1] |= 0x00800000u;
}
void LayerParameter::clear_has_manipulate_label_param() {
  _has_bits_[1] &= ~0x00800000u;
}
void LayerParameter::clear_manipulate_label_param() {
  if (manipulate_label_param_ != NULL) manipulate_label_param_->::caffe::ManipulatelabelParameter::Clear();
  clear_has_manipulate_label_param();
}
const ::caffe::ManipulatelabelParameter& LayerParameter::manipulate_label_param() const {
  const ::caffe::ManipulatelabelParameter* p = manipulate_label_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.manipulate_label_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ManipulatelabelParameter*>(
      &::caffe::_ManipulatelabelParameter_default_instance_);
}
::caffe::ManipulatelabelParameter* LayerParameter::mutable_manipulate_label_param() {
  set_has_manipulate_label_param();
  if (manipulate_label_param_ == NULL) {
    manipulate_label_param_ = new ::caffe::ManipulatelabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.manipulate_label_param)
  return manipulate_label_param_;
}
::caffe::ManipulatelabelParameter* LayerParameter::release_manipulate_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.manipulate_label_param)
  clear_has_manipulate_label_param();
  ::caffe::ManipulatelabelParameter* temp = manipulate_label_param_;
  manipulate_label_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_manipulate_label_param(::caffe::ManipulatelabelParameter* manipulate_label_param) {
  delete manipulate_label_param_;
  manipulate_label_param_ = manipulate_label_param;
  if (manipulate_label_param) {
    set_has_manipulate_label_param();
  } else {
    clear_has_manipulate_label_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.manipulate_label_param)
}

// optional .caffe.SpatialRecurrentParameter spatialrecurrent_param = 1003;
bool LayerParameter::has_spatialrecurrent_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void LayerParameter::set_has_spatialrecurrent_param() {
  _has_bits_[1] |= 0x01000000u;
}
void LayerParameter::clear_has_spatialrecurrent_param() {
  _has_bits_[1] &= ~0x01000000u;
}
void LayerParameter::clear_spatialrecurrent_param() {
  if (spatialrecurrent_param_ != NULL) spatialrecurrent_param_->::caffe::SpatialRecurrentParameter::Clear();
  clear_has_spatialrecurrent_param();
}
const ::caffe::SpatialRecurrentParameter& LayerParameter::spatialrecurrent_param() const {
  const ::caffe::SpatialRecurrentParameter* p = spatialrecurrent_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spatialrecurrent_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SpatialRecurrentParameter*>(
      &::caffe::_SpatialRecurrentParameter_default_instance_);
}
::caffe::SpatialRecurrentParameter* LayerParameter::mutable_spatialrecurrent_param() {
  set_has_spatialrecurrent_param();
  if (spatialrecurrent_param_ == NULL) {
    spatialrecurrent_param_ = new ::caffe::SpatialRecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spatialrecurrent_param)
  return spatialrecurrent_param_;
}
::caffe::SpatialRecurrentParameter* LayerParameter::release_spatialrecurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spatialrecurrent_param)
  clear_has_spatialrecurrent_param();
  ::caffe::SpatialRecurrentParameter* temp = spatialrecurrent_param_;
  spatialrecurrent_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spatialrecurrent_param(::caffe::SpatialRecurrentParameter* spatialrecurrent_param) {
  delete spatialrecurrent_param_;
  spatialrecurrent_param_ = spatialrecurrent_param;
  if (spatialrecurrent_param) {
    set_has_spatialrecurrent_param();
  } else {
    clear_has_spatialrecurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spatialrecurrent_param)
}

// optional .caffe.SpatialLstmParameter spatiallstm_param = 1004;
bool LayerParameter::has_spatiallstm_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void LayerParameter::set_has_spatiallstm_param() {
  _has_bits_[1] |= 0x02000000u;
}
void LayerParameter::clear_has_spatiallstm_param() {
  _has_bits_[1] &= ~0x02000000u;
}
void LayerParameter::clear_spatiallstm_param() {
  if (spatiallstm_param_ != NULL) spatiallstm_param_->::caffe::SpatialLstmParameter::Clear();
  clear_has_spatiallstm_param();
}
const ::caffe::SpatialLstmParameter& LayerParameter::spatiallstm_param() const {
  const ::caffe::SpatialLstmParameter* p = spatiallstm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spatiallstm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SpatialLstmParameter*>(
      &::caffe::_SpatialLstmParameter_default_instance_);
}
::caffe::SpatialLstmParameter* LayerParameter::mutable_spatiallstm_param() {
  set_has_spatiallstm_param();
  if (spatiallstm_param_ == NULL) {
    spatiallstm_param_ = new ::caffe::SpatialLstmParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spatiallstm_param)
  return spatiallstm_param_;
}
::caffe::SpatialLstmParameter* LayerParameter::release_spatiallstm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spatiallstm_param)
  clear_has_spatiallstm_param();
  ::caffe::SpatialLstmParameter* temp = spatiallstm_param_;
  spatiallstm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_spatiallstm_param(::caffe::SpatialLstmParameter* spatiallstm_param) {
  delete spatiallstm_param_;
  spatiallstm_param_ = spatiallstm_param;
  if (spatiallstm_param) {
    set_has_spatiallstm_param();
  } else {
    clear_has_spatiallstm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spatiallstm_param)
}

// optional .caffe.WeakGateLstmParameter weakgatelstm_param = 1005;
bool LayerParameter::has_weakgatelstm_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void LayerParameter::set_has_weakgatelstm_param() {
  _has_bits_[1] |= 0x04000000u;
}
void LayerParameter::clear_has_weakgatelstm_param() {
  _has_bits_[1] &= ~0x04000000u;
}
void LayerParameter::clear_weakgatelstm_param() {
  if (weakgatelstm_param_ != NULL) weakgatelstm_param_->::caffe::WeakGateLstmParameter::Clear();
  clear_has_weakgatelstm_param();
}
const ::caffe::WeakGateLstmParameter& LayerParameter::weakgatelstm_param() const {
  const ::caffe::WeakGateLstmParameter* p = weakgatelstm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weakgatelstm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WeakGateLstmParameter*>(
      &::caffe::_WeakGateLstmParameter_default_instance_);
}
::caffe::WeakGateLstmParameter* LayerParameter::mutable_weakgatelstm_param() {
  set_has_weakgatelstm_param();
  if (weakgatelstm_param_ == NULL) {
    weakgatelstm_param_ = new ::caffe::WeakGateLstmParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.weakgatelstm_param)
  return weakgatelstm_param_;
}
::caffe::WeakGateLstmParameter* LayerParameter::release_weakgatelstm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.weakgatelstm_param)
  clear_has_weakgatelstm_param();
  ::caffe::WeakGateLstmParameter* temp = weakgatelstm_param_;
  weakgatelstm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_weakgatelstm_param(::caffe::WeakGateLstmParameter* weakgatelstm_param) {
  delete weakgatelstm_param_;
  weakgatelstm_param_ = weakgatelstm_param;
  if (weakgatelstm_param) {
    set_has_weakgatelstm_param();
  } else {
    clear_has_weakgatelstm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.weakgatelstm_param)
}

// optional .caffe.TemporalLstmParameter temporallstm_param = 1006;
bool LayerParameter::has_temporallstm_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void LayerParameter::set_has_temporallstm_param() {
  _has_bits_[1] |= 0x08000000u;
}
void LayerParameter::clear_has_temporallstm_param() {
  _has_bits_[1] &= ~0x08000000u;
}
void LayerParameter::clear_temporallstm_param() {
  if (temporallstm_param_ != NULL) temporallstm_param_->::caffe::TemporalLstmParameter::Clear();
  clear_has_temporallstm_param();
}
const ::caffe::TemporalLstmParameter& LayerParameter::temporallstm_param() const {
  const ::caffe::TemporalLstmParameter* p = temporallstm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.temporallstm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TemporalLstmParameter*>(
      &::caffe::_TemporalLstmParameter_default_instance_);
}
::caffe::TemporalLstmParameter* LayerParameter::mutable_temporallstm_param() {
  set_has_temporallstm_param();
  if (temporallstm_param_ == NULL) {
    temporallstm_param_ = new ::caffe::TemporalLstmParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.temporallstm_param)
  return temporallstm_param_;
}
::caffe::TemporalLstmParameter* LayerParameter::release_temporallstm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.temporallstm_param)
  clear_has_temporallstm_param();
  ::caffe::TemporalLstmParameter* temp = temporallstm_param_;
  temporallstm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_temporallstm_param(::caffe::TemporalLstmParameter* temporallstm_param) {
  delete temporallstm_param_;
  temporallstm_param_ = temporallstm_param;
  if (temporallstm_param) {
    set_has_temporallstm_param();
  } else {
    clear_has_temporallstm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.temporallstm_param)
}

// optional .caffe.ResizeParameter resize_param = 1007;
bool LayerParameter::has_resize_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void LayerParameter::set_has_resize_param() {
  _has_bits_[1] |= 0x10000000u;
}
void LayerParameter::clear_has_resize_param() {
  _has_bits_[1] &= ~0x10000000u;
}
void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  const ::caffe::ResizeParameter* p = resize_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ResizeParameter*>(
      &::caffe::_ResizeParameter_default_instance_);
}
::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_param)
  return resize_param_;
}
::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_param)
}

// optional .caffe.ManipulateLossParameter manipulate_loss_param = 1008;
bool LayerParameter::has_manipulate_loss_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void LayerParameter::set_has_manipulate_loss_param() {
  _has_bits_[1] |= 0x20000000u;
}
void LayerParameter::clear_has_manipulate_loss_param() {
  _has_bits_[1] &= ~0x20000000u;
}
void LayerParameter::clear_manipulate_loss_param() {
  if (manipulate_loss_param_ != NULL) manipulate_loss_param_->::caffe::ManipulateLossParameter::Clear();
  clear_has_manipulate_loss_param();
}
const ::caffe::ManipulateLossParameter& LayerParameter::manipulate_loss_param() const {
  const ::caffe::ManipulateLossParameter* p = manipulate_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.manipulate_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ManipulateLossParameter*>(
      &::caffe::_ManipulateLossParameter_default_instance_);
}
::caffe::ManipulateLossParameter* LayerParameter::mutable_manipulate_loss_param() {
  set_has_manipulate_loss_param();
  if (manipulate_loss_param_ == NULL) {
    manipulate_loss_param_ = new ::caffe::ManipulateLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.manipulate_loss_param)
  return manipulate_loss_param_;
}
::caffe::ManipulateLossParameter* LayerParameter::release_manipulate_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.manipulate_loss_param)
  clear_has_manipulate_loss_param();
  ::caffe::ManipulateLossParameter* temp = manipulate_loss_param_;
  manipulate_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_manipulate_loss_param(::caffe::ManipulateLossParameter* manipulate_loss_param) {
  delete manipulate_loss_param_;
  manipulate_loss_param_ = manipulate_loss_param;
  if (manipulate_loss_param) {
    set_has_manipulate_loss_param();
  } else {
    clear_has_manipulate_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.manipulate_loss_param)
}

// optional .caffe.ElementHingeLossParameter element_hinge_loss_param = 1009;
bool LayerParameter::has_element_hinge_loss_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void LayerParameter::set_has_element_hinge_loss_param() {
  _has_bits_[1] |= 0x40000000u;
}
void LayerParameter::clear_has_element_hinge_loss_param() {
  _has_bits_[1] &= ~0x40000000u;
}
void LayerParameter::clear_element_hinge_loss_param() {
  if (element_hinge_loss_param_ != NULL) element_hinge_loss_param_->::caffe::ElementHingeLossParameter::Clear();
  clear_has_element_hinge_loss_param();
}
const ::caffe::ElementHingeLossParameter& LayerParameter::element_hinge_loss_param() const {
  const ::caffe::ElementHingeLossParameter* p = element_hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.element_hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ElementHingeLossParameter*>(
      &::caffe::_ElementHingeLossParameter_default_instance_);
}
::caffe::ElementHingeLossParameter* LayerParameter::mutable_element_hinge_loss_param() {
  set_has_element_hinge_loss_param();
  if (element_hinge_loss_param_ == NULL) {
    element_hinge_loss_param_ = new ::caffe::ElementHingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.element_hinge_loss_param)
  return element_hinge_loss_param_;
}
::caffe::ElementHingeLossParameter* LayerParameter::release_element_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.element_hinge_loss_param)
  clear_has_element_hinge_loss_param();
  ::caffe::ElementHingeLossParameter* temp = element_hinge_loss_param_;
  element_hinge_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_element_hinge_loss_param(::caffe::ElementHingeLossParameter* element_hinge_loss_param) {
  delete element_hinge_loss_param_;
  element_hinge_loss_param_ = element_hinge_loss_param;
  if (element_hinge_loss_param) {
    set_has_element_hinge_loss_param();
  } else {
    clear_has_element_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.element_hinge_loss_param)
}

// optional .caffe.BNParameter bn_param = 1010;
bool LayerParameter::has_bn_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void LayerParameter::set_has_bn_param() {
  _has_bits_[1] |= 0x80000000u;
}
void LayerParameter::clear_has_bn_param() {
  _has_bits_[1] &= ~0x80000000u;
}
void LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->::caffe::BNParameter::Clear();
  clear_has_bn_param();
}
const ::caffe::BNParameter& LayerParameter::bn_param() const {
  const ::caffe::BNParameter* p = bn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BNParameter*>(
      &::caffe::_BNParameter_default_instance_);
}
::caffe::BNParameter* LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) {
    bn_param_ = new ::caffe::BNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bn_param)
  return bn_param_;
}
::caffe::BNParameter* LayerParameter::release_bn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bn_param)
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  delete bn_param_;
  bn_param_ = bn_param;
  if (bn_param) {
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bn_param)
}

// optional .caffe.RegionconvolutionParameter regionconvolution_param = 1011;
bool LayerParameter::has_regionconvolution_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void LayerParameter::set_has_regionconvolution_param() {
  _has_bits_[2] |= 0x00000001u;
}
void LayerParameter::clear_has_regionconvolution_param() {
  _has_bits_[2] &= ~0x00000001u;
}
void LayerParameter::clear_regionconvolution_param() {
  if (regionconvolution_param_ != NULL) regionconvolution_param_->::caffe::RegionconvolutionParameter::Clear();
  clear_has_regionconvolution_param();
}
const ::caffe::RegionconvolutionParameter& LayerParameter::regionconvolution_param() const {
  const ::caffe::RegionconvolutionParameter* p = regionconvolution_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.regionconvolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::RegionconvolutionParameter*>(
      &::caffe::_RegionconvolutionParameter_default_instance_);
}
::caffe::RegionconvolutionParameter* LayerParameter::mutable_regionconvolution_param() {
  set_has_regionconvolution_param();
  if (regionconvolution_param_ == NULL) {
    regionconvolution_param_ = new ::caffe::RegionconvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.regionconvolution_param)
  return regionconvolution_param_;
}
::caffe::RegionconvolutionParameter* LayerParameter::release_regionconvolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.regionconvolution_param)
  clear_has_regionconvolution_param();
  ::caffe::RegionconvolutionParameter* temp = regionconvolution_param_;
  regionconvolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_regionconvolution_param(::caffe::RegionconvolutionParameter* regionconvolution_param) {
  delete regionconvolution_param_;
  regionconvolution_param_ = regionconvolution_param;
  if (regionconvolution_param) {
    set_has_regionconvolution_param();
  } else {
    clear_has_regionconvolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.regionconvolution_param)
}

// optional .caffe.MapMetricLossParameter mapmetric_loss_param = 1012;
bool LayerParameter::has_mapmetric_loss_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void LayerParameter::set_has_mapmetric_loss_param() {
  _has_bits_[2] |= 0x00000002u;
}
void LayerParameter::clear_has_mapmetric_loss_param() {
  _has_bits_[2] &= ~0x00000002u;
}
void LayerParameter::clear_mapmetric_loss_param() {
  if (mapmetric_loss_param_ != NULL) mapmetric_loss_param_->::caffe::MapMetricLossParameter::Clear();
  clear_has_mapmetric_loss_param();
}
const ::caffe::MapMetricLossParameter& LayerParameter::mapmetric_loss_param() const {
  const ::caffe::MapMetricLossParameter* p = mapmetric_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mapmetric_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MapMetricLossParameter*>(
      &::caffe::_MapMetricLossParameter_default_instance_);
}
::caffe::MapMetricLossParameter* LayerParameter::mutable_mapmetric_loss_param() {
  set_has_mapmetric_loss_param();
  if (mapmetric_loss_param_ == NULL) {
    mapmetric_loss_param_ = new ::caffe::MapMetricLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mapmetric_loss_param)
  return mapmetric_loss_param_;
}
::caffe::MapMetricLossParameter* LayerParameter::release_mapmetric_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mapmetric_loss_param)
  clear_has_mapmetric_loss_param();
  ::caffe::MapMetricLossParameter* temp = mapmetric_loss_param_;
  mapmetric_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_mapmetric_loss_param(::caffe::MapMetricLossParameter* mapmetric_loss_param) {
  delete mapmetric_loss_param_;
  mapmetric_loss_param_ = mapmetric_loss_param;
  if (mapmetric_loss_param) {
    set_has_mapmetric_loss_param();
  } else {
    clear_has_mapmetric_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mapmetric_loss_param)
}

// optional .caffe.ImageDataTextLabelParameter image_data_text_label_param = 1013;
bool LayerParameter::has_image_data_text_label_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void LayerParameter::set_has_image_data_text_label_param() {
  _has_bits_[2] |= 0x00000004u;
}
void LayerParameter::clear_has_image_data_text_label_param() {
  _has_bits_[2] &= ~0x00000004u;
}
void LayerParameter::clear_image_data_text_label_param() {
  if (image_data_text_label_param_ != NULL) image_data_text_label_param_->::caffe::ImageDataTextLabelParameter::Clear();
  clear_has_image_data_text_label_param();
}
const ::caffe::ImageDataTextLabelParameter& LayerParameter::image_data_text_label_param() const {
  const ::caffe::ImageDataTextLabelParameter* p = image_data_text_label_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_text_label_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataTextLabelParameter*>(
      &::caffe::_ImageDataTextLabelParameter_default_instance_);
}
::caffe::ImageDataTextLabelParameter* LayerParameter::mutable_image_data_text_label_param() {
  set_has_image_data_text_label_param();
  if (image_data_text_label_param_ == NULL) {
    image_data_text_label_param_ = new ::caffe::ImageDataTextLabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_text_label_param)
  return image_data_text_label_param_;
}
::caffe::ImageDataTextLabelParameter* LayerParameter::release_image_data_text_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_text_label_param)
  clear_has_image_data_text_label_param();
  ::caffe::ImageDataTextLabelParameter* temp = image_data_text_label_param_;
  image_data_text_label_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_image_data_text_label_param(::caffe::ImageDataTextLabelParameter* image_data_text_label_param) {
  delete image_data_text_label_param_;
  image_data_text_label_param_ = image_data_text_label_param;
  if (image_data_text_label_param) {
    set_has_image_data_text_label_param();
  } else {
    clear_has_image_data_text_label_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_text_label_param)
}

// optional .caffe.SuperCropParameter super_crop_param = 1014;
bool LayerParameter::has_super_crop_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void LayerParameter::set_has_super_crop_param() {
  _has_bits_[2] |= 0x00000008u;
}
void LayerParameter::clear_has_super_crop_param() {
  _has_bits_[2] &= ~0x00000008u;
}
void LayerParameter::clear_super_crop_param() {
  if (super_crop_param_ != NULL) super_crop_param_->::caffe::SuperCropParameter::Clear();
  clear_has_super_crop_param();
}
const ::caffe::SuperCropParameter& LayerParameter::super_crop_param() const {
  const ::caffe::SuperCropParameter* p = super_crop_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.super_crop_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SuperCropParameter*>(
      &::caffe::_SuperCropParameter_default_instance_);
}
::caffe::SuperCropParameter* LayerParameter::mutable_super_crop_param() {
  set_has_super_crop_param();
  if (super_crop_param_ == NULL) {
    super_crop_param_ = new ::caffe::SuperCropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.super_crop_param)
  return super_crop_param_;
}
::caffe::SuperCropParameter* LayerParameter::release_super_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.super_crop_param)
  clear_has_super_crop_param();
  ::caffe::SuperCropParameter* temp = super_crop_param_;
  super_crop_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_super_crop_param(::caffe::SuperCropParameter* super_crop_param) {
  delete super_crop_param_;
  super_crop_param_ = super_crop_param;
  if (super_crop_param) {
    set_has_super_crop_param();
  } else {
    clear_has_super_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.super_crop_param)
}

// optional .caffe.HardSampleParameter hardsample_param = 1015;
bool LayerParameter::has_hardsample_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void LayerParameter::set_has_hardsample_param() {
  _has_bits_[2] |= 0x00000010u;
}
void LayerParameter::clear_has_hardsample_param() {
  _has_bits_[2] &= ~0x00000010u;
}
void LayerParameter::clear_hardsample_param() {
  if (hardsample_param_ != NULL) hardsample_param_->::caffe::HardSampleParameter::Clear();
  clear_has_hardsample_param();
}
const ::caffe::HardSampleParameter& LayerParameter::hardsample_param() const {
  const ::caffe::HardSampleParameter* p = hardsample_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hardsample_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HardSampleParameter*>(
      &::caffe::_HardSampleParameter_default_instance_);
}
::caffe::HardSampleParameter* LayerParameter::mutable_hardsample_param() {
  set_has_hardsample_param();
  if (hardsample_param_ == NULL) {
    hardsample_param_ = new ::caffe::HardSampleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hardsample_param)
  return hardsample_param_;
}
::caffe::HardSampleParameter* LayerParameter::release_hardsample_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hardsample_param)
  clear_has_hardsample_param();
  ::caffe::HardSampleParameter* temp = hardsample_param_;
  hardsample_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_hardsample_param(::caffe::HardSampleParameter* hardsample_param) {
  delete hardsample_param_;
  hardsample_param_ = hardsample_param;
  if (hardsample_param) {
    set_has_hardsample_param();
  } else {
    clear_has_hardsample_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hardsample_param)
}

// optional .caffe.GateLstmParameter gatelstm_param = 1016;
bool LayerParameter::has_gatelstm_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void LayerParameter::set_has_gatelstm_param() {
  _has_bits_[2] |= 0x00000020u;
}
void LayerParameter::clear_has_gatelstm_param() {
  _has_bits_[2] &= ~0x00000020u;
}
void LayerParameter::clear_gatelstm_param() {
  if (gatelstm_param_ != NULL) gatelstm_param_->::caffe::GateLstmParameter::Clear();
  clear_has_gatelstm_param();
}
const ::caffe::GateLstmParameter& LayerParameter::gatelstm_param() const {
  const ::caffe::GateLstmParameter* p = gatelstm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gatelstm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateLstmParameter*>(
      &::caffe::_GateLstmParameter_default_instance_);
}
::caffe::GateLstmParameter* LayerParameter::mutable_gatelstm_param() {
  set_has_gatelstm_param();
  if (gatelstm_param_ == NULL) {
    gatelstm_param_ = new ::caffe::GateLstmParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gatelstm_param)
  return gatelstm_param_;
}
::caffe::GateLstmParameter* LayerParameter::release_gatelstm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gatelstm_param)
  clear_has_gatelstm_param();
  ::caffe::GateLstmParameter* temp = gatelstm_param_;
  gatelstm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gatelstm_param(::caffe::GateLstmParameter* gatelstm_param) {
  delete gatelstm_param_;
  gatelstm_param_ = gatelstm_param;
  if (gatelstm_param) {
    set_has_gatelstm_param();
  } else {
    clear_has_gatelstm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gatelstm_param)
}

// optional .caffe.GateRecurrentParameter gaterecurrent_param = 1017;
bool LayerParameter::has_gaterecurrent_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void LayerParameter::set_has_gaterecurrent_param() {
  _has_bits_[2] |= 0x00000040u;
}
void LayerParameter::clear_has_gaterecurrent_param() {
  _has_bits_[2] &= ~0x00000040u;
}
void LayerParameter::clear_gaterecurrent_param() {
  if (gaterecurrent_param_ != NULL) gaterecurrent_param_->::caffe::GateRecurrentParameter::Clear();
  clear_has_gaterecurrent_param();
}
const ::caffe::GateRecurrentParameter& LayerParameter::gaterecurrent_param() const {
  const ::caffe::GateRecurrentParameter* p = gaterecurrent_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gaterecurrent_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateRecurrentParameter*>(
      &::caffe::_GateRecurrentParameter_default_instance_);
}
::caffe::GateRecurrentParameter* LayerParameter::mutable_gaterecurrent_param() {
  set_has_gaterecurrent_param();
  if (gaterecurrent_param_ == NULL) {
    gaterecurrent_param_ = new ::caffe::GateRecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gaterecurrent_param)
  return gaterecurrent_param_;
}
::caffe::GateRecurrentParameter* LayerParameter::release_gaterecurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gaterecurrent_param)
  clear_has_gaterecurrent_param();
  ::caffe::GateRecurrentParameter* temp = gaterecurrent_param_;
  gaterecurrent_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gaterecurrent_param(::caffe::GateRecurrentParameter* gaterecurrent_param) {
  delete gaterecurrent_param_;
  gaterecurrent_param_ = gaterecurrent_param;
  if (gaterecurrent_param) {
    set_has_gaterecurrent_param();
  } else {
    clear_has_gaterecurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gaterecurrent_param)
}

// optional .caffe.DenseCRFParameter dense_crf_param = 1018;
bool LayerParameter::has_dense_crf_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void LayerParameter::set_has_dense_crf_param() {
  _has_bits_[2] |= 0x00000080u;
}
void LayerParameter::clear_has_dense_crf_param() {
  _has_bits_[2] &= ~0x00000080u;
}
void LayerParameter::clear_dense_crf_param() {
  if (dense_crf_param_ != NULL) dense_crf_param_->::caffe::DenseCRFParameter::Clear();
  clear_has_dense_crf_param();
}
const ::caffe::DenseCRFParameter& LayerParameter::dense_crf_param() const {
  const ::caffe::DenseCRFParameter* p = dense_crf_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dense_crf_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DenseCRFParameter*>(
      &::caffe::_DenseCRFParameter_default_instance_);
}
::caffe::DenseCRFParameter* LayerParameter::mutable_dense_crf_param() {
  set_has_dense_crf_param();
  if (dense_crf_param_ == NULL) {
    dense_crf_param_ = new ::caffe::DenseCRFParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dense_crf_param)
  return dense_crf_param_;
}
::caffe::DenseCRFParameter* LayerParameter::release_dense_crf_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dense_crf_param)
  clear_has_dense_crf_param();
  ::caffe::DenseCRFParameter* temp = dense_crf_param_;
  dense_crf_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_dense_crf_param(::caffe::DenseCRFParameter* dense_crf_param) {
  delete dense_crf_param_;
  dense_crf_param_ = dense_crf_param;
  if (dense_crf_param) {
    set_has_dense_crf_param();
  } else {
    clear_has_dense_crf_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dense_crf_param)
}

// optional .caffe.PairImageDataParameter pair_image_data_param = 1019;
bool LayerParameter::has_pair_image_data_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void LayerParameter::set_has_pair_image_data_param() {
  _has_bits_[2] |= 0x00000100u;
}
void LayerParameter::clear_has_pair_image_data_param() {
  _has_bits_[2] &= ~0x00000100u;
}
void LayerParameter::clear_pair_image_data_param() {
  if (pair_image_data_param_ != NULL) pair_image_data_param_->::caffe::PairImageDataParameter::Clear();
  clear_has_pair_image_data_param();
}
const ::caffe::PairImageDataParameter& LayerParameter::pair_image_data_param() const {
  const ::caffe::PairImageDataParameter* p = pair_image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pair_image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PairImageDataParameter*>(
      &::caffe::_PairImageDataParameter_default_instance_);
}
::caffe::PairImageDataParameter* LayerParameter::mutable_pair_image_data_param() {
  set_has_pair_image_data_param();
  if (pair_image_data_param_ == NULL) {
    pair_image_data_param_ = new ::caffe::PairImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pair_image_data_param)
  return pair_image_data_param_;
}
::caffe::PairImageDataParameter* LayerParameter::release_pair_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pair_image_data_param)
  clear_has_pair_image_data_param();
  ::caffe::PairImageDataParameter* temp = pair_image_data_param_;
  pair_image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pair_image_data_param(::caffe::PairImageDataParameter* pair_image_data_param) {
  delete pair_image_data_param_;
  pair_image_data_param_ = pair_image_data_param;
  if (pair_image_data_param) {
    set_has_pair_image_data_param();
  } else {
    clear_has_pair_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pair_image_data_param)
}

// optional .caffe.TripletLossParameter triplet_loss_param = 1020;
bool LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[2] |= 0x00000200u;
}
void LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[2] &= ~0x00000200u;
}
void LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->::caffe::TripletLossParameter::Clear();
  clear_has_triplet_loss_param();
}
const ::caffe::TripletLossParameter& LayerParameter::triplet_loss_param() const {
  const ::caffe::TripletLossParameter* p = triplet_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.triplet_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletLossParameter*>(
      &::caffe::_TripletLossParameter_default_instance_);
}
::caffe::TripletLossParameter* LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.triplet_loss_param)
  return triplet_loss_param_;
}
::caffe::TripletLossParameter* LayerParameter::release_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.triplet_loss_param)
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  delete triplet_loss_param_;
  triplet_loss_param_ = triplet_loss_param;
  if (triplet_loss_param) {
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.triplet_loss_param)
}

// optional .caffe.L2NormParameter l2norm_param = 1021;
bool LayerParameter::has_l2norm_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void LayerParameter::set_has_l2norm_param() {
  _has_bits_[2] |= 0x00000400u;
}
void LayerParameter::clear_has_l2norm_param() {
  _has_bits_[2] &= ~0x00000400u;
}
void LayerParameter::clear_l2norm_param() {
  if (l2norm_param_ != NULL) l2norm_param_->::caffe::L2NormParameter::Clear();
  clear_has_l2norm_param();
}
const ::caffe::L2NormParameter& LayerParameter::l2norm_param() const {
  const ::caffe::L2NormParameter* p = l2norm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.l2norm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::L2NormParameter*>(
      &::caffe::_L2NormParameter_default_instance_);
}
::caffe::L2NormParameter* LayerParameter::mutable_l2norm_param() {
  set_has_l2norm_param();
  if (l2norm_param_ == NULL) {
    l2norm_param_ = new ::caffe::L2NormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.l2norm_param)
  return l2norm_param_;
}
::caffe::L2NormParameter* LayerParameter::release_l2norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.l2norm_param)
  clear_has_l2norm_param();
  ::caffe::L2NormParameter* temp = l2norm_param_;
  l2norm_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_l2norm_param(::caffe::L2NormParameter* l2norm_param) {
  delete l2norm_param_;
  l2norm_param_ = l2norm_param;
  if (l2norm_param) {
    set_has_l2norm_param();
  } else {
    clear_has_l2norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.l2norm_param)
}

// optional .caffe.PadParameter pad_param = 1022;
bool LayerParameter::has_pad_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void LayerParameter::set_has_pad_param() {
  _has_bits_[2] |= 0x00000800u;
}
void LayerParameter::clear_has_pad_param() {
  _has_bits_[2] &= ~0x00000800u;
}
void LayerParameter::clear_pad_param() {
  if (pad_param_ != NULL) pad_param_->::caffe::PadParameter::Clear();
  clear_has_pad_param();
}
const ::caffe::PadParameter& LayerParameter::pad_param() const {
  const ::caffe::PadParameter* p = pad_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pad_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PadParameter*>(
      &::caffe::_PadParameter_default_instance_);
}
::caffe::PadParameter* LayerParameter::mutable_pad_param() {
  set_has_pad_param();
  if (pad_param_ == NULL) {
    pad_param_ = new ::caffe::PadParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pad_param)
  return pad_param_;
}
::caffe::PadParameter* LayerParameter::release_pad_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pad_param)
  clear_has_pad_param();
  ::caffe::PadParameter* temp = pad_param_;
  pad_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pad_param(::caffe::PadParameter* pad_param) {
  delete pad_param_;
  pad_param_ = pad_param;
  if (pad_param) {
    set_has_pad_param();
  } else {
    clear_has_pad_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pad_param)
}

// optional .caffe.FacerecImageDataParameter facerec_image_data_param = 1023;
bool LayerParameter::has_facerec_image_data_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void LayerParameter::set_has_facerec_image_data_param() {
  _has_bits_[2] |= 0x00001000u;
}
void LayerParameter::clear_has_facerec_image_data_param() {
  _has_bits_[2] &= ~0x00001000u;
}
void LayerParameter::clear_facerec_image_data_param() {
  if (facerec_image_data_param_ != NULL) facerec_image_data_param_->::caffe::FacerecImageDataParameter::Clear();
  clear_has_facerec_image_data_param();
}
const ::caffe::FacerecImageDataParameter& LayerParameter::facerec_image_data_param() const {
  const ::caffe::FacerecImageDataParameter* p = facerec_image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.facerec_image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FacerecImageDataParameter*>(
      &::caffe::_FacerecImageDataParameter_default_instance_);
}
::caffe::FacerecImageDataParameter* LayerParameter::mutable_facerec_image_data_param() {
  set_has_facerec_image_data_param();
  if (facerec_image_data_param_ == NULL) {
    facerec_image_data_param_ = new ::caffe::FacerecImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.facerec_image_data_param)
  return facerec_image_data_param_;
}
::caffe::FacerecImageDataParameter* LayerParameter::release_facerec_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.facerec_image_data_param)
  clear_has_facerec_image_data_param();
  ::caffe::FacerecImageDataParameter* temp = facerec_image_data_param_;
  facerec_image_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_facerec_image_data_param(::caffe::FacerecImageDataParameter* facerec_image_data_param) {
  delete facerec_image_data_param_;
  facerec_image_data_param_ = facerec_image_data_param;
  if (facerec_image_data_param) {
    set_has_facerec_image_data_param();
  } else {
    clear_has_facerec_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.facerec_image_data_param)
}

// optional .caffe.TripletDataParameter triplet_data_param = 1024;
bool LayerParameter::has_triplet_data_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void LayerParameter::set_has_triplet_data_param() {
  _has_bits_[2] |= 0x00002000u;
}
void LayerParameter::clear_has_triplet_data_param() {
  _has_bits_[2] &= ~0x00002000u;
}
void LayerParameter::clear_triplet_data_param() {
  if (triplet_data_param_ != NULL) triplet_data_param_->::caffe::TripletDataParameter::Clear();
  clear_has_triplet_data_param();
}
const ::caffe::TripletDataParameter& LayerParameter::triplet_data_param() const {
  const ::caffe::TripletDataParameter* p = triplet_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.triplet_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletDataParameter*>(
      &::caffe::_TripletDataParameter_default_instance_);
}
::caffe::TripletDataParameter* LayerParameter::mutable_triplet_data_param() {
  set_has_triplet_data_param();
  if (triplet_data_param_ == NULL) {
    triplet_data_param_ = new ::caffe::TripletDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.triplet_data_param)
  return triplet_data_param_;
}
::caffe::TripletDataParameter* LayerParameter::release_triplet_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.triplet_data_param)
  clear_has_triplet_data_param();
  ::caffe::TripletDataParameter* temp = triplet_data_param_;
  triplet_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_triplet_data_param(::caffe::TripletDataParameter* triplet_data_param) {
  delete triplet_data_param_;
  triplet_data_param_ = triplet_data_param;
  if (triplet_data_param) {
    set_has_triplet_data_param();
  } else {
    clear_has_triplet_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.triplet_data_param)
}

// optional .caffe.SegmentDataParameter segment_data_param = 1025;
bool LayerParameter::has_segment_data_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void LayerParameter::set_has_segment_data_param() {
  _has_bits_[2] |= 0x00004000u;
}
void LayerParameter::clear_has_segment_data_param() {
  _has_bits_[2] &= ~0x00004000u;
}
void LayerParameter::clear_segment_data_param() {
  if (segment_data_param_ != NULL) segment_data_param_->::caffe::SegmentDataParameter::Clear();
  clear_has_segment_data_param();
}
const ::caffe::SegmentDataParameter& LayerParameter::segment_data_param() const {
  const ::caffe::SegmentDataParameter* p = segment_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.segment_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SegmentDataParameter*>(
      &::caffe::_SegmentDataParameter_default_instance_);
}
::caffe::SegmentDataParameter* LayerParameter::mutable_segment_data_param() {
  set_has_segment_data_param();
  if (segment_data_param_ == NULL) {
    segment_data_param_ = new ::caffe::SegmentDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.segment_data_param)
  return segment_data_param_;
}
::caffe::SegmentDataParameter* LayerParameter::release_segment_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.segment_data_param)
  clear_has_segment_data_param();
  ::caffe::SegmentDataParameter* temp = segment_data_param_;
  segment_data_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_segment_data_param(::caffe::SegmentDataParameter* segment_data_param) {
  delete segment_data_param_;
  segment_data_param_ = segment_data_param;
  if (segment_data_param) {
    set_has_segment_data_param();
  } else {
    clear_has_segment_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.segment_data_param)
}

// optional .caffe.LearnCRFParameter learn_crf_param = 1026;
bool LayerParameter::has_learn_crf_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void LayerParameter::set_has_learn_crf_param() {
  _has_bits_[2] |= 0x00008000u;
}
void LayerParameter::clear_has_learn_crf_param() {
  _has_bits_[2] &= ~0x00008000u;
}
void LayerParameter::clear_learn_crf_param() {
  if (learn_crf_param_ != NULL) learn_crf_param_->::caffe::LearnCRFParameter::Clear();
  clear_has_learn_crf_param();
}
const ::caffe::LearnCRFParameter& LayerParameter::learn_crf_param() const {
  const ::caffe::LearnCRFParameter* p = learn_crf_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.learn_crf_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LearnCRFParameter*>(
      &::caffe::_LearnCRFParameter_default_instance_);
}
::caffe::LearnCRFParameter* LayerParameter::mutable_learn_crf_param() {
  set_has_learn_crf_param();
  if (learn_crf_param_ == NULL) {
    learn_crf_param_ = new ::caffe::LearnCRFParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.learn_crf_param)
  return learn_crf_param_;
}
::caffe::LearnCRFParameter* LayerParameter::release_learn_crf_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.learn_crf_param)
  clear_has_learn_crf_param();
  ::caffe::LearnCRFParameter* temp = learn_crf_param_;
  learn_crf_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_learn_crf_param(::caffe::LearnCRFParameter* learn_crf_param) {
  delete learn_crf_param_;
  learn_crf_param_ = learn_crf_param;
  if (learn_crf_param) {
    set_has_learn_crf_param();
  } else {
    clear_has_learn_crf_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.learn_crf_param)
}

// optional .caffe.GateRecurrent2dParameter gaterecurrent2d_param = 1027;
bool LayerParameter::has_gaterecurrent2d_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void LayerParameter::set_has_gaterecurrent2d_param() {
  _has_bits_[2] |= 0x00010000u;
}
void LayerParameter::clear_has_gaterecurrent2d_param() {
  _has_bits_[2] &= ~0x00010000u;
}
void LayerParameter::clear_gaterecurrent2d_param() {
  if (gaterecurrent2d_param_ != NULL) gaterecurrent2d_param_->::caffe::GateRecurrent2dParameter::Clear();
  clear_has_gaterecurrent2d_param();
}
const ::caffe::GateRecurrent2dParameter& LayerParameter::gaterecurrent2d_param() const {
  const ::caffe::GateRecurrent2dParameter* p = gaterecurrent2d_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.gaterecurrent2d_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GateRecurrent2dParameter*>(
      &::caffe::_GateRecurrent2dParameter_default_instance_);
}
::caffe::GateRecurrent2dParameter* LayerParameter::mutable_gaterecurrent2d_param() {
  set_has_gaterecurrent2d_param();
  if (gaterecurrent2d_param_ == NULL) {
    gaterecurrent2d_param_ = new ::caffe::GateRecurrent2dParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.gaterecurrent2d_param)
  return gaterecurrent2d_param_;
}
::caffe::GateRecurrent2dParameter* LayerParameter::release_gaterecurrent2d_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.gaterecurrent2d_param)
  clear_has_gaterecurrent2d_param();
  ::caffe::GateRecurrent2dParameter* temp = gaterecurrent2d_param_;
  gaterecurrent2d_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_gaterecurrent2d_param(::caffe::GateRecurrent2dParameter* gaterecurrent2d_param) {
  delete gaterecurrent2d_param_;
  gaterecurrent2d_param_ = gaterecurrent2d_param;
  if (gaterecurrent2d_param) {
    set_has_gaterecurrent2d_param();
  } else {
    clear_has_gaterecurrent2d_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.gaterecurrent2d_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateRecurrent2dParameter::kNumOutputFieldNumber;
const int GateRecurrent2dParameter::kHorizontalFieldNumber;
const int GateRecurrent2dParameter::kReverseFieldNumber;
const int GateRecurrent2dParameter::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateRecurrent2dParameter::GateRecurrent2dParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateRecurrent2dParameter)
}
GateRecurrent2dParameter::GateRecurrent2dParameter(const GateRecurrent2dParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&active_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateRecurrent2dParameter)
}

void GateRecurrent2dParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&active_)) + sizeof(reverse_));
  horizontal_ = true;
}

GateRecurrent2dParameter::~GateRecurrent2dParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateRecurrent2dParameter)
  SharedDtor();
}

void GateRecurrent2dParameter::SharedDtor() {
}

void GateRecurrent2dParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRecurrent2dParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateRecurrent2dParameter& GateRecurrent2dParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateRecurrent2dParameter* GateRecurrent2dParameter::New(::google::protobuf::Arena* arena) const {
  GateRecurrent2dParameter* n = new GateRecurrent2dParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRecurrent2dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateRecurrent2dParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&active_)) + sizeof(reverse_));
    horizontal_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateRecurrent2dParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateRecurrent2dParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::GateRecurrent2dParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::GateRecurrent2dParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateRecurrent2dParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateRecurrent2dParameter)
  return false;
#undef DO_
}

void GateRecurrent2dParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateRecurrent2dParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateRecurrent2dParameter)
}

::google::protobuf::uint8* GateRecurrent2dParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateRecurrent2dParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateRecurrent2dParameter)
  return target;
}

size_t GateRecurrent2dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateRecurrent2dParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRecurrent2dParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateRecurrent2dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateRecurrent2dParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRecurrent2dParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateRecurrent2dParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateRecurrent2dParameter)
    MergeFrom(*source);
  }
}

void GateRecurrent2dParameter::MergeFrom(const GateRecurrent2dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateRecurrent2dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000004u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateRecurrent2dParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateRecurrent2dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRecurrent2dParameter::CopyFrom(const GateRecurrent2dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateRecurrent2dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRecurrent2dParameter::IsInitialized() const {
  return true;
}

void GateRecurrent2dParameter::Swap(GateRecurrent2dParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRecurrent2dParameter::InternalSwap(GateRecurrent2dParameter* other) {
  using std::swap;
  swap(active_, other->active_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(horizontal_, other->horizontal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRecurrent2dParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRecurrent2dParameter

// optional uint32 num_output = 1;
bool GateRecurrent2dParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateRecurrent2dParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000002u;
}
void GateRecurrent2dParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateRecurrent2dParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateRecurrent2dParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dParameter.num_output)
  return num_output_;
}
void GateRecurrent2dParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dParameter.num_output)
}

// optional bool horizontal = 16 [default = true];
bool GateRecurrent2dParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateRecurrent2dParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void GateRecurrent2dParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateRecurrent2dParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateRecurrent2dParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dParameter.horizontal)
  return horizontal_;
}
void GateRecurrent2dParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool GateRecurrent2dParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateRecurrent2dParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000004u;
}
void GateRecurrent2dParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateRecurrent2dParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateRecurrent2dParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dParameter.reverse)
  return reverse_;
}
void GateRecurrent2dParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dParameter.reverse)
}

// optional .caffe.GateRecurrent2dParameter.Active active = 18 [default = LINEAR];
bool GateRecurrent2dParameter::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateRecurrent2dParameter::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
void GateRecurrent2dParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateRecurrent2dParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::GateRecurrent2dParameter_Active GateRecurrent2dParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dParameter.active)
  return static_cast< ::caffe::GateRecurrent2dParameter_Active >(active_);
}
void GateRecurrent2dParameter::set_active(::caffe::GateRecurrent2dParameter_Active value) {
  assert(::caffe::GateRecurrent2dParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dParameter.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateRecurrent2dmaskParameter::kNumOutputFieldNumber;
const int GateRecurrent2dmaskParameter::kHorizontalFieldNumber;
const int GateRecurrent2dmaskParameter::kReverseFieldNumber;
const int GateRecurrent2dmaskParameter::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateRecurrent2dmaskParameter::GateRecurrent2dmaskParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateRecurrent2dmaskParameter)
}
GateRecurrent2dmaskParameter::GateRecurrent2dmaskParameter(const GateRecurrent2dmaskParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reverse_, &from.reverse_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&reverse_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateRecurrent2dmaskParameter)
}

void GateRecurrent2dmaskParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reverse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
  num_output_ = 16u;
  horizontal_ = true;
}

GateRecurrent2dmaskParameter::~GateRecurrent2dmaskParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateRecurrent2dmaskParameter)
  SharedDtor();
}

void GateRecurrent2dmaskParameter::SharedDtor() {
}

void GateRecurrent2dmaskParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRecurrent2dmaskParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateRecurrent2dmaskParameter& GateRecurrent2dmaskParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateRecurrent2dmaskParameter* GateRecurrent2dmaskParameter::New(::google::protobuf::Arena* arena) const {
  GateRecurrent2dmaskParameter* n = new GateRecurrent2dmaskParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRecurrent2dmaskParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateRecurrent2dmaskParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&reverse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
    num_output_ = 16u;
    horizontal_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateRecurrent2dmaskParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateRecurrent2dmaskParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dmaskParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::GateRecurrent2dmaskParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::GateRecurrent2dmaskParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateRecurrent2dmaskParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateRecurrent2dmaskParameter)
  return false;
#undef DO_
}

void GateRecurrent2dmaskParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateRecurrent2dmaskParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.GateRecurrent2dmaskParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateRecurrent2dmaskParameter)
}

::google::protobuf::uint8* GateRecurrent2dmaskParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateRecurrent2dmaskParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.GateRecurrent2dmaskParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateRecurrent2dmaskParameter)
  return target;
}

size_t GateRecurrent2dmaskParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateRecurrent2dmaskParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional .caffe.GateRecurrent2dmaskParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional uint32 num_output = 1 [default = 16];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRecurrent2dmaskParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateRecurrent2dmaskParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateRecurrent2dmaskParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRecurrent2dmaskParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateRecurrent2dmaskParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateRecurrent2dmaskParameter)
    MergeFrom(*source);
  }
}

void GateRecurrent2dmaskParameter::MergeFrom(const GateRecurrent2dmaskParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateRecurrent2dmaskParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateRecurrent2dmaskParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateRecurrent2dmaskParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRecurrent2dmaskParameter::CopyFrom(const GateRecurrent2dmaskParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateRecurrent2dmaskParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRecurrent2dmaskParameter::IsInitialized() const {
  return true;
}

void GateRecurrent2dmaskParameter::Swap(GateRecurrent2dmaskParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRecurrent2dmaskParameter::InternalSwap(GateRecurrent2dmaskParameter* other) {
  using std::swap;
  swap(reverse_, other->reverse_);
  swap(active_, other->active_);
  swap(num_output_, other->num_output_);
  swap(horizontal_, other->horizontal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRecurrent2dmaskParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRecurrent2dmaskParameter

// optional uint32 num_output = 1 [default = 16];
bool GateRecurrent2dmaskParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateRecurrent2dmaskParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void GateRecurrent2dmaskParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateRecurrent2dmaskParameter::clear_num_output() {
  num_output_ = 16u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateRecurrent2dmaskParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaskParameter.num_output)
  return num_output_;
}
void GateRecurrent2dmaskParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaskParameter.num_output)
}

// optional bool horizontal = 16 [default = true];
bool GateRecurrent2dmaskParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateRecurrent2dmaskParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void GateRecurrent2dmaskParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateRecurrent2dmaskParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateRecurrent2dmaskParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaskParameter.horizontal)
  return horizontal_;
}
void GateRecurrent2dmaskParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaskParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool GateRecurrent2dmaskParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateRecurrent2dmaskParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
void GateRecurrent2dmaskParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateRecurrent2dmaskParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateRecurrent2dmaskParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaskParameter.reverse)
  return reverse_;
}
void GateRecurrent2dmaskParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaskParameter.reverse)
}

// optional .caffe.GateRecurrent2dmaskParameter.Active active = 18 [default = LINEAR];
bool GateRecurrent2dmaskParameter::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateRecurrent2dmaskParameter::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
void GateRecurrent2dmaskParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateRecurrent2dmaskParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::GateRecurrent2dmaskParameter_Active GateRecurrent2dmaskParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaskParameter.active)
  return static_cast< ::caffe::GateRecurrent2dmaskParameter_Active >(active_);
}
void GateRecurrent2dmaskParameter::set_active(::caffe::GateRecurrent2dmaskParameter_Active value) {
  assert(::caffe::GateRecurrent2dmaskParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaskParameter.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateRecurrent2dnoindParameter::kNumOutputFieldNumber;
const int GateRecurrent2dnoindParameter::kHorizontalFieldNumber;
const int GateRecurrent2dnoindParameter::kReverseFieldNumber;
const int GateRecurrent2dnoindParameter::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateRecurrent2dnoindParameter::GateRecurrent2dnoindParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateRecurrent2dnoindParameter)
}
GateRecurrent2dnoindParameter::GateRecurrent2dnoindParameter(const GateRecurrent2dnoindParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reverse_, &from.reverse_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&reverse_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateRecurrent2dnoindParameter)
}

void GateRecurrent2dnoindParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reverse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
  num_output_ = 16u;
  horizontal_ = true;
}

GateRecurrent2dnoindParameter::~GateRecurrent2dnoindParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateRecurrent2dnoindParameter)
  SharedDtor();
}

void GateRecurrent2dnoindParameter::SharedDtor() {
}

void GateRecurrent2dnoindParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRecurrent2dnoindParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateRecurrent2dnoindParameter& GateRecurrent2dnoindParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateRecurrent2dnoindParameter* GateRecurrent2dnoindParameter::New(::google::protobuf::Arena* arena) const {
  GateRecurrent2dnoindParameter* n = new GateRecurrent2dnoindParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRecurrent2dnoindParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateRecurrent2dnoindParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&reverse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
    num_output_ = 16u;
    horizontal_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateRecurrent2dnoindParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateRecurrent2dnoindParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dnoindParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::GateRecurrent2dnoindParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::GateRecurrent2dnoindParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateRecurrent2dnoindParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateRecurrent2dnoindParameter)
  return false;
#undef DO_
}

void GateRecurrent2dnoindParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateRecurrent2dnoindParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.GateRecurrent2dnoindParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateRecurrent2dnoindParameter)
}

::google::protobuf::uint8* GateRecurrent2dnoindParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateRecurrent2dnoindParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.GateRecurrent2dnoindParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateRecurrent2dnoindParameter)
  return target;
}

size_t GateRecurrent2dnoindParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateRecurrent2dnoindParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional .caffe.GateRecurrent2dnoindParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional uint32 num_output = 1 [default = 16];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRecurrent2dnoindParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateRecurrent2dnoindParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateRecurrent2dnoindParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRecurrent2dnoindParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateRecurrent2dnoindParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateRecurrent2dnoindParameter)
    MergeFrom(*source);
  }
}

void GateRecurrent2dnoindParameter::MergeFrom(const GateRecurrent2dnoindParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateRecurrent2dnoindParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateRecurrent2dnoindParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateRecurrent2dnoindParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRecurrent2dnoindParameter::CopyFrom(const GateRecurrent2dnoindParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateRecurrent2dnoindParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRecurrent2dnoindParameter::IsInitialized() const {
  return true;
}

void GateRecurrent2dnoindParameter::Swap(GateRecurrent2dnoindParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRecurrent2dnoindParameter::InternalSwap(GateRecurrent2dnoindParameter* other) {
  using std::swap;
  swap(reverse_, other->reverse_);
  swap(active_, other->active_);
  swap(num_output_, other->num_output_);
  swap(horizontal_, other->horizontal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRecurrent2dnoindParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRecurrent2dnoindParameter

// optional uint32 num_output = 1 [default = 16];
bool GateRecurrent2dnoindParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateRecurrent2dnoindParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void GateRecurrent2dnoindParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateRecurrent2dnoindParameter::clear_num_output() {
  num_output_ = 16u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateRecurrent2dnoindParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dnoindParameter.num_output)
  return num_output_;
}
void GateRecurrent2dnoindParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dnoindParameter.num_output)
}

// optional bool horizontal = 16 [default = true];
bool GateRecurrent2dnoindParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateRecurrent2dnoindParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void GateRecurrent2dnoindParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateRecurrent2dnoindParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateRecurrent2dnoindParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dnoindParameter.horizontal)
  return horizontal_;
}
void GateRecurrent2dnoindParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dnoindParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool GateRecurrent2dnoindParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateRecurrent2dnoindParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
void GateRecurrent2dnoindParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateRecurrent2dnoindParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateRecurrent2dnoindParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dnoindParameter.reverse)
  return reverse_;
}
void GateRecurrent2dnoindParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dnoindParameter.reverse)
}

// optional .caffe.GateRecurrent2dnoindParameter.Active active = 18 [default = LINEAR];
bool GateRecurrent2dnoindParameter::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateRecurrent2dnoindParameter::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
void GateRecurrent2dnoindParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateRecurrent2dnoindParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::GateRecurrent2dnoindParameter_Active GateRecurrent2dnoindParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dnoindParameter.active)
  return static_cast< ::caffe::GateRecurrent2dnoindParameter_Active >(active_);
}
void GateRecurrent2dnoindParameter::set_active(::caffe::GateRecurrent2dnoindParameter_Active value) {
  assert(::caffe::GateRecurrent2dnoindParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dnoindParameter.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateRecurrent2dmaxParameter::kNumOutputFieldNumber;
const int GateRecurrent2dmaxParameter::kHorizontalFieldNumber;
const int GateRecurrent2dmaxParameter::kReverseFieldNumber;
const int GateRecurrent2dmaxParameter::kMaxidpoolFieldNumber;
const int GateRecurrent2dmaxParameter::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateRecurrent2dmaxParameter::GateRecurrent2dmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateRecurrent2dmaxParameter)
}
GateRecurrent2dmaxParameter::GateRecurrent2dmaxParameter(const GateRecurrent2dmaxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reverse_, &from.reverse_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxidpool_) -
    reinterpret_cast<char*>(&reverse_)) + sizeof(maxidpool_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateRecurrent2dmaxParameter)
}

void GateRecurrent2dmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reverse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
  num_output_ = 16u;
  horizontal_ = true;
  maxidpool_ = true;
}

GateRecurrent2dmaxParameter::~GateRecurrent2dmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateRecurrent2dmaxParameter)
  SharedDtor();
}

void GateRecurrent2dmaxParameter::SharedDtor() {
}

void GateRecurrent2dmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRecurrent2dmaxParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateRecurrent2dmaxParameter& GateRecurrent2dmaxParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateRecurrent2dmaxParameter* GateRecurrent2dmaxParameter::New(::google::protobuf::Arena* arena) const {
  GateRecurrent2dmaxParameter* n = new GateRecurrent2dmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRecurrent2dmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateRecurrent2dmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&reverse_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&reverse_)) + sizeof(active_));
    num_output_ = 16u;
    horizontal_ = true;
    maxidpool_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateRecurrent2dmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateRecurrent2dmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1 [default = 16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrent2dmaxParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::GateRecurrent2dmaxParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::GateRecurrent2dmaxParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool maxidpool = 19 [default = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_maxidpool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maxidpool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateRecurrent2dmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateRecurrent2dmaxParameter)
  return false;
#undef DO_
}

void GateRecurrent2dmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateRecurrent2dmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.GateRecurrent2dmaxParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  // optional bool maxidpool = 19 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->maxidpool(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateRecurrent2dmaxParameter)
}

::google::protobuf::uint8* GateRecurrent2dmaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateRecurrent2dmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.GateRecurrent2dmaxParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  // optional bool maxidpool = 19 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->maxidpool(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateRecurrent2dmaxParameter)
  return target;
}

size_t GateRecurrent2dmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateRecurrent2dmaxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional .caffe.GateRecurrent2dmaxParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional uint32 num_output = 1 [default = 16];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

    // optional bool maxidpool = 19 [default = true];
    if (has_maxidpool()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRecurrent2dmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateRecurrent2dmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateRecurrent2dmaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRecurrent2dmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateRecurrent2dmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateRecurrent2dmaxParameter)
    MergeFrom(*source);
  }
}

void GateRecurrent2dmaxParameter::MergeFrom(const GateRecurrent2dmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateRecurrent2dmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxidpool_ = from.maxidpool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateRecurrent2dmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateRecurrent2dmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRecurrent2dmaxParameter::CopyFrom(const GateRecurrent2dmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateRecurrent2dmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRecurrent2dmaxParameter::IsInitialized() const {
  return true;
}

void GateRecurrent2dmaxParameter::Swap(GateRecurrent2dmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRecurrent2dmaxParameter::InternalSwap(GateRecurrent2dmaxParameter* other) {
  using std::swap;
  swap(reverse_, other->reverse_);
  swap(active_, other->active_);
  swap(num_output_, other->num_output_);
  swap(horizontal_, other->horizontal_);
  swap(maxidpool_, other->maxidpool_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRecurrent2dmaxParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRecurrent2dmaxParameter

// optional uint32 num_output = 1 [default = 16];
bool GateRecurrent2dmaxParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateRecurrent2dmaxParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void GateRecurrent2dmaxParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateRecurrent2dmaxParameter::clear_num_output() {
  num_output_ = 16u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateRecurrent2dmaxParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaxParameter.num_output)
  return num_output_;
}
void GateRecurrent2dmaxParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaxParameter.num_output)
}

// optional bool horizontal = 16 [default = true];
bool GateRecurrent2dmaxParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateRecurrent2dmaxParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000008u;
}
void GateRecurrent2dmaxParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateRecurrent2dmaxParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateRecurrent2dmaxParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaxParameter.horizontal)
  return horizontal_;
}
void GateRecurrent2dmaxParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaxParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool GateRecurrent2dmaxParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateRecurrent2dmaxParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
void GateRecurrent2dmaxParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateRecurrent2dmaxParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateRecurrent2dmaxParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaxParameter.reverse)
  return reverse_;
}
void GateRecurrent2dmaxParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaxParameter.reverse)
}

// optional bool maxidpool = 19 [default = true];
bool GateRecurrent2dmaxParameter::has_maxidpool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GateRecurrent2dmaxParameter::set_has_maxidpool() {
  _has_bits_[0] |= 0x00000010u;
}
void GateRecurrent2dmaxParameter::clear_has_maxidpool() {
  _has_bits_[0] &= ~0x00000010u;
}
void GateRecurrent2dmaxParameter::clear_maxidpool() {
  maxidpool_ = true;
  clear_has_maxidpool();
}
bool GateRecurrent2dmaxParameter::maxidpool() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaxParameter.maxidpool)
  return maxidpool_;
}
void GateRecurrent2dmaxParameter::set_maxidpool(bool value) {
  set_has_maxidpool();
  maxidpool_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaxParameter.maxidpool)
}

// optional .caffe.GateRecurrent2dmaxParameter.Active active = 18 [default = LINEAR];
bool GateRecurrent2dmaxParameter::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateRecurrent2dmaxParameter::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
void GateRecurrent2dmaxParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateRecurrent2dmaxParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::GateRecurrent2dmaxParameter_Active GateRecurrent2dmaxParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrent2dmaxParameter.active)
  return static_cast< ::caffe::GateRecurrent2dmaxParameter_Active >(active_);
}
void GateRecurrent2dmaxParameter::set_active(::caffe::GateRecurrent2dmaxParameter_Active value) {
  assert(::caffe::GateRecurrent2dmaxParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrent2dmaxParameter.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearnCRFParameter::kKernelSizeFieldNumber;
const int LearnCRFParameter::kDilationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearnCRFParameter::LearnCRFParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LearnCRFParameter)
}
LearnCRFParameter::LearnCRFParameter(const LearnCRFParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kernel_size_, &from.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&dilation_) -
    reinterpret_cast<char*>(&kernel_size_)) + sizeof(dilation_));
  // @@protoc_insertion_point(copy_constructor:caffe.LearnCRFParameter)
}

void LearnCRFParameter::SharedCtor() {
  _cached_size_ = 0;
  kernel_size_ = 0;
  dilation_ = 1;
}

LearnCRFParameter::~LearnCRFParameter() {
  // @@protoc_insertion_point(destructor:caffe.LearnCRFParameter)
  SharedDtor();
}

void LearnCRFParameter::SharedDtor() {
}

void LearnCRFParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnCRFParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearnCRFParameter& LearnCRFParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearnCRFParameter* LearnCRFParameter::New(::google::protobuf::Arena* arena) const {
  LearnCRFParameter* n = new LearnCRFParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LearnCRFParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LearnCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    kernel_size_ = 0;
    dilation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearnCRFParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LearnCRFParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kernel_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dilation = 18 [default = 1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_dilation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dilation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LearnCRFParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LearnCRFParameter)
  return false;
#undef DO_
}

void LearnCRFParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LearnCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kernel_size(), output);
  }

  // optional int32 dilation = 18 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->dilation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LearnCRFParameter)
}

::google::protobuf::uint8* LearnCRFParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LearnCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kernel_size(), target);
  }

  // optional int32 dilation = 18 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->dilation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LearnCRFParameter)
  return target;
}

size_t LearnCRFParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LearnCRFParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 kernel_size = 1;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 dilation = 18 [default = 1];
    if (has_dilation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dilation());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnCRFParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LearnCRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LearnCRFParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearnCRFParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LearnCRFParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LearnCRFParameter)
    MergeFrom(*source);
  }
}

void LearnCRFParameter::MergeFrom(const LearnCRFParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LearnCRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      dilation_ = from.dilation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LearnCRFParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LearnCRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnCRFParameter::CopyFrom(const LearnCRFParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LearnCRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnCRFParameter::IsInitialized() const {
  return true;
}

void LearnCRFParameter::Swap(LearnCRFParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearnCRFParameter::InternalSwap(LearnCRFParameter* other) {
  using std::swap;
  swap(kernel_size_, other->kernel_size_);
  swap(dilation_, other->dilation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearnCRFParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearnCRFParameter

// optional int32 kernel_size = 1;
bool LearnCRFParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LearnCRFParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000001u;
}
void LearnCRFParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void LearnCRFParameter::clear_kernel_size() {
  kernel_size_ = 0;
  clear_has_kernel_size();
}
::google::protobuf::int32 LearnCRFParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.LearnCRFParameter.kernel_size)
  return kernel_size_;
}
void LearnCRFParameter::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LearnCRFParameter.kernel_size)
}

// optional int32 dilation = 18 [default = 1];
bool LearnCRFParameter::has_dilation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LearnCRFParameter::set_has_dilation() {
  _has_bits_[0] |= 0x00000002u;
}
void LearnCRFParameter::clear_has_dilation() {
  _has_bits_[0] &= ~0x00000002u;
}
void LearnCRFParameter::clear_dilation() {
  dilation_ = 1;
  clear_has_dilation();
}
::google::protobuf::int32 LearnCRFParameter::dilation() const {
  // @@protoc_insertion_point(field_get:caffe.LearnCRFParameter.dilation)
  return dilation_;
}
void LearnCRFParameter::set_dilation(::google::protobuf::int32 value) {
  set_has_dilation();
  dilation_ = value;
  // @@protoc_insertion_point(field_set:caffe.LearnCRFParameter.dilation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopInfo::kChannelsFieldNumber;
const int TopInfo::kWidthFieldNumber;
const int TopInfo::kHeightFieldNumber;
const int TopInfo::kMeanFieldNumber;
const int TopInfo::kResizeTypeFieldNumber;
const int TopInfo::kDataScaleFieldNumber;
const int TopInfo::kSrcTypeFieldNumber;
const int TopInfo::kRadiusFieldNumber;
const int TopInfo::kGammaDistribAlphaFieldNumber;
const int TopInfo::kGammaDistribGammaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopInfo::TopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TopInfo)
}
TopInfo::TopInfo(const TopInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mean_(from.mean_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamma_distrib_alpha_) -
    reinterpret_cast<char*>(&width_)) + sizeof(gamma_distrib_alpha_));
  // @@protoc_insertion_point(copy_constructor:caffe.TopInfo)
}

void TopInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamma_distrib_gamma_) -
      reinterpret_cast<char*>(&width_)) + sizeof(gamma_distrib_gamma_));
  channels_ = 1;
  resize_type_ = 1;
  data_scale_ = 1;
  gamma_distrib_alpha_ = -1;
}

TopInfo::~TopInfo() {
  // @@protoc_insertion_point(destructor:caffe.TopInfo)
  SharedDtor();
}

void TopInfo::SharedDtor() {
}

void TopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopInfo::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopInfo& TopInfo::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TopInfo* TopInfo::New(::google::protobuf::Arena* arena) const {
  TopInfo* n = new TopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamma_distrib_gamma_) -
        reinterpret_cast<char*>(&width_)) + sizeof(gamma_distrib_gamma_));
    channels_ = 1;
    resize_type_ = 1;
    data_scale_ = 1;
  }
  gamma_distrib_alpha_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_mean())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TopInfo_ResizeType_IsValid(value)) {
            set_resize_type(static_cast< ::caffe::TopInfo_ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float data_scale = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_data_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TopInfo_SrcType_IsValid(value)) {
            set_src_type(static_cast< ::caffe::TopInfo_SrcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radius = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma_distrib_alpha = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_gamma_distrib_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_distrib_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma_distrib_gamma = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_gamma_distrib_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_distrib_gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TopInfo)
  return false;
#undef DO_
}

void TopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // repeated float mean = 4;
  for (int i = 0, n = this->mean_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->mean(i), output);
  }

  // optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->resize_type(), output);
  }

  // optional float data_scale = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->data_scale(), output);
  }

  // optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->src_type(), output);
  }

  // optional int32 radius = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->radius(), output);
  }

  // optional float gamma_distrib_alpha = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gamma_distrib_alpha(), output);
  }

  // optional float gamma_distrib_gamma = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gamma_distrib_gamma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TopInfo)
}

::google::protobuf::uint8* TopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // repeated float mean = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->mean_, target);

  // optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->resize_type(), target);
  }

  // optional float data_scale = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->data_scale(), target);
  }

  // optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->src_type(), target);
  }

  // optional int32 radius = 8 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->radius(), target);
  }

  // optional float gamma_distrib_alpha = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gamma_distrib_alpha(), target);
  }

  // optional float gamma_distrib_gamma = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gamma_distrib_gamma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TopInfo)
  return target;
}

size_t TopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TopInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float mean = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mean_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
    if (has_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_type());
    }

    // optional int32 radius = 8 [default = 0];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional float gamma_distrib_gamma = 10 [default = 0];
    if (has_gamma_distrib_gamma()) {
      total_size += 1 + 4;
    }

    // optional int32 channels = 1 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
    if (has_resize_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resize_type());
    }

    // optional float data_scale = 6 [default = 1];
    if (has_data_scale()) {
      total_size += 1 + 4;
    }

  }
  // optional float gamma_distrib_alpha = 9 [default = -1];
  if (has_gamma_distrib_alpha()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TopInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TopInfo)
    MergeFrom(*source);
  }
}

void TopInfo::MergeFrom(const TopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_.MergeFrom(from.mean_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      src_type_ = from.src_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      gamma_distrib_gamma_ = from.gamma_distrib_gamma_;
    }
    if (cached_has_bits & 0x00000020u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000040u) {
      resize_type_ = from.resize_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_scale_ = from.data_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_gamma_distrib_alpha(from.gamma_distrib_alpha());
  }
}

void TopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopInfo::CopyFrom(const TopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopInfo::IsInitialized() const {
  return true;
}

void TopInfo::Swap(TopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopInfo::InternalSwap(TopInfo* other) {
  using std::swap;
  mean_.InternalSwap(&other->mean_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(src_type_, other->src_type_);
  swap(radius_, other->radius_);
  swap(gamma_distrib_gamma_, other->gamma_distrib_gamma_);
  swap(channels_, other->channels_);
  swap(resize_type_, other->resize_type_);
  swap(data_scale_, other->data_scale_);
  swap(gamma_distrib_alpha_, other->gamma_distrib_alpha_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopInfo::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopInfo

// optional int32 channels = 1 [default = 1];
bool TopInfo::has_channels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TopInfo::set_has_channels() {
  _has_bits_[0] |= 0x00000020u;
}
void TopInfo::clear_has_channels() {
  _has_bits_[0] &= ~0x00000020u;
}
void TopInfo::clear_channels() {
  channels_ = 1;
  clear_has_channels();
}
::google::protobuf::int32 TopInfo::channels() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.channels)
  return channels_;
}
void TopInfo::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.channels)
}

// optional int32 width = 2;
bool TopInfo::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopInfo::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void TopInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 TopInfo::width() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.width)
  return width_;
}
void TopInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.width)
}

// optional int32 height = 3;
bool TopInfo::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopInfo::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void TopInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 TopInfo::height() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.height)
  return height_;
}
void TopInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.height)
}

// repeated float mean = 4;
int TopInfo::mean_size() const {
  return mean_.size();
}
void TopInfo::clear_mean() {
  mean_.Clear();
}
float TopInfo::mean(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.mean)
  return mean_.Get(index);
}
void TopInfo::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TopInfo.mean)
}
void TopInfo::add_mean(float value) {
  mean_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TopInfo.mean)
}
const ::google::protobuf::RepeatedField< float >&
TopInfo::mean() const {
  // @@protoc_insertion_point(field_list:caffe.TopInfo.mean)
  return mean_;
}
::google::protobuf::RepeatedField< float >*
TopInfo::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TopInfo.mean)
  return &mean_;
}

// optional .caffe.TopInfo.ResizeType resize_type = 5 [default = NEAREST];
bool TopInfo::has_resize_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TopInfo::set_has_resize_type() {
  _has_bits_[0] |= 0x00000040u;
}
void TopInfo::clear_has_resize_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void TopInfo::clear_resize_type() {
  resize_type_ = 1;
  clear_has_resize_type();
}
::caffe::TopInfo_ResizeType TopInfo::resize_type() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.resize_type)
  return static_cast< ::caffe::TopInfo_ResizeType >(resize_type_);
}
void TopInfo::set_resize_type(::caffe::TopInfo_ResizeType value) {
  assert(::caffe::TopInfo_ResizeType_IsValid(value));
  set_has_resize_type();
  resize_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.resize_type)
}

// optional float data_scale = 6 [default = 1];
bool TopInfo::has_data_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TopInfo::set_has_data_scale() {
  _has_bits_[0] |= 0x00000080u;
}
void TopInfo::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
void TopInfo::clear_data_scale() {
  data_scale_ = 1;
  clear_has_data_scale();
}
float TopInfo::data_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.data_scale)
  return data_scale_;
}
void TopInfo::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.data_scale)
}

// optional .caffe.TopInfo.SrcType src_type = 7 [default = IMAGE];
bool TopInfo::has_src_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopInfo::set_has_src_type() {
  _has_bits_[0] |= 0x00000004u;
}
void TopInfo::clear_has_src_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopInfo::clear_src_type() {
  src_type_ = 0;
  clear_has_src_type();
}
::caffe::TopInfo_SrcType TopInfo::src_type() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.src_type)
  return static_cast< ::caffe::TopInfo_SrcType >(src_type_);
}
void TopInfo::set_src_type(::caffe::TopInfo_SrcType value) {
  assert(::caffe::TopInfo_SrcType_IsValid(value));
  set_has_src_type();
  src_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.src_type)
}

// optional int32 radius = 8 [default = 0];
bool TopInfo::has_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TopInfo::set_has_radius() {
  _has_bits_[0] |= 0x00000008u;
}
void TopInfo::clear_has_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
void TopInfo::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
::google::protobuf::int32 TopInfo::radius() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.radius)
  return radius_;
}
void TopInfo::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.radius)
}

// optional float gamma_distrib_alpha = 9 [default = -1];
bool TopInfo::has_gamma_distrib_alpha() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TopInfo::set_has_gamma_distrib_alpha() {
  _has_bits_[0] |= 0x00000100u;
}
void TopInfo::clear_has_gamma_distrib_alpha() {
  _has_bits_[0] &= ~0x00000100u;
}
void TopInfo::clear_gamma_distrib_alpha() {
  gamma_distrib_alpha_ = -1;
  clear_has_gamma_distrib_alpha();
}
float TopInfo::gamma_distrib_alpha() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.gamma_distrib_alpha)
  return gamma_distrib_alpha_;
}
void TopInfo::set_gamma_distrib_alpha(float value) {
  set_has_gamma_distrib_alpha();
  gamma_distrib_alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.gamma_distrib_alpha)
}

// optional float gamma_distrib_gamma = 10 [default = 0];
bool TopInfo::has_gamma_distrib_gamma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TopInfo::set_has_gamma_distrib_gamma() {
  _has_bits_[0] |= 0x00000010u;
}
void TopInfo::clear_has_gamma_distrib_gamma() {
  _has_bits_[0] &= ~0x00000010u;
}
void TopInfo::clear_gamma_distrib_gamma() {
  gamma_distrib_gamma_ = 0;
  clear_has_gamma_distrib_gamma();
}
float TopInfo::gamma_distrib_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.TopInfo.gamma_distrib_gamma)
  return gamma_distrib_gamma_;
}
void TopInfo::set_gamma_distrib_gamma(float value) {
  set_has_gamma_distrib_gamma();
  gamma_distrib_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.TopInfo.gamma_distrib_gamma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> SegmentDataParameter::_default_source_splitflag_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentDataParameter::kSourceFieldNumber;
const int SegmentDataParameter::kDataFolderFieldNumber;
const int SegmentDataParameter::kTopinfoFieldNumber;
const int SegmentDataParameter::kBatchSizeFieldNumber;
const int SegmentDataParameter::kShuffleFieldNumber;
const int SegmentDataParameter::kUseDistribFieldNumber;
const int SegmentDataParameter::kDistribAngleFieldNumber;
const int SegmentDataParameter::kDistribScaleFieldNumber;
const int SegmentDataParameter::kDistribXFieldNumber;
const int SegmentDataParameter::kDistribYFieldNumber;
const int SegmentDataParameter::kSourceSplitflagFieldNumber;
const int SegmentDataParameter::kUseFlipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentDataParameter::SegmentDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SegmentDataParameter)
}
SegmentDataParameter::SegmentDataParameter(const SegmentDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      topinfo_(from.topinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_folder()) {
    data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
  source_splitflag_.UnsafeSetDefault(&SegmentDataParameter::_default_source_splitflag_.get());
  if (from.has_source_splitflag()) {
    source_splitflag_.AssignWithDefault(&SegmentDataParameter::_default_source_splitflag_.get(), from.source_splitflag_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&distrib_scale_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(distrib_scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.SegmentDataParameter)
}

void SegmentDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_splitflag_.UnsafeSetDefault(&SegmentDataParameter::_default_source_splitflag_.get());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distrib_y_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(distrib_y_));
  shuffle_ = true;
  distrib_scale_ = 1;
}

SegmentDataParameter::~SegmentDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.SegmentDataParameter)
  SharedDtor();
}

void SegmentDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_splitflag_.DestroyNoArena(&SegmentDataParameter::_default_source_splitflag_.get());
}

void SegmentDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SegmentDataParameter& SegmentDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SegmentDataParameter* SegmentDataParameter::New(::google::protobuf::Arena* arena) const {
  SegmentDataParameter* n = new SegmentDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SegmentDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SegmentDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_folder_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!source_splitflag_.IsDefault(&SegmentDataParameter::_default_source_splitflag_.get()));
      (*source_splitflag_.UnsafeRawStringPointer())->assign(*&SegmentDataParameter::_default_source_splitflag_.get());
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_flip_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(use_flip_));
  }
  if (cached_has_bits & 1792u) {
    distrib_y_ = 0;
    shuffle_ = true;
    distrib_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SegmentDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SegmentDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SegmentDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_folder = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_folder().data(), static_cast<int>(this->data_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SegmentDataParameter.data_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.TopInfo topinfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_distrib = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_use_distrib();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_distrib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distrib_angle = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_distrib_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distrib_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distrib_scale = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_distrib_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distrib_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distrib_x = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_distrib_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distrib_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distrib_y = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_distrib_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distrib_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_splitflag = 11 [default = "||"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_splitflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.SegmentDataParameter.source_splitflag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_flip = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_use_flip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SegmentDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SegmentDataParameter)
  return false;
#undef DO_
}

void SegmentDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SegmentDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string data_folder = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.data_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_folder(), output);
  }

  // repeated .caffe.TopInfo topinfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topinfo(static_cast<int>(i)), output);
  }

  // optional int32 batch_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->batch_size(), output);
  }

  // optional bool shuffle = 5 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shuffle(), output);
  }

  // optional bool use_distrib = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_distrib(), output);
  }

  // optional float distrib_angle = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distrib_angle(), output);
  }

  // optional float distrib_scale = 8 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->distrib_scale(), output);
  }

  // optional float distrib_x = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->distrib_x(), output);
  }

  // optional float distrib_y = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->distrib_y(), output);
  }

  // optional string source_splitflag = 11 [default = "||"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.source_splitflag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->source_splitflag(), output);
  }

  // optional bool use_flip = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_flip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SegmentDataParameter)
}

::google::protobuf::uint8* SegmentDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SegmentDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string data_folder = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.data_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_folder(), target);
  }

  // repeated .caffe.TopInfo topinfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->topinfo(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 batch_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->batch_size(), target);
  }

  // optional bool shuffle = 5 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shuffle(), target);
  }

  // optional bool use_distrib = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_distrib(), target);
  }

  // optional float distrib_angle = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->distrib_angle(), target);
  }

  // optional float distrib_scale = 8 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->distrib_scale(), target);
  }

  // optional float distrib_x = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->distrib_x(), target);
  }

  // optional float distrib_y = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->distrib_y(), target);
  }

  // optional string source_splitflag = 11 [default = "||"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_splitflag().data(), static_cast<int>(this->source_splitflag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.SegmentDataParameter.source_splitflag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->source_splitflag(), target);
  }

  // optional bool use_flip = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_flip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SegmentDataParameter)
  return target;
}

size_t SegmentDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SegmentDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.TopInfo topinfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->topinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topinfo(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string data_folder = 2 [default = ""];
    if (has_data_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_folder());
    }

    // optional string source_splitflag = 11 [default = "||"];
    if (has_source_splitflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_splitflag());
    }

    // optional int32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional float distrib_angle = 7 [default = 0];
    if (has_distrib_angle()) {
      total_size += 1 + 4;
    }

    // optional float distrib_x = 9 [default = 0];
    if (has_distrib_x()) {
      total_size += 1 + 4;
    }

    // optional bool use_distrib = 6 [default = false];
    if (has_use_distrib()) {
      total_size += 1 + 1;
    }

    // optional bool use_flip = 12 [default = false];
    if (has_use_flip()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float distrib_y = 10 [default = 0];
    if (has_distrib_y()) {
      total_size += 1 + 4;
    }

    // optional bool shuffle = 5 [default = true];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional float distrib_scale = 8 [default = 1];
    if (has_distrib_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SegmentDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SegmentDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SegmentDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SegmentDataParameter)
    MergeFrom(*source);
  }
}

void SegmentDataParameter::MergeFrom(const SegmentDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SegmentDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topinfo_.MergeFrom(from.topinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_folder();
      data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source_splitflag();
      source_splitflag_.AssignWithDefault(&SegmentDataParameter::_default_source_splitflag_.get(), from.source_splitflag_);
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      distrib_angle_ = from.distrib_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      distrib_x_ = from.distrib_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_distrib_ = from.use_distrib_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_flip_ = from.use_flip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      distrib_y_ = from.distrib_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000400u) {
      distrib_scale_ = from.distrib_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SegmentDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SegmentDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentDataParameter::CopyFrom(const SegmentDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SegmentDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentDataParameter::IsInitialized() const {
  return true;
}

void SegmentDataParameter::Swap(SegmentDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentDataParameter::InternalSwap(SegmentDataParameter* other) {
  using std::swap;
  topinfo_.InternalSwap(&other->topinfo_);
  source_.Swap(&other->source_);
  data_folder_.Swap(&other->data_folder_);
  source_splitflag_.Swap(&other->source_splitflag_);
  swap(batch_size_, other->batch_size_);
  swap(distrib_angle_, other->distrib_angle_);
  swap(distrib_x_, other->distrib_x_);
  swap(use_distrib_, other->use_distrib_);
  swap(use_flip_, other->use_flip_);
  swap(distrib_y_, other->distrib_y_);
  swap(shuffle_, other->shuffle_);
  swap(distrib_scale_, other->distrib_scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SegmentDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SegmentDataParameter

// optional string source = 1;
bool SegmentDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SegmentDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void SegmentDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void SegmentDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& SegmentDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.source)
  return source_.GetNoArena();
}
void SegmentDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.source)
}
#if LANG_CXX11
void SegmentDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SegmentDataParameter.source)
}
#endif
void SegmentDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SegmentDataParameter.source)
}
void SegmentDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SegmentDataParameter.source)
}
::std::string* SegmentDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.SegmentDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SegmentDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.SegmentDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SegmentDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.SegmentDataParameter.source)
}

// optional string data_folder = 2 [default = ""];
bool SegmentDataParameter::has_data_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SegmentDataParameter::set_has_data_folder() {
  _has_bits_[0] |= 0x00000002u;
}
void SegmentDataParameter::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
void SegmentDataParameter::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_folder();
}
const ::std::string& SegmentDataParameter::data_folder() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.data_folder)
  return data_folder_.GetNoArena();
}
void SegmentDataParameter::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.data_folder)
}
#if LANG_CXX11
void SegmentDataParameter::set_data_folder(::std::string&& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SegmentDataParameter.data_folder)
}
#endif
void SegmentDataParameter::set_data_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SegmentDataParameter.data_folder)
}
void SegmentDataParameter::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SegmentDataParameter.data_folder)
}
::std::string* SegmentDataParameter::mutable_data_folder() {
  set_has_data_folder();
  // @@protoc_insertion_point(field_mutable:caffe.SegmentDataParameter.data_folder)
  return data_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SegmentDataParameter::release_data_folder() {
  // @@protoc_insertion_point(field_release:caffe.SegmentDataParameter.data_folder)
  clear_has_data_folder();
  return data_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SegmentDataParameter::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder != NULL) {
    set_has_data_folder();
  } else {
    clear_has_data_folder();
  }
  data_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.SegmentDataParameter.data_folder)
}

// repeated .caffe.TopInfo topinfo = 3;
int SegmentDataParameter::topinfo_size() const {
  return topinfo_.size();
}
void SegmentDataParameter::clear_topinfo() {
  topinfo_.Clear();
}
const ::caffe::TopInfo& SegmentDataParameter::topinfo(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.topinfo)
  return topinfo_.Get(index);
}
::caffe::TopInfo* SegmentDataParameter::mutable_topinfo(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SegmentDataParameter.topinfo)
  return topinfo_.Mutable(index);
}
::caffe::TopInfo* SegmentDataParameter::add_topinfo() {
  // @@protoc_insertion_point(field_add:caffe.SegmentDataParameter.topinfo)
  return topinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >*
SegmentDataParameter::mutable_topinfo() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SegmentDataParameter.topinfo)
  return &topinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::TopInfo >&
SegmentDataParameter::topinfo() const {
  // @@protoc_insertion_point(field_list:caffe.SegmentDataParameter.topinfo)
  return topinfo_;
}

// optional int32 batch_size = 4;
bool SegmentDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SegmentDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void SegmentDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void SegmentDataParameter::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
::google::protobuf::int32 SegmentDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.batch_size)
  return batch_size_;
}
void SegmentDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.batch_size)
}

// optional bool shuffle = 5 [default = true];
bool SegmentDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SegmentDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000200u;
}
void SegmentDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000200u;
}
void SegmentDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
bool SegmentDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.shuffle)
  return shuffle_;
}
void SegmentDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.shuffle)
}

// optional bool use_distrib = 6 [default = false];
bool SegmentDataParameter::has_use_distrib() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SegmentDataParameter::set_has_use_distrib() {
  _has_bits_[0] |= 0x00000040u;
}
void SegmentDataParameter::clear_has_use_distrib() {
  _has_bits_[0] &= ~0x00000040u;
}
void SegmentDataParameter::clear_use_distrib() {
  use_distrib_ = false;
  clear_has_use_distrib();
}
bool SegmentDataParameter::use_distrib() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.use_distrib)
  return use_distrib_;
}
void SegmentDataParameter::set_use_distrib(bool value) {
  set_has_use_distrib();
  use_distrib_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.use_distrib)
}

// optional float distrib_angle = 7 [default = 0];
bool SegmentDataParameter::has_distrib_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SegmentDataParameter::set_has_distrib_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void SegmentDataParameter::clear_has_distrib_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void SegmentDataParameter::clear_distrib_angle() {
  distrib_angle_ = 0;
  clear_has_distrib_angle();
}
float SegmentDataParameter::distrib_angle() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.distrib_angle)
  return distrib_angle_;
}
void SegmentDataParameter::set_distrib_angle(float value) {
  set_has_distrib_angle();
  distrib_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.distrib_angle)
}

// optional float distrib_scale = 8 [default = 1];
bool SegmentDataParameter::has_distrib_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SegmentDataParameter::set_has_distrib_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void SegmentDataParameter::clear_has_distrib_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void SegmentDataParameter::clear_distrib_scale() {
  distrib_scale_ = 1;
  clear_has_distrib_scale();
}
float SegmentDataParameter::distrib_scale() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.distrib_scale)
  return distrib_scale_;
}
void SegmentDataParameter::set_distrib_scale(float value) {
  set_has_distrib_scale();
  distrib_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.distrib_scale)
}

// optional float distrib_x = 9 [default = 0];
bool SegmentDataParameter::has_distrib_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SegmentDataParameter::set_has_distrib_x() {
  _has_bits_[0] |= 0x00000020u;
}
void SegmentDataParameter::clear_has_distrib_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void SegmentDataParameter::clear_distrib_x() {
  distrib_x_ = 0;
  clear_has_distrib_x();
}
float SegmentDataParameter::distrib_x() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.distrib_x)
  return distrib_x_;
}
void SegmentDataParameter::set_distrib_x(float value) {
  set_has_distrib_x();
  distrib_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.distrib_x)
}

// optional float distrib_y = 10 [default = 0];
bool SegmentDataParameter::has_distrib_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SegmentDataParameter::set_has_distrib_y() {
  _has_bits_[0] |= 0x00000100u;
}
void SegmentDataParameter::clear_has_distrib_y() {
  _has_bits_[0] &= ~0x00000100u;
}
void SegmentDataParameter::clear_distrib_y() {
  distrib_y_ = 0;
  clear_has_distrib_y();
}
float SegmentDataParameter::distrib_y() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.distrib_y)
  return distrib_y_;
}
void SegmentDataParameter::set_distrib_y(float value) {
  set_has_distrib_y();
  distrib_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.distrib_y)
}

// optional string source_splitflag = 11 [default = "||"];
bool SegmentDataParameter::has_source_splitflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SegmentDataParameter::set_has_source_splitflag() {
  _has_bits_[0] |= 0x00000004u;
}
void SegmentDataParameter::clear_has_source_splitflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void SegmentDataParameter::clear_source_splitflag() {
  source_splitflag_.ClearToDefaultNoArena(&SegmentDataParameter::_default_source_splitflag_.get());
  clear_has_source_splitflag();
}
const ::std::string& SegmentDataParameter::source_splitflag() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.source_splitflag)
  return source_splitflag_.GetNoArena();
}
void SegmentDataParameter::set_source_splitflag(const ::std::string& value) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&SegmentDataParameter::_default_source_splitflag_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.source_splitflag)
}
#if LANG_CXX11
void SegmentDataParameter::set_source_splitflag(::std::string&& value) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(
    &SegmentDataParameter::_default_source_splitflag_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SegmentDataParameter.source_splitflag)
}
#endif
void SegmentDataParameter::set_source_splitflag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&SegmentDataParameter::_default_source_splitflag_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SegmentDataParameter.source_splitflag)
}
void SegmentDataParameter::set_source_splitflag(const char* value, size_t size) {
  set_has_source_splitflag();
  source_splitflag_.SetNoArena(&SegmentDataParameter::_default_source_splitflag_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SegmentDataParameter.source_splitflag)
}
::std::string* SegmentDataParameter::mutable_source_splitflag() {
  set_has_source_splitflag();
  // @@protoc_insertion_point(field_mutable:caffe.SegmentDataParameter.source_splitflag)
  return source_splitflag_.MutableNoArena(&SegmentDataParameter::_default_source_splitflag_.get());
}
::std::string* SegmentDataParameter::release_source_splitflag() {
  // @@protoc_insertion_point(field_release:caffe.SegmentDataParameter.source_splitflag)
  clear_has_source_splitflag();
  return source_splitflag_.ReleaseNoArena(&SegmentDataParameter::_default_source_splitflag_.get());
}
void SegmentDataParameter::set_allocated_source_splitflag(::std::string* source_splitflag) {
  if (source_splitflag != NULL) {
    set_has_source_splitflag();
  } else {
    clear_has_source_splitflag();
  }
  source_splitflag_.SetAllocatedNoArena(&SegmentDataParameter::_default_source_splitflag_.get(), source_splitflag);
  // @@protoc_insertion_point(field_set_allocated:caffe.SegmentDataParameter.source_splitflag)
}

// optional bool use_flip = 12 [default = false];
bool SegmentDataParameter::has_use_flip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SegmentDataParameter::set_has_use_flip() {
  _has_bits_[0] |= 0x00000080u;
}
void SegmentDataParameter::clear_has_use_flip() {
  _has_bits_[0] &= ~0x00000080u;
}
void SegmentDataParameter::clear_use_flip() {
  use_flip_ = false;
  clear_has_use_flip();
}
bool SegmentDataParameter::use_flip() const {
  // @@protoc_insertion_point(field_get:caffe.SegmentDataParameter.use_flip)
  return use_flip_;
}
void SegmentDataParameter::set_use_flip(bool value) {
  set_has_use_flip();
  use_flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegmentDataParameter.use_flip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripletDataSubParameter::kSourceFieldNumber;
const int TripletDataSubParameter::kSourceFilenameFieldNumber;
const int TripletDataSubParameter::kSourceLandmarkFieldNumber;
const int TripletDataSubParameter::kImgsFolderFieldNumber;
const int TripletDataSubParameter::kSubjectsPerIterFieldNumber;
const int TripletDataSubParameter::kSamplesPerSubjectFieldNumber;
const int TripletDataSubParameter::kO3SubjectsPerIterFieldNumber;
const int TripletDataSubParameter::kO3SamplesPerSubjectFieldNumber;
const int TripletDataSubParameter::kKeyPointsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripletDataSubParameter::TripletDataSubParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TripletDataSubParameter)
}
TripletDataSubParameter::TripletDataSubParameter(const TripletDataSubParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  imgs_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgs_folder()) {
    imgs_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgs_folder_);
  }
  source_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_filename()) {
    source_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_filename_);
  }
  source_landmark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_landmark()) {
    source_landmark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_landmark_);
  }
  ::memcpy(&o3_subjects_per_iter_, &from.o3_subjects_per_iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&samples_per_subject_) -
    reinterpret_cast<char*>(&o3_subjects_per_iter_)) + sizeof(samples_per_subject_));
  // @@protoc_insertion_point(copy_constructor:caffe.TripletDataSubParameter)
}

void TripletDataSubParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgs_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_landmark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&o3_subjects_per_iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_points_count_) -
      reinterpret_cast<char*>(&o3_subjects_per_iter_)) + sizeof(key_points_count_));
  o3_samples_per_subject_ = 1;
  subjects_per_iter_ = 10;
  samples_per_subject_ = 10;
}

TripletDataSubParameter::~TripletDataSubParameter() {
  // @@protoc_insertion_point(destructor:caffe.TripletDataSubParameter)
  SharedDtor();
}

void TripletDataSubParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgs_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_landmark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TripletDataSubParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripletDataSubParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripletDataSubParameter& TripletDataSubParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TripletDataSubParameter* TripletDataSubParameter::New(::google::protobuf::Arena* arena) const {
  TripletDataSubParameter* n = new TripletDataSubParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripletDataSubParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TripletDataSubParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!imgs_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgs_folder_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!source_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_filename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!source_landmark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_landmark_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&o3_subjects_per_iter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_points_count_) -
        reinterpret_cast<char*>(&o3_subjects_per_iter_)) + sizeof(key_points_count_));
    o3_samples_per_subject_ = 1;
    subjects_per_iter_ = 10;
  }
  samples_per_subject_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TripletDataSubParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TripletDataSubParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TripletDataSubParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imgs_folder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgs_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgs_folder().data(), static_cast<int>(this->imgs_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TripletDataSubParameter.imgs_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 subjects_per_iter = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_subjects_per_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subjects_per_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 samples_per_subject = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_samples_per_subject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samples_per_subject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 o3_subjects_per_iter = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_o3_subjects_per_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &o3_subjects_per_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 o3_samples_per_subject = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_o3_samples_per_subject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &o3_samples_per_subject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_filename = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_filename().data(), static_cast<int>(this->source_filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TripletDataSubParameter.source_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_landmark = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_landmark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_landmark().data(), static_cast<int>(this->source_landmark().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TripletDataSubParameter.source_landmark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_points_count = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_key_points_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_points_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TripletDataSubParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TripletDataSubParameter)
  return false;
#undef DO_
}

void TripletDataSubParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TripletDataSubParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string imgs_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgs_folder().data(), static_cast<int>(this->imgs_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.imgs_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imgs_folder(), output);
  }

  // optional int32 subjects_per_iter = 3 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subjects_per_iter(), output);
  }

  // optional int32 samples_per_subject = 4 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->samples_per_subject(), output);
  }

  // optional int32 o3_subjects_per_iter = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->o3_subjects_per_iter(), output);
  }

  // optional int32 o3_samples_per_subject = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->o3_samples_per_subject(), output);
  }

  // optional string source_filename = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_filename().data(), static_cast<int>(this->source_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->source_filename(), output);
  }

  // optional string source_landmark = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_landmark().data(), static_cast<int>(this->source_landmark().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source_landmark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->source_landmark(), output);
  }

  // optional int32 key_points_count = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->key_points_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TripletDataSubParameter)
}

::google::protobuf::uint8* TripletDataSubParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TripletDataSubParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string imgs_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgs_folder().data(), static_cast<int>(this->imgs_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.imgs_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imgs_folder(), target);
  }

  // optional int32 subjects_per_iter = 3 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subjects_per_iter(), target);
  }

  // optional int32 samples_per_subject = 4 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->samples_per_subject(), target);
  }

  // optional int32 o3_subjects_per_iter = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->o3_subjects_per_iter(), target);
  }

  // optional int32 o3_samples_per_subject = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->o3_samples_per_subject(), target);
  }

  // optional string source_filename = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_filename().data(), static_cast<int>(this->source_filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->source_filename(), target);
  }

  // optional string source_landmark = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_landmark().data(), static_cast<int>(this->source_landmark().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TripletDataSubParameter.source_landmark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->source_landmark(), target);
  }

  // optional int32 key_points_count = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->key_points_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TripletDataSubParameter)
  return target;
}

size_t TripletDataSubParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TripletDataSubParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string imgs_folder = 2;
    if (has_imgs_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgs_folder());
    }

    // optional string source_filename = 8;
    if (has_source_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_filename());
    }

    // optional string source_landmark = 9;
    if (has_source_landmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_landmark());
    }

    // optional int32 o3_subjects_per_iter = 5 [default = 0];
    if (has_o3_subjects_per_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->o3_subjects_per_iter());
    }

    // optional int32 key_points_count = 10 [default = 0];
    if (has_key_points_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_points_count());
    }

    // optional int32 o3_samples_per_subject = 6 [default = 1];
    if (has_o3_samples_per_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->o3_samples_per_subject());
    }

    // optional int32 subjects_per_iter = 3 [default = 10];
    if (has_subjects_per_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subjects_per_iter());
    }

  }
  // optional int32 samples_per_subject = 4 [default = 10];
  if (has_samples_per_subject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->samples_per_subject());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripletDataSubParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TripletDataSubParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TripletDataSubParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripletDataSubParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TripletDataSubParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TripletDataSubParameter)
    MergeFrom(*source);
  }
}

void TripletDataSubParameter::MergeFrom(const TripletDataSubParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TripletDataSubParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_imgs_folder();
      imgs_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgs_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source_filename();
      source_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_source_landmark();
      source_landmark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_landmark_);
    }
    if (cached_has_bits & 0x00000010u) {
      o3_subjects_per_iter_ = from.o3_subjects_per_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      key_points_count_ = from.key_points_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      o3_samples_per_subject_ = from.o3_samples_per_subject_;
    }
    if (cached_has_bits & 0x00000080u) {
      subjects_per_iter_ = from.subjects_per_iter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_samples_per_subject(from.samples_per_subject());
  }
}

void TripletDataSubParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TripletDataSubParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripletDataSubParameter::CopyFrom(const TripletDataSubParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TripletDataSubParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletDataSubParameter::IsInitialized() const {
  return true;
}

void TripletDataSubParameter::Swap(TripletDataSubParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripletDataSubParameter::InternalSwap(TripletDataSubParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  imgs_folder_.Swap(&other->imgs_folder_);
  source_filename_.Swap(&other->source_filename_);
  source_landmark_.Swap(&other->source_landmark_);
  swap(o3_subjects_per_iter_, other->o3_subjects_per_iter_);
  swap(key_points_count_, other->key_points_count_);
  swap(o3_samples_per_subject_, other->o3_samples_per_subject_);
  swap(subjects_per_iter_, other->subjects_per_iter_);
  swap(samples_per_subject_, other->samples_per_subject_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripletDataSubParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripletDataSubParameter

// optional string source = 1;
bool TripletDataSubParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TripletDataSubParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void TripletDataSubParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void TripletDataSubParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& TripletDataSubParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.source)
  return source_.GetNoArena();
}
void TripletDataSubParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.source)
}
#if LANG_CXX11
void TripletDataSubParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TripletDataSubParameter.source)
}
#endif
void TripletDataSubParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TripletDataSubParameter.source)
}
void TripletDataSubParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TripletDataSubParameter.source)
}
::std::string* TripletDataSubParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataSubParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripletDataSubParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataSubParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripletDataSubParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataSubParameter.source)
}

// optional string source_filename = 8;
bool TripletDataSubParameter::has_source_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TripletDataSubParameter::set_has_source_filename() {
  _has_bits_[0] |= 0x00000004u;
}
void TripletDataSubParameter::clear_has_source_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
void TripletDataSubParameter::clear_source_filename() {
  source_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_filename();
}
const ::std::string& TripletDataSubParameter::source_filename() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.source_filename)
  return source_filename_.GetNoArena();
}
void TripletDataSubParameter::set_source_filename(const ::std::string& value) {
  set_has_source_filename();
  source_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.source_filename)
}
#if LANG_CXX11
void TripletDataSubParameter::set_source_filename(::std::string&& value) {
  set_has_source_filename();
  source_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TripletDataSubParameter.source_filename)
}
#endif
void TripletDataSubParameter::set_source_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_filename();
  source_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TripletDataSubParameter.source_filename)
}
void TripletDataSubParameter::set_source_filename(const char* value, size_t size) {
  set_has_source_filename();
  source_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TripletDataSubParameter.source_filename)
}
::std::string* TripletDataSubParameter::mutable_source_filename() {
  set_has_source_filename();
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataSubParameter.source_filename)
  return source_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripletDataSubParameter::release_source_filename() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataSubParameter.source_filename)
  clear_has_source_filename();
  return source_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripletDataSubParameter::set_allocated_source_filename(::std::string* source_filename) {
  if (source_filename != NULL) {
    set_has_source_filename();
  } else {
    clear_has_source_filename();
  }
  source_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_filename);
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataSubParameter.source_filename)
}

// optional string source_landmark = 9;
bool TripletDataSubParameter::has_source_landmark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TripletDataSubParameter::set_has_source_landmark() {
  _has_bits_[0] |= 0x00000008u;
}
void TripletDataSubParameter::clear_has_source_landmark() {
  _has_bits_[0] &= ~0x00000008u;
}
void TripletDataSubParameter::clear_source_landmark() {
  source_landmark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_landmark();
}
const ::std::string& TripletDataSubParameter::source_landmark() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.source_landmark)
  return source_landmark_.GetNoArena();
}
void TripletDataSubParameter::set_source_landmark(const ::std::string& value) {
  set_has_source_landmark();
  source_landmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.source_landmark)
}
#if LANG_CXX11
void TripletDataSubParameter::set_source_landmark(::std::string&& value) {
  set_has_source_landmark();
  source_landmark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TripletDataSubParameter.source_landmark)
}
#endif
void TripletDataSubParameter::set_source_landmark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_landmark();
  source_landmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TripletDataSubParameter.source_landmark)
}
void TripletDataSubParameter::set_source_landmark(const char* value, size_t size) {
  set_has_source_landmark();
  source_landmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TripletDataSubParameter.source_landmark)
}
::std::string* TripletDataSubParameter::mutable_source_landmark() {
  set_has_source_landmark();
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataSubParameter.source_landmark)
  return source_landmark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripletDataSubParameter::release_source_landmark() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataSubParameter.source_landmark)
  clear_has_source_landmark();
  return source_landmark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripletDataSubParameter::set_allocated_source_landmark(::std::string* source_landmark) {
  if (source_landmark != NULL) {
    set_has_source_landmark();
  } else {
    clear_has_source_landmark();
  }
  source_landmark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_landmark);
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataSubParameter.source_landmark)
}

// optional string imgs_folder = 2;
bool TripletDataSubParameter::has_imgs_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TripletDataSubParameter::set_has_imgs_folder() {
  _has_bits_[0] |= 0x00000002u;
}
void TripletDataSubParameter::clear_has_imgs_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
void TripletDataSubParameter::clear_imgs_folder() {
  imgs_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgs_folder();
}
const ::std::string& TripletDataSubParameter::imgs_folder() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.imgs_folder)
  return imgs_folder_.GetNoArena();
}
void TripletDataSubParameter::set_imgs_folder(const ::std::string& value) {
  set_has_imgs_folder();
  imgs_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.imgs_folder)
}
#if LANG_CXX11
void TripletDataSubParameter::set_imgs_folder(::std::string&& value) {
  set_has_imgs_folder();
  imgs_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TripletDataSubParameter.imgs_folder)
}
#endif
void TripletDataSubParameter::set_imgs_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgs_folder();
  imgs_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TripletDataSubParameter.imgs_folder)
}
void TripletDataSubParameter::set_imgs_folder(const char* value, size_t size) {
  set_has_imgs_folder();
  imgs_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TripletDataSubParameter.imgs_folder)
}
::std::string* TripletDataSubParameter::mutable_imgs_folder() {
  set_has_imgs_folder();
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataSubParameter.imgs_folder)
  return imgs_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TripletDataSubParameter::release_imgs_folder() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataSubParameter.imgs_folder)
  clear_has_imgs_folder();
  return imgs_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TripletDataSubParameter::set_allocated_imgs_folder(::std::string* imgs_folder) {
  if (imgs_folder != NULL) {
    set_has_imgs_folder();
  } else {
    clear_has_imgs_folder();
  }
  imgs_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgs_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataSubParameter.imgs_folder)
}

// optional int32 subjects_per_iter = 3 [default = 10];
bool TripletDataSubParameter::has_subjects_per_iter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TripletDataSubParameter::set_has_subjects_per_iter() {
  _has_bits_[0] |= 0x00000080u;
}
void TripletDataSubParameter::clear_has_subjects_per_iter() {
  _has_bits_[0] &= ~0x00000080u;
}
void TripletDataSubParameter::clear_subjects_per_iter() {
  subjects_per_iter_ = 10;
  clear_has_subjects_per_iter();
}
::google::protobuf::int32 TripletDataSubParameter::subjects_per_iter() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.subjects_per_iter)
  return subjects_per_iter_;
}
void TripletDataSubParameter::set_subjects_per_iter(::google::protobuf::int32 value) {
  set_has_subjects_per_iter();
  subjects_per_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.subjects_per_iter)
}

// optional int32 samples_per_subject = 4 [default = 10];
bool TripletDataSubParameter::has_samples_per_subject() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TripletDataSubParameter::set_has_samples_per_subject() {
  _has_bits_[0] |= 0x00000100u;
}
void TripletDataSubParameter::clear_has_samples_per_subject() {
  _has_bits_[0] &= ~0x00000100u;
}
void TripletDataSubParameter::clear_samples_per_subject() {
  samples_per_subject_ = 10;
  clear_has_samples_per_subject();
}
::google::protobuf::int32 TripletDataSubParameter::samples_per_subject() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.samples_per_subject)
  return samples_per_subject_;
}
void TripletDataSubParameter::set_samples_per_subject(::google::protobuf::int32 value) {
  set_has_samples_per_subject();
  samples_per_subject_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.samples_per_subject)
}

// optional int32 o3_subjects_per_iter = 5 [default = 0];
bool TripletDataSubParameter::has_o3_subjects_per_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TripletDataSubParameter::set_has_o3_subjects_per_iter() {
  _has_bits_[0] |= 0x00000010u;
}
void TripletDataSubParameter::clear_has_o3_subjects_per_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
void TripletDataSubParameter::clear_o3_subjects_per_iter() {
  o3_subjects_per_iter_ = 0;
  clear_has_o3_subjects_per_iter();
}
::google::protobuf::int32 TripletDataSubParameter::o3_subjects_per_iter() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.o3_subjects_per_iter)
  return o3_subjects_per_iter_;
}
void TripletDataSubParameter::set_o3_subjects_per_iter(::google::protobuf::int32 value) {
  set_has_o3_subjects_per_iter();
  o3_subjects_per_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.o3_subjects_per_iter)
}

// optional int32 o3_samples_per_subject = 6 [default = 1];
bool TripletDataSubParameter::has_o3_samples_per_subject() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TripletDataSubParameter::set_has_o3_samples_per_subject() {
  _has_bits_[0] |= 0x00000040u;
}
void TripletDataSubParameter::clear_has_o3_samples_per_subject() {
  _has_bits_[0] &= ~0x00000040u;
}
void TripletDataSubParameter::clear_o3_samples_per_subject() {
  o3_samples_per_subject_ = 1;
  clear_has_o3_samples_per_subject();
}
::google::protobuf::int32 TripletDataSubParameter::o3_samples_per_subject() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.o3_samples_per_subject)
  return o3_samples_per_subject_;
}
void TripletDataSubParameter::set_o3_samples_per_subject(::google::protobuf::int32 value) {
  set_has_o3_samples_per_subject();
  o3_samples_per_subject_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.o3_samples_per_subject)
}

// optional int32 key_points_count = 10 [default = 0];
bool TripletDataSubParameter::has_key_points_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TripletDataSubParameter::set_has_key_points_count() {
  _has_bits_[0] |= 0x00000020u;
}
void TripletDataSubParameter::clear_has_key_points_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void TripletDataSubParameter::clear_key_points_count() {
  key_points_count_ = 0;
  clear_has_key_points_count();
}
::google::protobuf::int32 TripletDataSubParameter::key_points_count() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataSubParameter.key_points_count)
  return key_points_count_;
}
void TripletDataSubParameter::set_key_points_count(::google::protobuf::int32 value) {
  set_has_key_points_count();
  key_points_count_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataSubParameter.key_points_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripletDataParameter::kTrainSubParamFieldNumber;
const int TripletDataParameter::kTestSubParamFieldNumber;
const int TripletDataParameter::kHeightFieldNumber;
const int TripletDataParameter::kWidthFieldNumber;
const int TripletDataParameter::kIsColorFieldNumber;
const int TripletDataParameter::kFlipFieldNumber;
const int TripletDataParameter::kImageInfoFieldNumber;
const int TripletDataParameter::kAffineImageParamFieldNumber;
const int TripletDataParameter::kMeanvalueFieldNumber;
const int TripletDataParameter::kDatascaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripletDataParameter::TripletDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TripletDataParameter)
}
TripletDataParameter::TripletDataParameter(const TripletDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      affine_image_param_(from.affine_image_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_train_sub_param()) {
    train_sub_param_ = new ::caffe::TripletDataSubParameter(*from.train_sub_param_);
  } else {
    train_sub_param_ = NULL;
  }
  if (from.has_test_sub_param()) {
    test_sub_param_ = new ::caffe::TripletDataSubParameter(*from.test_sub_param_);
  } else {
    test_sub_param_ = NULL;
  }
  if (from.has_image_info()) {
    image_info_ = new ::caffe::ImageInfo(*from.image_info_);
  } else {
    image_info_ = NULL;
  }
  ::memcpy(&flip_, &from.flip_,
    static_cast<size_t>(reinterpret_cast<char*>(&datascale_) -
    reinterpret_cast<char*>(&flip_)) + sizeof(datascale_));
  // @@protoc_insertion_point(copy_constructor:caffe.TripletDataParameter)
}

void TripletDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&train_sub_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meanvalue_) -
      reinterpret_cast<char*>(&train_sub_param_)) + sizeof(meanvalue_));
  height_ = 40;
  width_ = 40;
  is_color_ = true;
  datascale_ = 1;
}

TripletDataParameter::~TripletDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.TripletDataParameter)
  SharedDtor();
}

void TripletDataParameter::SharedDtor() {
  if (this != internal_default_instance()) delete train_sub_param_;
  if (this != internal_default_instance()) delete test_sub_param_;
  if (this != internal_default_instance()) delete image_info_;
}

void TripletDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripletDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripletDataParameter& TripletDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TripletDataParameter* TripletDataParameter::New(::google::protobuf::Arena* arena) const {
  TripletDataParameter* n = new TripletDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripletDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TripletDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affine_image_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(train_sub_param_ != NULL);
      train_sub_param_->::caffe::TripletDataSubParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(test_sub_param_ != NULL);
      test_sub_param_->::caffe::TripletDataSubParameter::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(image_info_ != NULL);
      image_info_->::caffe::ImageInfo::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&flip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&meanvalue_) -
        reinterpret_cast<char*>(&flip_)) + sizeof(meanvalue_));
    height_ = 40;
    width_ = 40;
    is_color_ = true;
  }
  datascale_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TripletDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TripletDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TripletDataSubParameter train_sub_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_sub_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TripletDataSubParameter test_sub_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_sub_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 3 [default = 40];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4 [default = 40];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_color = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flip = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_flip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.AffineImageParameter affine_image_param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_affine_image_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageInfo image_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float meanvalue = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_meanvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float datascale = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_datascale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &datascale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TripletDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TripletDataParameter)
  return false;
#undef DO_
}

void TripletDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TripletDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TripletDataSubParameter train_sub_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->train_sub_param_, output);
  }

  // optional .caffe.TripletDataSubParameter test_sub_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->test_sub_param_, output);
  }

  // optional int32 height = 3 [default = 40];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional int32 width = 4 [default = 40];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional bool is_color = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_color(), output);
  }

  // optional bool flip = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->flip(), output);
  }

  // repeated .caffe.AffineImageParameter affine_image_param = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_image_param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->affine_image_param(static_cast<int>(i)), output);
  }

  // optional .caffe.ImageInfo image_info = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->image_info_, output);
  }

  // optional float meanvalue = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->meanvalue(), output);
  }

  // optional float datascale = 10 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->datascale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TripletDataParameter)
}

::google::protobuf::uint8* TripletDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TripletDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TripletDataSubParameter train_sub_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->train_sub_param_, deterministic, target);
  }

  // optional .caffe.TripletDataSubParameter test_sub_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->test_sub_param_, deterministic, target);
  }

  // optional int32 height = 3 [default = 40];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional int32 width = 4 [default = 40];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional bool is_color = 5 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_color(), target);
  }

  // optional bool flip = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->flip(), target);
  }

  // repeated .caffe.AffineImageParameter affine_image_param = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_image_param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->affine_image_param(static_cast<int>(i)), deterministic, target);
  }

  // optional .caffe.ImageInfo image_info = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->image_info_, deterministic, target);
  }

  // optional float meanvalue = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->meanvalue(), target);
  }

  // optional float datascale = 10 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->datascale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TripletDataParameter)
  return target;
}

size_t TripletDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TripletDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.AffineImageParameter affine_image_param = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->affine_image_param_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affine_image_param(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.TripletDataSubParameter train_sub_param = 1;
    if (has_train_sub_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->train_sub_param_);
    }

    // optional .caffe.TripletDataSubParameter test_sub_param = 2;
    if (has_test_sub_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->test_sub_param_);
    }

    // optional .caffe.ImageInfo image_info = 8;
    if (has_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_info_);
    }

    // optional bool flip = 6 [default = false];
    if (has_flip()) {
      total_size += 1 + 1;
    }

    // optional float meanvalue = 9 [default = 0];
    if (has_meanvalue()) {
      total_size += 1 + 4;
    }

    // optional int32 height = 3 [default = 40];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 4 [default = 40];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional bool is_color = 5 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

  }
  // optional float datascale = 10 [default = 1];
  if (has_datascale()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripletDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TripletDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TripletDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripletDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TripletDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TripletDataParameter)
    MergeFrom(*source);
  }
}

void TripletDataParameter::MergeFrom(const TripletDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TripletDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affine_image_param_.MergeFrom(from.affine_image_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_train_sub_param()->::caffe::TripletDataSubParameter::MergeFrom(from.train_sub_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_test_sub_param()->::caffe::TripletDataSubParameter::MergeFrom(from.test_sub_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_image_info()->::caffe::ImageInfo::MergeFrom(from.image_info());
    }
    if (cached_has_bits & 0x00000008u) {
      flip_ = from.flip_;
    }
    if (cached_has_bits & 0x00000010u) {
      meanvalue_ = from.meanvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_color_ = from.is_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_datascale(from.datascale());
  }
}

void TripletDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TripletDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripletDataParameter::CopyFrom(const TripletDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TripletDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletDataParameter::IsInitialized() const {
  return true;
}

void TripletDataParameter::Swap(TripletDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripletDataParameter::InternalSwap(TripletDataParameter* other) {
  using std::swap;
  affine_image_param_.InternalSwap(&other->affine_image_param_);
  swap(train_sub_param_, other->train_sub_param_);
  swap(test_sub_param_, other->test_sub_param_);
  swap(image_info_, other->image_info_);
  swap(flip_, other->flip_);
  swap(meanvalue_, other->meanvalue_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(is_color_, other->is_color_);
  swap(datascale_, other->datascale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripletDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripletDataParameter

// optional .caffe.TripletDataSubParameter train_sub_param = 1;
bool TripletDataParameter::has_train_sub_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TripletDataParameter::set_has_train_sub_param() {
  _has_bits_[0] |= 0x00000001u;
}
void TripletDataParameter::clear_has_train_sub_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void TripletDataParameter::clear_train_sub_param() {
  if (train_sub_param_ != NULL) train_sub_param_->::caffe::TripletDataSubParameter::Clear();
  clear_has_train_sub_param();
}
const ::caffe::TripletDataSubParameter& TripletDataParameter::train_sub_param() const {
  const ::caffe::TripletDataSubParameter* p = train_sub_param_;
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.train_sub_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletDataSubParameter*>(
      &::caffe::_TripletDataSubParameter_default_instance_);
}
::caffe::TripletDataSubParameter* TripletDataParameter::mutable_train_sub_param() {
  set_has_train_sub_param();
  if (train_sub_param_ == NULL) {
    train_sub_param_ = new ::caffe::TripletDataSubParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataParameter.train_sub_param)
  return train_sub_param_;
}
::caffe::TripletDataSubParameter* TripletDataParameter::release_train_sub_param() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataParameter.train_sub_param)
  clear_has_train_sub_param();
  ::caffe::TripletDataSubParameter* temp = train_sub_param_;
  train_sub_param_ = NULL;
  return temp;
}
void TripletDataParameter::set_allocated_train_sub_param(::caffe::TripletDataSubParameter* train_sub_param) {
  delete train_sub_param_;
  train_sub_param_ = train_sub_param;
  if (train_sub_param) {
    set_has_train_sub_param();
  } else {
    clear_has_train_sub_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataParameter.train_sub_param)
}

// optional .caffe.TripletDataSubParameter test_sub_param = 2;
bool TripletDataParameter::has_test_sub_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TripletDataParameter::set_has_test_sub_param() {
  _has_bits_[0] |= 0x00000002u;
}
void TripletDataParameter::clear_has_test_sub_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void TripletDataParameter::clear_test_sub_param() {
  if (test_sub_param_ != NULL) test_sub_param_->::caffe::TripletDataSubParameter::Clear();
  clear_has_test_sub_param();
}
const ::caffe::TripletDataSubParameter& TripletDataParameter::test_sub_param() const {
  const ::caffe::TripletDataSubParameter* p = test_sub_param_;
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.test_sub_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletDataSubParameter*>(
      &::caffe::_TripletDataSubParameter_default_instance_);
}
::caffe::TripletDataSubParameter* TripletDataParameter::mutable_test_sub_param() {
  set_has_test_sub_param();
  if (test_sub_param_ == NULL) {
    test_sub_param_ = new ::caffe::TripletDataSubParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataParameter.test_sub_param)
  return test_sub_param_;
}
::caffe::TripletDataSubParameter* TripletDataParameter::release_test_sub_param() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataParameter.test_sub_param)
  clear_has_test_sub_param();
  ::caffe::TripletDataSubParameter* temp = test_sub_param_;
  test_sub_param_ = NULL;
  return temp;
}
void TripletDataParameter::set_allocated_test_sub_param(::caffe::TripletDataSubParameter* test_sub_param) {
  delete test_sub_param_;
  test_sub_param_ = test_sub_param;
  if (test_sub_param) {
    set_has_test_sub_param();
  } else {
    clear_has_test_sub_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataParameter.test_sub_param)
}

// optional int32 height = 3 [default = 40];
bool TripletDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TripletDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void TripletDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void TripletDataParameter::clear_height() {
  height_ = 40;
  clear_has_height();
}
::google::protobuf::int32 TripletDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.height)
  return height_;
}
void TripletDataParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.height)
}

// optional int32 width = 4 [default = 40];
bool TripletDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TripletDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void TripletDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void TripletDataParameter::clear_width() {
  width_ = 40;
  clear_has_width();
}
::google::protobuf::int32 TripletDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.width)
  return width_;
}
void TripletDataParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.width)
}

// optional bool is_color = 5 [default = true];
bool TripletDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TripletDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000080u;
}
void TripletDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000080u;
}
void TripletDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
bool TripletDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.is_color)
  return is_color_;
}
void TripletDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.is_color)
}

// optional bool flip = 6 [default = false];
bool TripletDataParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TripletDataParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000008u;
}
void TripletDataParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000008u;
}
void TripletDataParameter::clear_flip() {
  flip_ = false;
  clear_has_flip();
}
bool TripletDataParameter::flip() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.flip)
  return flip_;
}
void TripletDataParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.flip)
}

// optional .caffe.ImageInfo image_info = 8;
bool TripletDataParameter::has_image_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TripletDataParameter::set_has_image_info() {
  _has_bits_[0] |= 0x00000004u;
}
void TripletDataParameter::clear_has_image_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void TripletDataParameter::clear_image_info() {
  if (image_info_ != NULL) image_info_->::caffe::ImageInfo::Clear();
  clear_has_image_info();
}
const ::caffe::ImageInfo& TripletDataParameter::image_info() const {
  const ::caffe::ImageInfo* p = image_info_;
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.image_info)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageInfo*>(
      &::caffe::_ImageInfo_default_instance_);
}
::caffe::ImageInfo* TripletDataParameter::mutable_image_info() {
  set_has_image_info();
  if (image_info_ == NULL) {
    image_info_ = new ::caffe::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataParameter.image_info)
  return image_info_;
}
::caffe::ImageInfo* TripletDataParameter::release_image_info() {
  // @@protoc_insertion_point(field_release:caffe.TripletDataParameter.image_info)
  clear_has_image_info();
  ::caffe::ImageInfo* temp = image_info_;
  image_info_ = NULL;
  return temp;
}
void TripletDataParameter::set_allocated_image_info(::caffe::ImageInfo* image_info) {
  delete image_info_;
  image_info_ = image_info;
  if (image_info) {
    set_has_image_info();
  } else {
    clear_has_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TripletDataParameter.image_info)
}

// repeated .caffe.AffineImageParameter affine_image_param = 7;
int TripletDataParameter::affine_image_param_size() const {
  return affine_image_param_.size();
}
void TripletDataParameter::clear_affine_image_param() {
  affine_image_param_.Clear();
}
const ::caffe::AffineImageParameter& TripletDataParameter::affine_image_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.affine_image_param)
  return affine_image_param_.Get(index);
}
::caffe::AffineImageParameter* TripletDataParameter::mutable_affine_image_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TripletDataParameter.affine_image_param)
  return affine_image_param_.Mutable(index);
}
::caffe::AffineImageParameter* TripletDataParameter::add_affine_image_param() {
  // @@protoc_insertion_point(field_add:caffe.TripletDataParameter.affine_image_param)
  return affine_image_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
TripletDataParameter::mutable_affine_image_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TripletDataParameter.affine_image_param)
  return &affine_image_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
TripletDataParameter::affine_image_param() const {
  // @@protoc_insertion_point(field_list:caffe.TripletDataParameter.affine_image_param)
  return affine_image_param_;
}

// optional float meanvalue = 9 [default = 0];
bool TripletDataParameter::has_meanvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TripletDataParameter::set_has_meanvalue() {
  _has_bits_[0] |= 0x00000010u;
}
void TripletDataParameter::clear_has_meanvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
void TripletDataParameter::clear_meanvalue() {
  meanvalue_ = 0;
  clear_has_meanvalue();
}
float TripletDataParameter::meanvalue() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.meanvalue)
  return meanvalue_;
}
void TripletDataParameter::set_meanvalue(float value) {
  set_has_meanvalue();
  meanvalue_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.meanvalue)
}

// optional float datascale = 10 [default = 1];
bool TripletDataParameter::has_datascale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TripletDataParameter::set_has_datascale() {
  _has_bits_[0] |= 0x00000100u;
}
void TripletDataParameter::clear_has_datascale() {
  _has_bits_[0] &= ~0x00000100u;
}
void TripletDataParameter::clear_datascale() {
  datascale_ = 1;
  clear_has_datascale();
}
float TripletDataParameter::datascale() const {
  // @@protoc_insertion_point(field_get:caffe.TripletDataParameter.datascale)
  return datascale_;
}
void TripletDataParameter::set_datascale(float value) {
  set_has_datascale();
  datascale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletDataParameter.datascale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacerecImageDataParameter::kSourceFieldNumber;
const int FacerecImageDataParameter::kUseDisturbFieldNumber;
const int FacerecImageDataParameter::kUseflipFieldNumber;
const int FacerecImageDataParameter::kBatchSizeFieldNumber;
const int FacerecImageDataParameter::kRandSkipFieldNumber;
const int FacerecImageDataParameter::kShuffleFieldNumber;
const int FacerecImageDataParameter::kMirrorFieldNumber;
const int FacerecImageDataParameter::kMeanValueFieldNumber;
const int FacerecImageDataParameter::kDataScaleFieldNumber;
const int FacerecImageDataParameter::kRandAngleFieldNumber;
const int FacerecImageDataParameter::kRandScaleFieldNumber;
const int FacerecImageDataParameter::kRandMovexFieldNumber;
const int FacerecImageDataParameter::kRandMoveyFieldNumber;
const int FacerecImageDataParameter::kSelectNumPerInstanceFieldNumber;
const int FacerecImageDataParameter::kSelectOneinstanceNumFieldNumber;
const int FacerecImageDataParameter::kDatatypeFieldNumber;
const int FacerecImageDataParameter::kKeyPointsNumFieldNumber;
const int FacerecImageDataParameter::kAffineParamFieldNumber;
const int FacerecImageDataParameter::kDataFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacerecImageDataParameter::FacerecImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FacerecImageDataParameter)
}
FacerecImageDataParameter::FacerecImageDataParameter(const FacerecImageDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      affine_param_(from.affine_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_folder()) {
    data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
  ::memcpy(&mean_value_, &from.mean_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_oneinstance_num_) -
    reinterpret_cast<char*>(&mean_value_)) + sizeof(select_oneinstance_num_));
  // @@protoc_insertion_point(copy_constructor:caffe.FacerecImageDataParameter)
}

void FacerecImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mean_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_oneinstance_num_) -
      reinterpret_cast<char*>(&mean_value_)) + sizeof(select_oneinstance_num_));
}

FacerecImageDataParameter::~FacerecImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.FacerecImageDataParameter)
  SharedDtor();
}

void FacerecImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FacerecImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacerecImageDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacerecImageDataParameter& FacerecImageDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FacerecImageDataParameter* FacerecImageDataParameter::New(::google::protobuf::Arena* arena) const {
  FacerecImageDataParameter* n = new FacerecImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacerecImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FacerecImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affine_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&mean_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shuffle_) -
        reinterpret_cast<char*>(&mean_value_)) + sizeof(shuffle_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&mirror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datatype_) -
        reinterpret_cast<char*>(&mirror_)) + sizeof(datatype_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&key_points_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&select_oneinstance_num_) -
        reinterpret_cast<char*>(&key_points_num_)) + sizeof(select_oneinstance_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacerecImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FacerecImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FacerecImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_value = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_mean_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool useflip = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_useflip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_angle = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_rand_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_scale = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_rand_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movex = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_rand_movex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movey = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_rand_movey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 select_num_per_instance = 23 [default = 0];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_select_num_per_instance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_num_per_instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::FacerecImageDataParameter_DataType_IsValid(value)) {
            set_datatype(static_cast< ::caffe::FacerecImageDataParameter_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key_points_num = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_key_points_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_points_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 select_oneinstance_num = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_select_oneinstance_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_oneinstance_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.AffineImageParameter affine_param = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_affine_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_folder = 28 [default = ""];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_folder().data(), static_cast<int>(this->data_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.FacerecImageDataParameter.data_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float data_scale = 29 [default = 0];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {
          set_has_data_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FacerecImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FacerecImageDataParameter)
  return false;
#undef DO_
}

void FacerecImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FacerecImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FacerecImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float mean_value = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mean_value(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_disturb(), output);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->useflip(), output);
  }

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rand_angle(), output);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->rand_scale(), output);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->rand_movex(), output);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->rand_movey(), output);
  }

  // optional uint32 select_num_per_instance = 23 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->select_num_per_instance(), output);
  }

  // optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->datatype(), output);
  }

  // optional uint32 key_points_num = 25 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->key_points_num(), output);
  }

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->select_oneinstance_num(), output);
  }

  // repeated .caffe.AffineImageParameter affine_param = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_param_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->affine_param(static_cast<int>(i)), output);
  }

  // optional string data_folder = 28 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FacerecImageDataParameter.data_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->data_folder(), output);
  }

  // optional float data_scale = 29 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->data_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FacerecImageDataParameter)
}

::google::protobuf::uint8* FacerecImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FacerecImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FacerecImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float mean_value = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mean_value(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_disturb(), target);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->useflip(), target);
  }

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rand_angle(), target);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->rand_scale(), target);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->rand_movex(), target);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->rand_movey(), target);
  }

  // optional uint32 select_num_per_instance = 23 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->select_num_per_instance(), target);
  }

  // optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->datatype(), target);
  }

  // optional uint32 key_points_num = 25 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->key_points_num(), target);
  }

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->select_oneinstance_num(), target);
  }

  // repeated .caffe.AffineImageParameter affine_param = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->affine_param_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->affine_param(static_cast<int>(i)), deterministic, target);
  }

  // optional string data_folder = 28 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_folder().data(), static_cast<int>(this->data_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.FacerecImageDataParameter.data_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->data_folder(), target);
  }

  // optional float data_scale = 29 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->data_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FacerecImageDataParameter)
  return target;
}

size_t FacerecImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FacerecImageDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.AffineImageParameter affine_param = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->affine_param_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affine_param(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string data_folder = 28 [default = ""];
    if (has_data_folder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_folder());
    }

    // optional float mean_value = 3 [default = 0];
    if (has_mean_value()) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool use_disturb = 14 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool useflip = 15 [default = false];
    if (has_useflip()) {
      total_size += 1 + 1;
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional float rand_angle = 18 [default = 0];
    if (has_rand_angle()) {
      total_size += 2 + 4;
    }

    // optional float rand_scale = 19 [default = 0];
    if (has_rand_scale()) {
      total_size += 2 + 4;
    }

    // optional float data_scale = 29 [default = 0];
    if (has_data_scale()) {
      total_size += 2 + 4;
    }

    // optional float rand_movex = 20 [default = 0];
    if (has_rand_movex()) {
      total_size += 2 + 4;
    }

    // optional float rand_movey = 21 [default = 0];
    if (has_rand_movey()) {
      total_size += 2 + 4;
    }

    // optional uint32 select_num_per_instance = 23 [default = 0];
    if (has_select_num_per_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_num_per_instance());
    }

    // optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
    if (has_datatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 key_points_num = 25 [default = 0];
    if (has_key_points_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_points_num());
    }

    // optional uint32 select_oneinstance_num = 26 [default = 0];
    if (has_select_oneinstance_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_oneinstance_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacerecImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FacerecImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FacerecImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacerecImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FacerecImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FacerecImageDataParameter)
    MergeFrom(*source);
  }
}

void FacerecImageDataParameter::MergeFrom(const FacerecImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FacerecImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affine_param_.MergeFrom(from.affine_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_folder();
      data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      mean_value_ = from.mean_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00000040u) {
      useflip_ = from.useflip_;
    }
    if (cached_has_bits & 0x00000080u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000200u) {
      rand_angle_ = from.rand_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      rand_scale_ = from.rand_scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      data_scale_ = from.data_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      rand_movex_ = from.rand_movex_;
    }
    if (cached_has_bits & 0x00002000u) {
      rand_movey_ = from.rand_movey_;
    }
    if (cached_has_bits & 0x00004000u) {
      select_num_per_instance_ = from.select_num_per_instance_;
    }
    if (cached_has_bits & 0x00008000u) {
      datatype_ = from.datatype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      key_points_num_ = from.key_points_num_;
    }
    if (cached_has_bits & 0x00020000u) {
      select_oneinstance_num_ = from.select_oneinstance_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FacerecImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FacerecImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacerecImageDataParameter::CopyFrom(const FacerecImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FacerecImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacerecImageDataParameter::IsInitialized() const {
  return true;
}

void FacerecImageDataParameter::Swap(FacerecImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacerecImageDataParameter::InternalSwap(FacerecImageDataParameter* other) {
  using std::swap;
  affine_param_.InternalSwap(&other->affine_param_);
  source_.Swap(&other->source_);
  data_folder_.Swap(&other->data_folder_);
  swap(mean_value_, other->mean_value_);
  swap(batch_size_, other->batch_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(use_disturb_, other->use_disturb_);
  swap(useflip_, other->useflip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(rand_angle_, other->rand_angle_);
  swap(rand_scale_, other->rand_scale_);
  swap(data_scale_, other->data_scale_);
  swap(rand_movex_, other->rand_movex_);
  swap(rand_movey_, other->rand_movey_);
  swap(select_num_per_instance_, other->select_num_per_instance_);
  swap(datatype_, other->datatype_);
  swap(key_points_num_, other->key_points_num_);
  swap(select_oneinstance_num_, other->select_oneinstance_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacerecImageDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacerecImageDataParameter

// optional string source = 1;
bool FacerecImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FacerecImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void FacerecImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void FacerecImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& FacerecImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.source)
  return source_.GetNoArena();
}
void FacerecImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.source)
}
#if LANG_CXX11
void FacerecImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FacerecImageDataParameter.source)
}
#endif
void FacerecImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FacerecImageDataParameter.source)
}
void FacerecImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FacerecImageDataParameter.source)
}
::std::string* FacerecImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.FacerecImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FacerecImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.FacerecImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FacerecImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.FacerecImageDataParameter.source)
}

// optional bool use_disturb = 14 [default = false];
bool FacerecImageDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FacerecImageDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000020u;
}
void FacerecImageDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000020u;
}
void FacerecImageDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool FacerecImageDataParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.use_disturb)
  return use_disturb_;
}
void FacerecImageDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
bool FacerecImageDataParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FacerecImageDataParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000040u;
}
void FacerecImageDataParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000040u;
}
void FacerecImageDataParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
bool FacerecImageDataParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.useflip)
  return useflip_;
}
void FacerecImageDataParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.useflip)
}

// optional uint32 batch_size = 4;
bool FacerecImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FacerecImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
void FacerecImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void FacerecImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 FacerecImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.batch_size)
  return batch_size_;
}
void FacerecImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool FacerecImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FacerecImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
void FacerecImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
void FacerecImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 FacerecImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.rand_skip)
  return rand_skip_;
}
void FacerecImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool FacerecImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FacerecImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000080u;
}
void FacerecImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000080u;
}
void FacerecImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool FacerecImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.shuffle)
  return shuffle_;
}
void FacerecImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.shuffle)
}

// optional bool mirror = 6 [default = false];
bool FacerecImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FacerecImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000100u;
}
void FacerecImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000100u;
}
void FacerecImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool FacerecImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.mirror)
  return mirror_;
}
void FacerecImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.mirror)
}

// optional float mean_value = 3 [default = 0];
bool FacerecImageDataParameter::has_mean_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FacerecImageDataParameter::set_has_mean_value() {
  _has_bits_[0] |= 0x00000004u;
}
void FacerecImageDataParameter::clear_has_mean_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void FacerecImageDataParameter::clear_mean_value() {
  mean_value_ = 0;
  clear_has_mean_value();
}
float FacerecImageDataParameter::mean_value() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.mean_value)
  return mean_value_;
}
void FacerecImageDataParameter::set_mean_value(float value) {
  set_has_mean_value();
  mean_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.mean_value)
}

// optional float data_scale = 29 [default = 0];
bool FacerecImageDataParameter::has_data_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FacerecImageDataParameter::set_has_data_scale() {
  _has_bits_[0] |= 0x00000800u;
}
void FacerecImageDataParameter::clear_has_data_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
void FacerecImageDataParameter::clear_data_scale() {
  data_scale_ = 0;
  clear_has_data_scale();
}
float FacerecImageDataParameter::data_scale() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.data_scale)
  return data_scale_;
}
void FacerecImageDataParameter::set_data_scale(float value) {
  set_has_data_scale();
  data_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.data_scale)
}

// optional float rand_angle = 18 [default = 0];
bool FacerecImageDataParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FacerecImageDataParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00000200u;
}
void FacerecImageDataParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
void FacerecImageDataParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
float FacerecImageDataParameter::rand_angle() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.rand_angle)
  return rand_angle_;
}
void FacerecImageDataParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.rand_angle)
}

// optional float rand_scale = 19 [default = 0];
bool FacerecImageDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FacerecImageDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void FacerecImageDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void FacerecImageDataParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
float FacerecImageDataParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.rand_scale)
  return rand_scale_;
}
void FacerecImageDataParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.rand_scale)
}

// optional float rand_movex = 20 [default = 0];
bool FacerecImageDataParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FacerecImageDataParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00001000u;
}
void FacerecImageDataParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00001000u;
}
void FacerecImageDataParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
float FacerecImageDataParameter::rand_movex() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.rand_movex)
  return rand_movex_;
}
void FacerecImageDataParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.rand_movex)
}

// optional float rand_movey = 21 [default = 0];
bool FacerecImageDataParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FacerecImageDataParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00002000u;
}
void FacerecImageDataParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00002000u;
}
void FacerecImageDataParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
float FacerecImageDataParameter::rand_movey() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.rand_movey)
  return rand_movey_;
}
void FacerecImageDataParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.rand_movey)
}

// optional uint32 select_num_per_instance = 23 [default = 0];
bool FacerecImageDataParameter::has_select_num_per_instance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FacerecImageDataParameter::set_has_select_num_per_instance() {
  _has_bits_[0] |= 0x00004000u;
}
void FacerecImageDataParameter::clear_has_select_num_per_instance() {
  _has_bits_[0] &= ~0x00004000u;
}
void FacerecImageDataParameter::clear_select_num_per_instance() {
  select_num_per_instance_ = 0u;
  clear_has_select_num_per_instance();
}
::google::protobuf::uint32 FacerecImageDataParameter::select_num_per_instance() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.select_num_per_instance)
  return select_num_per_instance_;
}
void FacerecImageDataParameter::set_select_num_per_instance(::google::protobuf::uint32 value) {
  set_has_select_num_per_instance();
  select_num_per_instance_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.select_num_per_instance)
}

// optional uint32 select_oneinstance_num = 26 [default = 0];
bool FacerecImageDataParameter::has_select_oneinstance_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FacerecImageDataParameter::set_has_select_oneinstance_num() {
  _has_bits_[0] |= 0x00020000u;
}
void FacerecImageDataParameter::clear_has_select_oneinstance_num() {
  _has_bits_[0] &= ~0x00020000u;
}
void FacerecImageDataParameter::clear_select_oneinstance_num() {
  select_oneinstance_num_ = 0u;
  clear_has_select_oneinstance_num();
}
::google::protobuf::uint32 FacerecImageDataParameter::select_oneinstance_num() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.select_oneinstance_num)
  return select_oneinstance_num_;
}
void FacerecImageDataParameter::set_select_oneinstance_num(::google::protobuf::uint32 value) {
  set_has_select_oneinstance_num();
  select_oneinstance_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.select_oneinstance_num)
}

// optional .caffe.FacerecImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
bool FacerecImageDataParameter::has_datatype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FacerecImageDataParameter::set_has_datatype() {
  _has_bits_[0] |= 0x00008000u;
}
void FacerecImageDataParameter::clear_has_datatype() {
  _has_bits_[0] &= ~0x00008000u;
}
void FacerecImageDataParameter::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::caffe::FacerecImageDataParameter_DataType FacerecImageDataParameter::datatype() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.datatype)
  return static_cast< ::caffe::FacerecImageDataParameter_DataType >(datatype_);
}
void FacerecImageDataParameter::set_datatype(::caffe::FacerecImageDataParameter_DataType value) {
  assert(::caffe::FacerecImageDataParameter_DataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.datatype)
}

// optional uint32 key_points_num = 25 [default = 0];
bool FacerecImageDataParameter::has_key_points_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FacerecImageDataParameter::set_has_key_points_num() {
  _has_bits_[0] |= 0x00010000u;
}
void FacerecImageDataParameter::clear_has_key_points_num() {
  _has_bits_[0] &= ~0x00010000u;
}
void FacerecImageDataParameter::clear_key_points_num() {
  key_points_num_ = 0u;
  clear_has_key_points_num();
}
::google::protobuf::uint32 FacerecImageDataParameter::key_points_num() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.key_points_num)
  return key_points_num_;
}
void FacerecImageDataParameter::set_key_points_num(::google::protobuf::uint32 value) {
  set_has_key_points_num();
  key_points_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.key_points_num)
}

// repeated .caffe.AffineImageParameter affine_param = 27;
int FacerecImageDataParameter::affine_param_size() const {
  return affine_param_.size();
}
void FacerecImageDataParameter::clear_affine_param() {
  affine_param_.Clear();
}
const ::caffe::AffineImageParameter& FacerecImageDataParameter::affine_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.affine_param)
  return affine_param_.Get(index);
}
::caffe::AffineImageParameter* FacerecImageDataParameter::mutable_affine_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FacerecImageDataParameter.affine_param)
  return affine_param_.Mutable(index);
}
::caffe::AffineImageParameter* FacerecImageDataParameter::add_affine_param() {
  // @@protoc_insertion_point(field_add:caffe.FacerecImageDataParameter.affine_param)
  return affine_param_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >*
FacerecImageDataParameter::mutable_affine_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FacerecImageDataParameter.affine_param)
  return &affine_param_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::AffineImageParameter >&
FacerecImageDataParameter::affine_param() const {
  // @@protoc_insertion_point(field_list:caffe.FacerecImageDataParameter.affine_param)
  return affine_param_;
}

// optional string data_folder = 28 [default = ""];
bool FacerecImageDataParameter::has_data_folder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FacerecImageDataParameter::set_has_data_folder() {
  _has_bits_[0] |= 0x00000002u;
}
void FacerecImageDataParameter::clear_has_data_folder() {
  _has_bits_[0] &= ~0x00000002u;
}
void FacerecImageDataParameter::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_folder();
}
const ::std::string& FacerecImageDataParameter::data_folder() const {
  // @@protoc_insertion_point(field_get:caffe.FacerecImageDataParameter.data_folder)
  return data_folder_.GetNoArena();
}
void FacerecImageDataParameter::set_data_folder(const ::std::string& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FacerecImageDataParameter.data_folder)
}
#if LANG_CXX11
void FacerecImageDataParameter::set_data_folder(::std::string&& value) {
  set_has_data_folder();
  data_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FacerecImageDataParameter.data_folder)
}
#endif
void FacerecImageDataParameter::set_data_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FacerecImageDataParameter.data_folder)
}
void FacerecImageDataParameter::set_data_folder(const char* value, size_t size) {
  set_has_data_folder();
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FacerecImageDataParameter.data_folder)
}
::std::string* FacerecImageDataParameter::mutable_data_folder() {
  set_has_data_folder();
  // @@protoc_insertion_point(field_mutable:caffe.FacerecImageDataParameter.data_folder)
  return data_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FacerecImageDataParameter::release_data_folder() {
  // @@protoc_insertion_point(field_release:caffe.FacerecImageDataParameter.data_folder)
  clear_has_data_folder();
  return data_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FacerecImageDataParameter::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder != NULL) {
    set_has_data_folder();
  } else {
    clear_has_data_folder();
  }
  data_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.FacerecImageDataParameter.data_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PadParameter::kPadWFieldNumber;
const int PadParameter::kPadHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PadParameter::PadParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PadParameter)
}
PadParameter::PadParameter(const PadParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_w_, &from.pad_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&pad_h_) -
    reinterpret_cast<char*>(&pad_w_)) + sizeof(pad_h_));
  // @@protoc_insertion_point(copy_constructor:caffe.PadParameter)
}

void PadParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pad_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pad_h_) -
      reinterpret_cast<char*>(&pad_w_)) + sizeof(pad_h_));
}

PadParameter::~PadParameter() {
  // @@protoc_insertion_point(destructor:caffe.PadParameter)
  SharedDtor();
}

void PadParameter::SharedDtor() {
}

void PadParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PadParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PadParameter& PadParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PadParameter* PadParameter::New(::google::protobuf::Arena* arena) const {
  PadParameter* n = new PadParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PadParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PadParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&pad_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_h_) -
        reinterpret_cast<char*>(&pad_w_)) + sizeof(pad_h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PadParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PadParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pad_w = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PadParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PadParameter)
  return false;
#undef DO_
}

void PadParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PadParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_w = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pad_w(), output);
  }

  // optional uint32 pad_h = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pad_h(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PadParameter)
}

::google::protobuf::uint8* PadParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PadParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_w = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pad_w(), target);
  }

  // optional uint32 pad_h = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pad_h(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PadParameter)
  return target;
}

size_t PadParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PadParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 pad_w = 1 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 pad_h = 2 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PadParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PadParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PadParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PadParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PadParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PadParameter)
    MergeFrom(*source);
  }
}

void PadParameter::MergeFrom(const PadParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PadParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000002u) {
      pad_h_ = from.pad_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PadParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PadParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PadParameter::CopyFrom(const PadParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PadParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PadParameter::IsInitialized() const {
  return true;
}

void PadParameter::Swap(PadParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PadParameter::InternalSwap(PadParameter* other) {
  using std::swap;
  swap(pad_w_, other->pad_w_);
  swap(pad_h_, other->pad_h_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PadParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PadParameter

// optional uint32 pad_w = 1 [default = 0];
bool PadParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PadParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000001u;
}
void PadParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void PadParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 PadParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PadParameter.pad_w)
  return pad_w_;
}
void PadParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PadParameter.pad_w)
}

// optional uint32 pad_h = 2 [default = 0];
bool PadParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PadParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000002u;
}
void PadParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void PadParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 PadParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PadParameter.pad_h)
  return pad_h_;
}
void PadParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PadParameter.pad_h)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kIsColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_color_, &from.is_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&is_color_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  is_color_ = true;
  height_ = 40;
  width_ = 40;
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:caffe.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    is_color_ = true;
    height_ = 40;
    width_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 40];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2 [default = 40];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_color = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 40];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2 [default = 40];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional bool is_color = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 40];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2 [default = 40];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional bool is_color = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_color = 3 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional int32 height = 1 [default = 40];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2 [default = 40];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      is_color_ = from.is_color_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  swap(is_color_, other->is_color_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// optional int32 height = 1 [default = 40];
bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_height() {
  height_ = 40;
  clear_has_height();
}
::google::protobuf::int32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageInfo.height)
  return height_;
}
void ImageInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageInfo.height)
}

// optional int32 width = 2 [default = 40];
bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_width() {
  width_ = 40;
  clear_has_width();
}
::google::protobuf::int32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageInfo.width)
  return width_;
}
void ImageInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageInfo.width)
}

// optional bool is_color = 3 [default = true];
bool ImageInfo::has_is_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_is_color() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
bool ImageInfo::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageInfo.is_color)
  return is_color_;
}
void ImageInfo::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageInfo.is_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AffineImageParameter::kCenterIndFieldNumber;
const int AffineImageParameter::kNormModeFieldNumber;
const int AffineImageParameter::kNormRatioFieldNumber;
const int AffineImageParameter::kFillTypeFieldNumber;
const int AffineImageParameter::kValueFieldNumber;
const int AffineImageParameter::kImageInfoFieldNumber;
const int AffineImageParameter::kMeanFileFieldNumber;
const int AffineImageParameter::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AffineImageParameter::AffineImageParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AffineImageParameter)
}
AffineImageParameter::AffineImageParameter(const AffineImageParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      center_ind_(from.center_ind_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  if (from.has_image_info()) {
    image_info_ = new ::caffe::ImageInfo(*from.image_info_);
  } else {
    image_info_ = NULL;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&norm_ratio_) -
    reinterpret_cast<char*>(&value_)) + sizeof(norm_ratio_));
  // @@protoc_insertion_point(copy_constructor:caffe.AffineImageParameter)
}

void AffineImageParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&image_info_)) + sizeof(scale_));
  fill_type_ = true;
  norm_mode_ = 1;
  norm_ratio_ = 0.5f;
}

AffineImageParameter::~AffineImageParameter() {
  // @@protoc_insertion_point(destructor:caffe.AffineImageParameter)
  SharedDtor();
}

void AffineImageParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_info_;
}

void AffineImageParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffineImageParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AffineImageParameter& AffineImageParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

AffineImageParameter* AffineImageParameter::New(::google::protobuf::Arena* arena) const {
  AffineImageParameter* n = new AffineImageParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AffineImageParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AffineImageParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_ind_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_info_ != NULL);
      image_info_->::caffe::ImageInfo::Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&value_)) + sizeof(scale_));
    fill_type_ = true;
    norm_mode_ = 1;
    norm_ratio_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AffineImageParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AffineImageParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 center_ind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_center_ind())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_center_ind())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::AffineImage_Norm_Mode_IsValid(value)) {
            set_norm_mode(static_cast< ::caffe::AffineImage_Norm_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float norm_ratio = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_norm_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fill_type = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_fill_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageInfo image_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), static_cast<int>(this->mean_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.AffineImageParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AffineImageParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AffineImageParameter)
  return false;
#undef DO_
}

void AffineImageParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AffineImageParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 center_ind = 1;
  for (int i = 0, n = this->center_ind_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->center_ind(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->norm_mode(), output);
  }

  // optional float norm_ratio = 3 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->norm_ratio(), output);
  }

  // optional bool fill_type = 7 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fill_type(), output);
  }

  // optional uint32 value = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->value(), output);
  }

  // optional .caffe.ImageInfo image_info = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->image_info_, output);
  }

  // optional string mean_file = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.AffineImageParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mean_file(), output);
  }

  // optional float scale = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AffineImageParameter)
}

::google::protobuf::uint8* AffineImageParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AffineImageParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 center_ind = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->center_ind_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->norm_mode(), target);
  }

  // optional float norm_ratio = 3 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->norm_ratio(), target);
  }

  // optional bool fill_type = 7 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fill_type(), target);
  }

  // optional uint32 value = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->value(), target);
  }

  // optional .caffe.ImageInfo image_info = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->image_info_, deterministic, target);
  }

  // optional string mean_file = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.AffineImageParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mean_file(), target);
  }

  // optional float scale = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AffineImageParameter)
  return target;
}

size_t AffineImageParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AffineImageParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 center_ind = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->center_ind_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->center_ind_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string mean_file = 10;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional .caffe.ImageInfo image_info = 9;
    if (has_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_info_);
    }

    // optional uint32 value = 8 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional float scale = 11;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional bool fill_type = 7 [default = true];
    if (has_fill_type()) {
      total_size += 1 + 1;
    }

    // optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
    if (has_norm_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_mode());
    }

    // optional float norm_ratio = 3 [default = 0.5];
    if (has_norm_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffineImageParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AffineImageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AffineImageParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AffineImageParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AffineImageParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AffineImageParameter)
    MergeFrom(*source);
  }
}

void AffineImageParameter::MergeFrom(const AffineImageParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AffineImageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_ind_.MergeFrom(from.center_ind_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_image_info()->::caffe::ImageInfo::MergeFrom(from.image_info());
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      fill_type_ = from.fill_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      norm_mode_ = from.norm_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      norm_ratio_ = from.norm_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AffineImageParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AffineImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffineImageParameter::CopyFrom(const AffineImageParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AffineImageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffineImageParameter::IsInitialized() const {
  return true;
}

void AffineImageParameter::Swap(AffineImageParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AffineImageParameter::InternalSwap(AffineImageParameter* other) {
  using std::swap;
  center_ind_.InternalSwap(&other->center_ind_);
  mean_file_.Swap(&other->mean_file_);
  swap(image_info_, other->image_info_);
  swap(value_, other->value_);
  swap(scale_, other->scale_);
  swap(fill_type_, other->fill_type_);
  swap(norm_mode_, other->norm_mode_);
  swap(norm_ratio_, other->norm_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AffineImageParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AffineImageParameter

// repeated int32 center_ind = 1;
int AffineImageParameter::center_ind_size() const {
  return center_ind_.size();
}
void AffineImageParameter::clear_center_ind() {
  center_ind_.Clear();
}
::google::protobuf::int32 AffineImageParameter::center_ind(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.center_ind)
  return center_ind_.Get(index);
}
void AffineImageParameter::set_center_ind(int index, ::google::protobuf::int32 value) {
  center_ind_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.center_ind)
}
void AffineImageParameter::add_center_ind(::google::protobuf::int32 value) {
  center_ind_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.AffineImageParameter.center_ind)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AffineImageParameter::center_ind() const {
  // @@protoc_insertion_point(field_list:caffe.AffineImageParameter.center_ind)
  return center_ind_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AffineImageParameter::mutable_center_ind() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AffineImageParameter.center_ind)
  return &center_ind_;
}

// optional .caffe.AffineImage_Norm_Mode norm_mode = 2 [default = RECT_LE_RE_LM_RM];
bool AffineImageParameter::has_norm_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AffineImageParameter::set_has_norm_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void AffineImageParameter::clear_has_norm_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void AffineImageParameter::clear_norm_mode() {
  norm_mode_ = 1;
  clear_has_norm_mode();
}
::caffe::AffineImage_Norm_Mode AffineImageParameter::norm_mode() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.norm_mode)
  return static_cast< ::caffe::AffineImage_Norm_Mode >(norm_mode_);
}
void AffineImageParameter::set_norm_mode(::caffe::AffineImage_Norm_Mode value) {
  assert(::caffe::AffineImage_Norm_Mode_IsValid(value));
  set_has_norm_mode();
  norm_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.norm_mode)
}

// optional float norm_ratio = 3 [default = 0.5];
bool AffineImageParameter::has_norm_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AffineImageParameter::set_has_norm_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void AffineImageParameter::clear_has_norm_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void AffineImageParameter::clear_norm_ratio() {
  norm_ratio_ = 0.5f;
  clear_has_norm_ratio();
}
float AffineImageParameter::norm_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.norm_ratio)
  return norm_ratio_;
}
void AffineImageParameter::set_norm_ratio(float value) {
  set_has_norm_ratio();
  norm_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.norm_ratio)
}

// optional bool fill_type = 7 [default = true];
bool AffineImageParameter::has_fill_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AffineImageParameter::set_has_fill_type() {
  _has_bits_[0] |= 0x00000010u;
}
void AffineImageParameter::clear_has_fill_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void AffineImageParameter::clear_fill_type() {
  fill_type_ = true;
  clear_has_fill_type();
}
bool AffineImageParameter::fill_type() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.fill_type)
  return fill_type_;
}
void AffineImageParameter::set_fill_type(bool value) {
  set_has_fill_type();
  fill_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.fill_type)
}

// optional uint32 value = 8 [default = 0];
bool AffineImageParameter::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AffineImageParameter::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void AffineImageParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void AffineImageParameter::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 AffineImageParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.value)
  return value_;
}
void AffineImageParameter::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.value)
}

// optional .caffe.ImageInfo image_info = 9;
bool AffineImageParameter::has_image_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AffineImageParameter::set_has_image_info() {
  _has_bits_[0] |= 0x00000002u;
}
void AffineImageParameter::clear_has_image_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void AffineImageParameter::clear_image_info() {
  if (image_info_ != NULL) image_info_->::caffe::ImageInfo::Clear();
  clear_has_image_info();
}
const ::caffe::ImageInfo& AffineImageParameter::image_info() const {
  const ::caffe::ImageInfo* p = image_info_;
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.image_info)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageInfo*>(
      &::caffe::_ImageInfo_default_instance_);
}
::caffe::ImageInfo* AffineImageParameter::mutable_image_info() {
  set_has_image_info();
  if (image_info_ == NULL) {
    image_info_ = new ::caffe::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AffineImageParameter.image_info)
  return image_info_;
}
::caffe::ImageInfo* AffineImageParameter::release_image_info() {
  // @@protoc_insertion_point(field_release:caffe.AffineImageParameter.image_info)
  clear_has_image_info();
  ::caffe::ImageInfo* temp = image_info_;
  image_info_ = NULL;
  return temp;
}
void AffineImageParameter::set_allocated_image_info(::caffe::ImageInfo* image_info) {
  delete image_info_;
  image_info_ = image_info;
  if (image_info) {
    set_has_image_info();
  } else {
    clear_has_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AffineImageParameter.image_info)
}

// optional string mean_file = 10;
bool AffineImageParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AffineImageParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
void AffineImageParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void AffineImageParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& AffineImageParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.mean_file)
  return mean_file_.GetNoArena();
}
void AffineImageParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.mean_file)
}
#if LANG_CXX11
void AffineImageParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.AffineImageParameter.mean_file)
}
#endif
void AffineImageParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.AffineImageParameter.mean_file)
}
void AffineImageParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.AffineImageParameter.mean_file)
}
::std::string* AffineImageParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.AffineImageParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AffineImageParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.AffineImageParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AffineImageParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.AffineImageParameter.mean_file)
}

// optional float scale = 11;
bool AffineImageParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AffineImageParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void AffineImageParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void AffineImageParameter::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float AffineImageParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.AffineImageParameter.scale)
  return scale_;
}
void AffineImageParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.AffineImageParameter.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int L2NormParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

L2NormParameter::L2NormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.L2NormParameter)
}
L2NormParameter::L2NormParameter(const L2NormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eps_ = from.eps_;
  // @@protoc_insertion_point(copy_constructor:caffe.L2NormParameter)
}

void L2NormParameter::SharedCtor() {
  _cached_size_ = 0;
  eps_ = 1e-08f;
}

L2NormParameter::~L2NormParameter() {
  // @@protoc_insertion_point(destructor:caffe.L2NormParameter)
  SharedDtor();
}

void L2NormParameter::SharedDtor() {
}

void L2NormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2NormParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const L2NormParameter& L2NormParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

L2NormParameter* L2NormParameter::New(::google::protobuf::Arena* arena) const {
  L2NormParameter* n = new L2NormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void L2NormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.L2NormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eps_ = 1e-08f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool L2NormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.L2NormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-08];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.L2NormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.L2NormParameter)
  return false;
#undef DO_
}

void L2NormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.L2NormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float eps = 1 [default = 1e-08];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.L2NormParameter)
}

::google::protobuf::uint8* L2NormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.L2NormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float eps = 1 [default = 1e-08];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.L2NormParameter)
  return target;
}

size_t L2NormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.L2NormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float eps = 1 [default = 1e-08];
  if (has_eps()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2NormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.L2NormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const L2NormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const L2NormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.L2NormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.L2NormParameter)
    MergeFrom(*source);
  }
}

void L2NormParameter::MergeFrom(const L2NormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.L2NormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eps()) {
    set_eps(from.eps());
  }
}

void L2NormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.L2NormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2NormParameter::CopyFrom(const L2NormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.L2NormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2NormParameter::IsInitialized() const {
  return true;
}

void L2NormParameter::Swap(L2NormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void L2NormParameter::InternalSwap(L2NormParameter* other) {
  using std::swap;
  swap(eps_, other->eps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata L2NormParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// L2NormParameter

// optional float eps = 1 [default = 1e-08];
bool L2NormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void L2NormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
void L2NormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
void L2NormParameter::clear_eps() {
  eps_ = 1e-08f;
  clear_has_eps();
}
float L2NormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.L2NormParameter.eps)
  return eps_;
}
void L2NormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.L2NormParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripletLossParameter::kMarginFieldNumber;
const int TripletLossParameter::kNormDiffFieldNumber;
const int TripletLossParameter::kSequencialBottomFieldNumber;
const int TripletLossParameter::kUseCpuFieldNumber;
const int TripletLossParameter::kStepFieldNumber;
const int TripletLossParameter::kPrintTimeFieldNumber;
const int TripletLossParameter::kIgnoreHardestRatioFieldNumber;
const int TripletLossParameter::kUseHardSampleFieldNumber;
const int TripletLossParameter::kActiveIgnorehardestLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripletLossParameter::TripletLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TripletLossParameter)
}
TripletLossParameter::TripletLossParameter(const TripletLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&norm_diff_, &from.norm_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_ignorehardest_len_) -
    reinterpret_cast<char*>(&norm_diff_)) + sizeof(active_ignorehardest_len_));
  // @@protoc_insertion_point(copy_constructor:caffe.TripletLossParameter)
}

void TripletLossParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&norm_diff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_time_) -
      reinterpret_cast<char*>(&norm_diff_)) + sizeof(print_time_));
  margin_ = 1;
  sequencial_bottom_ = true;
  step_ = 3;
  ignore_hardest_ratio_ = -1;
  use_hard_sample_ = -1;
  active_ignorehardest_len_ = 4;
}

TripletLossParameter::~TripletLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.TripletLossParameter)
  SharedDtor();
}

void TripletLossParameter::SharedDtor() {
}

void TripletLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripletLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripletLossParameter& TripletLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TripletLossParameter* TripletLossParameter::New(::google::protobuf::Arena* arena) const {
  TripletLossParameter* n = new TripletLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripletLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TripletLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&norm_diff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&print_time_) -
        reinterpret_cast<char*>(&norm_diff_)) + sizeof(print_time_));
    margin_ = 1;
    sequencial_bottom_ = true;
    step_ = 3;
    ignore_hardest_ratio_ = -1;
    use_hard_sample_ = -1;
  }
  active_ignorehardest_len_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TripletLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TripletLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool norm_diff = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_norm_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &norm_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sequencial_bottom = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sequencial_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sequencial_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_cpu = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_cpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 step = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_time = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_print_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ignore_hardest_ratio = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_ignore_hardest_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ignore_hardest_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float use_hard_sample = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_use_hard_sample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &use_hard_sample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_ignorehardest_len = 9 [default = 4];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_active_ignorehardest_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_ignorehardest_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TripletLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TripletLossParameter)
  return false;
#undef DO_
}

void TripletLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TripletLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool norm_diff = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->norm_diff(), output);
  }

  // optional bool sequencial_bottom = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sequencial_bottom(), output);
  }

  // optional bool use_cpu = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_cpu(), output);
  }

  // optional int32 step = 5 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->step(), output);
  }

  // optional bool print_time = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->print_time(), output);
  }

  // optional float ignore_hardest_ratio = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ignore_hardest_ratio(), output);
  }

  // optional float use_hard_sample = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->use_hard_sample(), output);
  }

  // optional int32 active_ignorehardest_len = 9 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->active_ignorehardest_len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TripletLossParameter)
}

::google::protobuf::uint8* TripletLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TripletLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool norm_diff = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->norm_diff(), target);
  }

  // optional bool sequencial_bottom = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sequencial_bottom(), target);
  }

  // optional bool use_cpu = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_cpu(), target);
  }

  // optional int32 step = 5 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->step(), target);
  }

  // optional bool print_time = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->print_time(), target);
  }

  // optional float ignore_hardest_ratio = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ignore_hardest_ratio(), target);
  }

  // optional float use_hard_sample = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->use_hard_sample(), target);
  }

  // optional int32 active_ignorehardest_len = 9 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->active_ignorehardest_len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TripletLossParameter)
  return target;
}

size_t TripletLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TripletLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool norm_diff = 2 [default = false];
    if (has_norm_diff()) {
      total_size += 1 + 1;
    }

    // optional bool use_cpu = 4 [default = false];
    if (has_use_cpu()) {
      total_size += 1 + 1;
    }

    // optional bool print_time = 6 [default = false];
    if (has_print_time()) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional bool sequencial_bottom = 3 [default = true];
    if (has_sequencial_bottom()) {
      total_size += 1 + 1;
    }

    // optional int32 step = 5 [default = 3];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional float ignore_hardest_ratio = 7 [default = -1];
    if (has_ignore_hardest_ratio()) {
      total_size += 1 + 4;
    }

    // optional float use_hard_sample = 8 [default = -1];
    if (has_use_hard_sample()) {
      total_size += 1 + 4;
    }

  }
  // optional int32 active_ignorehardest_len = 9 [default = 4];
  if (has_active_ignorehardest_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_ignorehardest_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripletLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TripletLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TripletLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripletLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TripletLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TripletLossParameter)
    MergeFrom(*source);
  }
}

void TripletLossParameter::MergeFrom(const TripletLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TripletLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      norm_diff_ = from.norm_diff_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_cpu_ = from.use_cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      print_time_ = from.print_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequencial_bottom_ = from.sequencial_bottom_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_hardest_ratio_ = from.ignore_hardest_ratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_hard_sample_ = from.use_hard_sample_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_active_ignorehardest_len(from.active_ignorehardest_len());
  }
}

void TripletLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TripletLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripletLossParameter::CopyFrom(const TripletLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TripletLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletLossParameter::IsInitialized() const {
  return true;
}

void TripletLossParameter::Swap(TripletLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripletLossParameter::InternalSwap(TripletLossParameter* other) {
  using std::swap;
  swap(norm_diff_, other->norm_diff_);
  swap(use_cpu_, other->use_cpu_);
  swap(print_time_, other->print_time_);
  swap(margin_, other->margin_);
  swap(sequencial_bottom_, other->sequencial_bottom_);
  swap(step_, other->step_);
  swap(ignore_hardest_ratio_, other->ignore_hardest_ratio_);
  swap(use_hard_sample_, other->use_hard_sample_);
  swap(active_ignorehardest_len_, other->active_ignorehardest_len_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripletLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TripletLossParameter

// optional float margin = 1 [default = 1];
bool TripletLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TripletLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000008u;
}
void TripletLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
void TripletLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
float TripletLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.margin)
  return margin_;
}
void TripletLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.margin)
}

// optional bool norm_diff = 2 [default = false];
bool TripletLossParameter::has_norm_diff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TripletLossParameter::set_has_norm_diff() {
  _has_bits_[0] |= 0x00000001u;
}
void TripletLossParameter::clear_has_norm_diff() {
  _has_bits_[0] &= ~0x00000001u;
}
void TripletLossParameter::clear_norm_diff() {
  norm_diff_ = false;
  clear_has_norm_diff();
}
bool TripletLossParameter::norm_diff() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.norm_diff)
  return norm_diff_;
}
void TripletLossParameter::set_norm_diff(bool value) {
  set_has_norm_diff();
  norm_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.norm_diff)
}

// optional bool sequencial_bottom = 3 [default = true];
bool TripletLossParameter::has_sequencial_bottom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TripletLossParameter::set_has_sequencial_bottom() {
  _has_bits_[0] |= 0x00000010u;
}
void TripletLossParameter::clear_has_sequencial_bottom() {
  _has_bits_[0] &= ~0x00000010u;
}
void TripletLossParameter::clear_sequencial_bottom() {
  sequencial_bottom_ = true;
  clear_has_sequencial_bottom();
}
bool TripletLossParameter::sequencial_bottom() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.sequencial_bottom)
  return sequencial_bottom_;
}
void TripletLossParameter::set_sequencial_bottom(bool value) {
  set_has_sequencial_bottom();
  sequencial_bottom_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.sequencial_bottom)
}

// optional bool use_cpu = 4 [default = false];
bool TripletLossParameter::has_use_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TripletLossParameter::set_has_use_cpu() {
  _has_bits_[0] |= 0x00000002u;
}
void TripletLossParameter::clear_has_use_cpu() {
  _has_bits_[0] &= ~0x00000002u;
}
void TripletLossParameter::clear_use_cpu() {
  use_cpu_ = false;
  clear_has_use_cpu();
}
bool TripletLossParameter::use_cpu() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.use_cpu)
  return use_cpu_;
}
void TripletLossParameter::set_use_cpu(bool value) {
  set_has_use_cpu();
  use_cpu_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.use_cpu)
}

// optional int32 step = 5 [default = 3];
bool TripletLossParameter::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TripletLossParameter::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
void TripletLossParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
void TripletLossParameter::clear_step() {
  step_ = 3;
  clear_has_step();
}
::google::protobuf::int32 TripletLossParameter::step() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.step)
  return step_;
}
void TripletLossParameter::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.step)
}

// optional bool print_time = 6 [default = false];
bool TripletLossParameter::has_print_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TripletLossParameter::set_has_print_time() {
  _has_bits_[0] |= 0x00000004u;
}
void TripletLossParameter::clear_has_print_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void TripletLossParameter::clear_print_time() {
  print_time_ = false;
  clear_has_print_time();
}
bool TripletLossParameter::print_time() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.print_time)
  return print_time_;
}
void TripletLossParameter::set_print_time(bool value) {
  set_has_print_time();
  print_time_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.print_time)
}

// optional float ignore_hardest_ratio = 7 [default = -1];
bool TripletLossParameter::has_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TripletLossParameter::set_has_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
void TripletLossParameter::clear_has_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
void TripletLossParameter::clear_ignore_hardest_ratio() {
  ignore_hardest_ratio_ = -1;
  clear_has_ignore_hardest_ratio();
}
float TripletLossParameter::ignore_hardest_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.ignore_hardest_ratio)
  return ignore_hardest_ratio_;
}
void TripletLossParameter::set_ignore_hardest_ratio(float value) {
  set_has_ignore_hardest_ratio();
  ignore_hardest_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.ignore_hardest_ratio)
}

// optional float use_hard_sample = 8 [default = -1];
bool TripletLossParameter::has_use_hard_sample() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TripletLossParameter::set_has_use_hard_sample() {
  _has_bits_[0] |= 0x00000080u;
}
void TripletLossParameter::clear_has_use_hard_sample() {
  _has_bits_[0] &= ~0x00000080u;
}
void TripletLossParameter::clear_use_hard_sample() {
  use_hard_sample_ = -1;
  clear_has_use_hard_sample();
}
float TripletLossParameter::use_hard_sample() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.use_hard_sample)
  return use_hard_sample_;
}
void TripletLossParameter::set_use_hard_sample(float value) {
  set_has_use_hard_sample();
  use_hard_sample_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.use_hard_sample)
}

// optional int32 active_ignorehardest_len = 9 [default = 4];
bool TripletLossParameter::has_active_ignorehardest_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TripletLossParameter::set_has_active_ignorehardest_len() {
  _has_bits_[0] |= 0x00000100u;
}
void TripletLossParameter::clear_has_active_ignorehardest_len() {
  _has_bits_[0] &= ~0x00000100u;
}
void TripletLossParameter::clear_active_ignorehardest_len() {
  active_ignorehardest_len_ = 4;
  clear_has_active_ignorehardest_len();
}
::google::protobuf::int32 TripletLossParameter::active_ignorehardest_len() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.active_ignorehardest_len)
  return active_ignorehardest_len_;
}
void TripletLossParameter::set_active_ignorehardest_len(::google::protobuf::int32 value) {
  set_has_active_ignorehardest_len();
  active_ignorehardest_len_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.active_ignorehardest_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PairImageDataParameter::kSourceFieldNumber;
const int PairImageDataParameter::kUseDisturbFieldNumber;
const int PairImageDataParameter::kUseflipFieldNumber;
const int PairImageDataParameter::kBatchSizeFieldNumber;
const int PairImageDataParameter::kRandSkipFieldNumber;
const int PairImageDataParameter::kShuffleFieldNumber;
const int PairImageDataParameter::kCropSizeFieldNumber;
const int PairImageDataParameter::kMirrorFieldNumber;
const int PairImageDataParameter::kResizeTypeFieldNumber;
const int PairImageDataParameter::kDataHeightFieldNumber;
const int PairImageDataParameter::kDataWidthFieldNumber;
const int PairImageDataParameter::kDataChannelsFieldNumber;
const int PairImageDataParameter::kDataScaleFieldNumber;
const int PairImageDataParameter::kMeanFileFieldNumber;
const int PairImageDataParameter::kRandAngleFieldNumber;
const int PairImageDataParameter::kRandScaleFieldNumber;
const int PairImageDataParameter::kRandMovexFieldNumber;
const int PairImageDataParameter::kRandMoveyFieldNumber;
const int PairImageDataParameter::kSelectNumPerInstanceFieldNumber;
const int PairImageDataParameter::kSelectOneinstanceNumFieldNumber;
const int PairImageDataParameter::kDatatypeFieldNumber;
const int PairImageDataParameter::kLmkNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PairImageDataParameter::PairImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PairImageDataParameter)
}
PairImageDataParameter::PairImageDataParameter(const PairImageDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      resize_type_(from.resize_type_),
      mean_file_(from.mean_file_),
      data_height_(from.data_height_),
      data_width_(from.data_width_),
      data_channels_(from.data_channels_),
      data_scale_(from.data_scale_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_oneinstance_num_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(select_oneinstance_num_));
  // @@protoc_insertion_point(copy_constructor:caffe.PairImageDataParameter)
}

void PairImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_oneinstance_num_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(select_oneinstance_num_));
}

PairImageDataParameter::~PairImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.PairImageDataParameter)
  SharedDtor();
}

void PairImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PairImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairImageDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PairImageDataParameter& PairImageDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PairImageDataParameter* PairImageDataParameter::New(::google::protobuf::Arena* arena) const {
  PairImageDataParameter* n = new PairImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PairImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PairImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resize_type_.Clear();
  mean_file_.Clear();
  data_height_.Clear();
  data_width_.Clear();
  data_channels_.Clear();
  data_scale_.Clear();
  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&rand_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&select_oneinstance_num_) -
        reinterpret_cast<char*>(&rand_angle_)) + sizeof(select_oneinstance_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PairImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PairImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PairImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 resize_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_resize_type())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_resize_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file(this->mean_file_size() - 1).data(),
            static_cast<int>(this->mean_file(this->mean_file_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PairImageDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_data_height())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_data_width())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool useflip = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_useflip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_channels = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_data_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_angle = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_rand_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_scale = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_rand_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movex = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_rand_movex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movey = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_rand_movey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data_scale = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181u, input, this->mutable_data_scale())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 select_num_per_instance = 23 [default = 0];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_select_num_per_instance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_num_per_instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PairImageDataParameter_DataType_IsValid(value)) {
            set_datatype(static_cast< ::caffe::PairImageDataParameter_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lmk_num = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_lmk_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lmk_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 select_oneinstance_num = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_select_oneinstance_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_oneinstance_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PairImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PairImageDataParameter)
  return false;
#undef DO_
}

void PairImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PairImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PairImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // repeated uint32 resize_type = 2;
  for (int i = 0, n = this->resize_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->resize_type(i), output);
  }

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PairImageDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mean_file(i), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // repeated uint32 data_height = 9;
  for (int i = 0, n = this->data_height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->data_height(i), output);
  }

  // repeated uint32 data_width = 10;
  for (int i = 0, n = this->data_width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->data_width(i), output);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_disturb(), output);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->useflip(), output);
  }

  // repeated uint32 data_channels = 17;
  for (int i = 0, n = this->data_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->data_channels(i), output);
  }

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rand_angle(), output);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->rand_scale(), output);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->rand_movex(), output);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->rand_movey(), output);
  }

  // repeated float data_scale = 22;
  for (int i = 0, n = this->data_scale_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->data_scale(i), output);
  }

  // optional uint32 select_num_per_instance = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->select_num_per_instance(), output);
  }

  // optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->datatype(), output);
  }

  // optional uint32 lmk_num = 25 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->lmk_num(), output);
  }

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->select_oneinstance_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PairImageDataParameter)
}

::google::protobuf::uint8* PairImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PairImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PairImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // repeated uint32 resize_type = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->resize_type_, target);

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PairImageDataParameter.mean_file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mean_file(i), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // repeated uint32 data_height = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->data_height_, target);

  // repeated uint32 data_width = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->data_width_, target);

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_disturb(), target);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->useflip(), target);
  }

  // repeated uint32 data_channels = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->data_channels_, target);

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rand_angle(), target);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->rand_scale(), target);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->rand_movex(), target);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->rand_movey(), target);
  }

  // repeated float data_scale = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(22, this->data_scale_, target);

  // optional uint32 select_num_per_instance = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->select_num_per_instance(), target);
  }

  // optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->datatype(), target);
  }

  // optional uint32 lmk_num = 25 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->lmk_num(), target);
  }

  // optional uint32 select_oneinstance_num = 26 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->select_oneinstance_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PairImageDataParameter)
  return target;
}

size_t PairImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PairImageDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 resize_type = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->resize_type_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->resize_type_size());
    total_size += data_size;
  }

  // repeated string mean_file = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mean_file_size());
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mean_file(i));
  }

  // repeated uint32 data_height = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_height_size());
    total_size += data_size;
  }

  // repeated uint32 data_width = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_width_size());
    total_size += data_size;
  }

  // repeated uint32 data_channels = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_channels_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_channels_size());
    total_size += data_size;
  }

  // repeated float data_scale = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->data_scale_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_scale_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool use_disturb = 14 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool useflip = 15 [default = false];
    if (has_useflip()) {
      total_size += 1 + 1;
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float rand_angle = 18 [default = 0];
    if (has_rand_angle()) {
      total_size += 2 + 4;
    }

    // optional float rand_scale = 19 [default = 0];
    if (has_rand_scale()) {
      total_size += 2 + 4;
    }

    // optional float rand_movex = 20 [default = 0];
    if (has_rand_movex()) {
      total_size += 2 + 4;
    }

    // optional float rand_movey = 21 [default = 0];
    if (has_rand_movey()) {
      total_size += 2 + 4;
    }

    // optional uint32 select_num_per_instance = 23 [default = 0];
    if (has_select_num_per_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_num_per_instance());
    }

    // optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
    if (has_datatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

    // optional uint32 lmk_num = 25 [default = 0];
    if (has_lmk_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lmk_num());
    }

    // optional uint32 select_oneinstance_num = 26 [default = 0];
    if (has_select_oneinstance_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->select_oneinstance_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PairImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PairImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PairImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PairImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PairImageDataParameter)
    MergeFrom(*source);
  }
}

void PairImageDataParameter::MergeFrom(const PairImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PairImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resize_type_.MergeFrom(from.resize_type_);
  mean_file_.MergeFrom(from.mean_file_);
  data_height_.MergeFrom(from.data_height_);
  data_width_.MergeFrom(from.data_width_);
  data_channels_.MergeFrom(from.data_channels_);
  data_scale_.MergeFrom(from.data_scale_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00000020u) {
      useflip_ = from.useflip_;
    }
    if (cached_has_bits & 0x00000040u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000080u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      rand_angle_ = from.rand_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      rand_scale_ = from.rand_scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      rand_movex_ = from.rand_movex_;
    }
    if (cached_has_bits & 0x00000800u) {
      rand_movey_ = from.rand_movey_;
    }
    if (cached_has_bits & 0x00001000u) {
      select_num_per_instance_ = from.select_num_per_instance_;
    }
    if (cached_has_bits & 0x00002000u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00004000u) {
      lmk_num_ = from.lmk_num_;
    }
    if (cached_has_bits & 0x00008000u) {
      select_oneinstance_num_ = from.select_oneinstance_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PairImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PairImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairImageDataParameter::CopyFrom(const PairImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PairImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairImageDataParameter::IsInitialized() const {
  return true;
}

void PairImageDataParameter::Swap(PairImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PairImageDataParameter::InternalSwap(PairImageDataParameter* other) {
  using std::swap;
  resize_type_.InternalSwap(&other->resize_type_);
  mean_file_.InternalSwap(&other->mean_file_);
  data_height_.InternalSwap(&other->data_height_);
  data_width_.InternalSwap(&other->data_width_);
  data_channels_.InternalSwap(&other->data_channels_);
  data_scale_.InternalSwap(&other->data_scale_);
  source_.Swap(&other->source_);
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(use_disturb_, other->use_disturb_);
  swap(useflip_, other->useflip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(rand_angle_, other->rand_angle_);
  swap(rand_scale_, other->rand_scale_);
  swap(rand_movex_, other->rand_movex_);
  swap(rand_movey_, other->rand_movey_);
  swap(select_num_per_instance_, other->select_num_per_instance_);
  swap(datatype_, other->datatype_);
  swap(lmk_num_, other->lmk_num_);
  swap(select_oneinstance_num_, other->select_oneinstance_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PairImageDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PairImageDataParameter

// optional string source = 1;
bool PairImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PairImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void PairImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void PairImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& PairImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.source)
  return source_.GetNoArena();
}
void PairImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.source)
}
#if LANG_CXX11
void PairImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PairImageDataParameter.source)
}
#endif
void PairImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PairImageDataParameter.source)
}
void PairImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PairImageDataParameter.source)
}
::std::string* PairImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.PairImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PairImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.PairImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PairImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.PairImageDataParameter.source)
}

// optional bool use_disturb = 14 [default = false];
bool PairImageDataParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PairImageDataParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000010u;
}
void PairImageDataParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000010u;
}
void PairImageDataParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool PairImageDataParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.use_disturb)
  return use_disturb_;
}
void PairImageDataParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
bool PairImageDataParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PairImageDataParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000020u;
}
void PairImageDataParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000020u;
}
void PairImageDataParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
bool PairImageDataParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.useflip)
  return useflip_;
}
void PairImageDataParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.useflip)
}

// optional uint32 batch_size = 4;
bool PairImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PairImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void PairImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void PairImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 PairImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.batch_size)
  return batch_size_;
}
void PairImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool PairImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PairImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
void PairImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
void PairImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 PairImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.rand_skip)
  return rand_skip_;
}
void PairImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool PairImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PairImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000040u;
}
void PairImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000040u;
}
void PairImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool PairImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.shuffle)
  return shuffle_;
}
void PairImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.shuffle)
}

// optional uint32 crop_size = 5 [default = 0];
bool PairImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PairImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
void PairImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void PairImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 PairImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.crop_size)
  return crop_size_;
}
void PairImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool PairImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PairImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void PairImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void PairImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool PairImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.mirror)
  return mirror_;
}
void PairImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.mirror)
}

// repeated uint32 resize_type = 2;
int PairImageDataParameter::resize_type_size() const {
  return resize_type_.size();
}
void PairImageDataParameter::clear_resize_type() {
  resize_type_.Clear();
}
::google::protobuf::uint32 PairImageDataParameter::resize_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.resize_type)
  return resize_type_.Get(index);
}
void PairImageDataParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.resize_type)
}
void PairImageDataParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.resize_type)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::resize_type() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.resize_type)
  return resize_type_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_resize_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.resize_type)
  return &resize_type_;
}

// repeated uint32 data_height = 9;
int PairImageDataParameter::data_height_size() const {
  return data_height_.size();
}
void PairImageDataParameter::clear_data_height() {
  data_height_.Clear();
}
::google::protobuf::uint32 PairImageDataParameter::data_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.data_height)
  return data_height_.Get(index);
}
void PairImageDataParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.data_height)
}
void PairImageDataParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.data_height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_height() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.data_height)
  return data_height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.data_height)
  return &data_height_;
}

// repeated uint32 data_width = 10;
int PairImageDataParameter::data_width_size() const {
  return data_width_.size();
}
void PairImageDataParameter::clear_data_width() {
  data_width_.Clear();
}
::google::protobuf::uint32 PairImageDataParameter::data_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.data_width)
  return data_width_.Get(index);
}
void PairImageDataParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.data_width)
}
void PairImageDataParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.data_width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_width() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.data_width)
  return data_width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.data_width)
  return &data_width_;
}

// repeated uint32 data_channels = 17;
int PairImageDataParameter::data_channels_size() const {
  return data_channels_.size();
}
void PairImageDataParameter::clear_data_channels() {
  data_channels_.Clear();
}
::google::protobuf::uint32 PairImageDataParameter::data_channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.data_channels)
  return data_channels_.Get(index);
}
void PairImageDataParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.data_channels)
}
void PairImageDataParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.data_channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PairImageDataParameter::data_channels() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.data_channels)
  return data_channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PairImageDataParameter::mutable_data_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.data_channels)
  return &data_channels_;
}

// repeated float data_scale = 22;
int PairImageDataParameter::data_scale_size() const {
  return data_scale_.size();
}
void PairImageDataParameter::clear_data_scale() {
  data_scale_.Clear();
}
float PairImageDataParameter::data_scale(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.data_scale)
  return data_scale_.Get(index);
}
void PairImageDataParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.data_scale)
}
void PairImageDataParameter::add_data_scale(float value) {
  data_scale_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.data_scale)
}
const ::google::protobuf::RepeatedField< float >&
PairImageDataParameter::data_scale() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.data_scale)
  return data_scale_;
}
::google::protobuf::RepeatedField< float >*
PairImageDataParameter::mutable_data_scale() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.data_scale)
  return &data_scale_;
}

// repeated string mean_file = 3;
int PairImageDataParameter::mean_file_size() const {
  return mean_file_.size();
}
void PairImageDataParameter::clear_mean_file() {
  mean_file_.Clear();
}
const ::std::string& PairImageDataParameter::mean_file(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.mean_file)
  return mean_file_.Get(index);
}
::std::string* PairImageDataParameter::mutable_mean_file(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.PairImageDataParameter.mean_file)
  return mean_file_.Mutable(index);
}
void PairImageDataParameter::set_mean_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.mean_file)
  mean_file_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PairImageDataParameter::set_mean_file(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.mean_file)
  mean_file_.Mutable(index)->assign(std::move(value));
}
#endif
void PairImageDataParameter::set_mean_file(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.PairImageDataParameter.mean_file)
}
void PairImageDataParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.PairImageDataParameter.mean_file)
}
::std::string* PairImageDataParameter::add_mean_file() {
  // @@protoc_insertion_point(field_add_mutable:caffe.PairImageDataParameter.mean_file)
  return mean_file_.Add();
}
void PairImageDataParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.mean_file)
}
#if LANG_CXX11
void PairImageDataParameter::add_mean_file(::std::string&& value) {
  mean_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.PairImageDataParameter.mean_file)
}
#endif
void PairImageDataParameter::add_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.PairImageDataParameter.mean_file)
}
void PairImageDataParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.PairImageDataParameter.mean_file)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PairImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_list:caffe.PairImageDataParameter.mean_file)
  return mean_file_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PairImageDataParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairImageDataParameter.mean_file)
  return &mean_file_;
}

// optional float rand_angle = 18 [default = 0];
bool PairImageDataParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PairImageDataParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00000100u;
}
void PairImageDataParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void PairImageDataParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
float PairImageDataParameter::rand_angle() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.rand_angle)
  return rand_angle_;
}
void PairImageDataParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.rand_angle)
}

// optional float rand_scale = 19 [default = 0];
bool PairImageDataParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PairImageDataParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void PairImageDataParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void PairImageDataParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
float PairImageDataParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.rand_scale)
  return rand_scale_;
}
void PairImageDataParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.rand_scale)
}

// optional float rand_movex = 20 [default = 0];
bool PairImageDataParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PairImageDataParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00000400u;
}
void PairImageDataParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00000400u;
}
void PairImageDataParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
float PairImageDataParameter::rand_movex() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.rand_movex)
  return rand_movex_;
}
void PairImageDataParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.rand_movex)
}

// optional float rand_movey = 21 [default = 0];
bool PairImageDataParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PairImageDataParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00000800u;
}
void PairImageDataParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00000800u;
}
void PairImageDataParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
float PairImageDataParameter::rand_movey() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.rand_movey)
  return rand_movey_;
}
void PairImageDataParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.rand_movey)
}

// optional uint32 select_num_per_instance = 23 [default = 0];
bool PairImageDataParameter::has_select_num_per_instance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PairImageDataParameter::set_has_select_num_per_instance() {
  _has_bits_[0] |= 0x00001000u;
}
void PairImageDataParameter::clear_has_select_num_per_instance() {
  _has_bits_[0] &= ~0x00001000u;
}
void PairImageDataParameter::clear_select_num_per_instance() {
  select_num_per_instance_ = 0u;
  clear_has_select_num_per_instance();
}
::google::protobuf::uint32 PairImageDataParameter::select_num_per_instance() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.select_num_per_instance)
  return select_num_per_instance_;
}
void PairImageDataParameter::set_select_num_per_instance(::google::protobuf::uint32 value) {
  set_has_select_num_per_instance();
  select_num_per_instance_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.select_num_per_instance)
}

// optional uint32 select_oneinstance_num = 26 [default = 0];
bool PairImageDataParameter::has_select_oneinstance_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PairImageDataParameter::set_has_select_oneinstance_num() {
  _has_bits_[0] |= 0x00008000u;
}
void PairImageDataParameter::clear_has_select_oneinstance_num() {
  _has_bits_[0] &= ~0x00008000u;
}
void PairImageDataParameter::clear_select_oneinstance_num() {
  select_oneinstance_num_ = 0u;
  clear_has_select_oneinstance_num();
}
::google::protobuf::uint32 PairImageDataParameter::select_oneinstance_num() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.select_oneinstance_num)
  return select_oneinstance_num_;
}
void PairImageDataParameter::set_select_oneinstance_num(::google::protobuf::uint32 value) {
  set_has_select_oneinstance_num();
  select_oneinstance_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.select_oneinstance_num)
}

// optional .caffe.PairImageDataParameter.DataType datatype = 24 [default = SINGLEPATCH];
bool PairImageDataParameter::has_datatype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PairImageDataParameter::set_has_datatype() {
  _has_bits_[0] |= 0x00002000u;
}
void PairImageDataParameter::clear_has_datatype() {
  _has_bits_[0] &= ~0x00002000u;
}
void PairImageDataParameter::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::caffe::PairImageDataParameter_DataType PairImageDataParameter::datatype() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.datatype)
  return static_cast< ::caffe::PairImageDataParameter_DataType >(datatype_);
}
void PairImageDataParameter::set_datatype(::caffe::PairImageDataParameter_DataType value) {
  assert(::caffe::PairImageDataParameter_DataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.datatype)
}

// optional uint32 lmk_num = 25 [default = 0];
bool PairImageDataParameter::has_lmk_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PairImageDataParameter::set_has_lmk_num() {
  _has_bits_[0] |= 0x00004000u;
}
void PairImageDataParameter::clear_has_lmk_num() {
  _has_bits_[0] &= ~0x00004000u;
}
void PairImageDataParameter::clear_lmk_num() {
  lmk_num_ = 0u;
  clear_has_lmk_num();
}
::google::protobuf::uint32 PairImageDataParameter::lmk_num() const {
  // @@protoc_insertion_point(field_get:caffe.PairImageDataParameter.lmk_num)
  return lmk_num_;
}
void PairImageDataParameter::set_lmk_num(::google::protobuf::uint32 value) {
  set_has_lmk_num();
  lmk_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairImageDataParameter.lmk_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseCRFParameter::kMaxIterFieldNumber;
const int DenseCRFParameter::kPosXyStdFieldNumber;
const int DenseCRFParameter::kPosWFieldNumber;
const int DenseCRFParameter::kBiXyStdFieldNumber;
const int DenseCRFParameter::kBiRgbStdFieldNumber;
const int DenseCRFParameter::kBiWFieldNumber;
const int DenseCRFParameter::kOutputProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseCRFParameter::DenseCRFParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DenseCRFParameter)
}
DenseCRFParameter::DenseCRFParameter(const DenseCRFParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pos_xy_std_(from.pos_xy_std_),
      pos_w_(from.pos_w_),
      bi_xy_std_(from.bi_xy_std_),
      bi_rgb_std_(from.bi_rgb_std_),
      bi_w_(from.bi_w_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_iter_, &from.max_iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_probability_) -
    reinterpret_cast<char*>(&max_iter_)) + sizeof(output_probability_));
  // @@protoc_insertion_point(copy_constructor:caffe.DenseCRFParameter)
}

void DenseCRFParameter::SharedCtor() {
  _cached_size_ = 0;
  max_iter_ = 10;
  output_probability_ = true;
}

DenseCRFParameter::~DenseCRFParameter() {
  // @@protoc_insertion_point(destructor:caffe.DenseCRFParameter)
  SharedDtor();
}

void DenseCRFParameter::SharedDtor() {
}

void DenseCRFParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseCRFParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DenseCRFParameter& DenseCRFParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DenseCRFParameter* DenseCRFParameter::New(::google::protobuf::Arena* arena) const {
  DenseCRFParameter* n = new DenseCRFParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DenseCRFParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DenseCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_xy_std_.Clear();
  pos_w_.Clear();
  bi_xy_std_.Clear();
  bi_rgb_std_.Clear();
  bi_w_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    max_iter_ = 10;
    output_probability_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DenseCRFParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DenseCRFParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_iter = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pos_xy_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_pos_xy_std())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pos_xy_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pos_w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_pos_w())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pos_w())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bi_xy_std = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_bi_xy_std())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bi_xy_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bi_rgb_std = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_bi_rgb_std())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bi_rgb_std())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float bi_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_bi_w())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bi_w())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool output_probability = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_output_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DenseCRFParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DenseCRFParameter)
  return false;
#undef DO_
}

void DenseCRFParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DenseCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_iter = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iter(), output);
  }

  // repeated float pos_xy_std = 2;
  for (int i = 0, n = this->pos_xy_std_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->pos_xy_std(i), output);
  }

  // repeated float pos_w = 3;
  for (int i = 0, n = this->pos_w_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->pos_w(i), output);
  }

  // repeated float bi_xy_std = 4;
  for (int i = 0, n = this->bi_xy_std_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->bi_xy_std(i), output);
  }

  // repeated float bi_rgb_std = 5;
  for (int i = 0, n = this->bi_rgb_std_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->bi_rgb_std(i), output);
  }

  // repeated float bi_w = 6;
  for (int i = 0, n = this->bi_w_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->bi_w(i), output);
  }

  // optional bool output_probability = 7 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->output_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DenseCRFParameter)
}

::google::protobuf::uint8* DenseCRFParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DenseCRFParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_iter = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iter(), target);
  }

  // repeated float pos_xy_std = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->pos_xy_std_, target);

  // repeated float pos_w = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->pos_w_, target);

  // repeated float bi_xy_std = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->bi_xy_std_, target);

  // repeated float bi_rgb_std = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->bi_rgb_std_, target);

  // repeated float bi_w = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->bi_w_, target);

  // optional bool output_probability = 7 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->output_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DenseCRFParameter)
  return target;
}

size_t DenseCRFParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DenseCRFParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float pos_xy_std = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pos_xy_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pos_xy_std_size());
    total_size += data_size;
  }

  // repeated float pos_w = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pos_w_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pos_w_size());
    total_size += data_size;
  }

  // repeated float bi_xy_std = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bi_xy_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bi_xy_std_size());
    total_size += data_size;
  }

  // repeated float bi_rgb_std = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->bi_rgb_std_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bi_rgb_std_size());
    total_size += data_size;
  }

  // repeated float bi_w = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->bi_w_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bi_w_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 max_iter = 1 [default = 10];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional bool output_probability = 7 [default = true];
    if (has_output_probability()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseCRFParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DenseCRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseCRFParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseCRFParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DenseCRFParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DenseCRFParameter)
    MergeFrom(*source);
  }
}

void DenseCRFParameter::MergeFrom(const DenseCRFParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DenseCRFParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_xy_std_.MergeFrom(from.pos_xy_std_);
  pos_w_.MergeFrom(from.pos_w_);
  bi_xy_std_.MergeFrom(from.bi_xy_std_);
  bi_rgb_std_.MergeFrom(from.bi_rgb_std_);
  bi_w_.MergeFrom(from.bi_w_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00000002u) {
      output_probability_ = from.output_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseCRFParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DenseCRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseCRFParameter::CopyFrom(const DenseCRFParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DenseCRFParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseCRFParameter::IsInitialized() const {
  return true;
}

void DenseCRFParameter::Swap(DenseCRFParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DenseCRFParameter::InternalSwap(DenseCRFParameter* other) {
  using std::swap;
  pos_xy_std_.InternalSwap(&other->pos_xy_std_);
  pos_w_.InternalSwap(&other->pos_w_);
  bi_xy_std_.InternalSwap(&other->bi_xy_std_);
  bi_rgb_std_.InternalSwap(&other->bi_rgb_std_);
  bi_w_.InternalSwap(&other->bi_w_);
  swap(max_iter_, other->max_iter_);
  swap(output_probability_, other->output_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseCRFParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseCRFParameter

// optional int32 max_iter = 1 [default = 10];
bool DenseCRFParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DenseCRFParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
void DenseCRFParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
void DenseCRFParameter::clear_max_iter() {
  max_iter_ = 10;
  clear_has_max_iter();
}
::google::protobuf::int32 DenseCRFParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.max_iter)
  return max_iter_;
}
void DenseCRFParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.max_iter)
}

// repeated float pos_xy_std = 2;
int DenseCRFParameter::pos_xy_std_size() const {
  return pos_xy_std_.size();
}
void DenseCRFParameter::clear_pos_xy_std() {
  pos_xy_std_.Clear();
}
float DenseCRFParameter::pos_xy_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.pos_xy_std)
  return pos_xy_std_.Get(index);
}
void DenseCRFParameter::set_pos_xy_std(int index, float value) {
  pos_xy_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.pos_xy_std)
}
void DenseCRFParameter::add_pos_xy_std(float value) {
  pos_xy_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.pos_xy_std)
}
const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_xy_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.pos_xy_std)
  return pos_xy_std_;
}
::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_xy_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.pos_xy_std)
  return &pos_xy_std_;
}

// repeated float pos_w = 3;
int DenseCRFParameter::pos_w_size() const {
  return pos_w_.size();
}
void DenseCRFParameter::clear_pos_w() {
  pos_w_.Clear();
}
float DenseCRFParameter::pos_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.pos_w)
  return pos_w_.Get(index);
}
void DenseCRFParameter::set_pos_w(int index, float value) {
  pos_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.pos_w)
}
void DenseCRFParameter::add_pos_w(float value) {
  pos_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.pos_w)
}
const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::pos_w() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.pos_w)
  return pos_w_;
}
::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_pos_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.pos_w)
  return &pos_w_;
}

// repeated float bi_xy_std = 4;
int DenseCRFParameter::bi_xy_std_size() const {
  return bi_xy_std_.size();
}
void DenseCRFParameter::clear_bi_xy_std() {
  bi_xy_std_.Clear();
}
float DenseCRFParameter::bi_xy_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_xy_std)
  return bi_xy_std_.Get(index);
}
void DenseCRFParameter::set_bi_xy_std(int index, float value) {
  bi_xy_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_xy_std)
}
void DenseCRFParameter::add_bi_xy_std(float value) {
  bi_xy_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_xy_std)
}
const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_xy_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_xy_std)
  return bi_xy_std_;
}
::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_xy_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_xy_std)
  return &bi_xy_std_;
}

// repeated float bi_rgb_std = 5;
int DenseCRFParameter::bi_rgb_std_size() const {
  return bi_rgb_std_.size();
}
void DenseCRFParameter::clear_bi_rgb_std() {
  bi_rgb_std_.Clear();
}
float DenseCRFParameter::bi_rgb_std(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_rgb_std)
  return bi_rgb_std_.Get(index);
}
void DenseCRFParameter::set_bi_rgb_std(int index, float value) {
  bi_rgb_std_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_rgb_std)
}
void DenseCRFParameter::add_bi_rgb_std(float value) {
  bi_rgb_std_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_rgb_std)
}
const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_rgb_std() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_rgb_std)
  return bi_rgb_std_;
}
::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_rgb_std() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_rgb_std)
  return &bi_rgb_std_;
}

// repeated float bi_w = 6;
int DenseCRFParameter::bi_w_size() const {
  return bi_w_.size();
}
void DenseCRFParameter::clear_bi_w() {
  bi_w_.Clear();
}
float DenseCRFParameter::bi_w(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.bi_w)
  return bi_w_.Get(index);
}
void DenseCRFParameter::set_bi_w(int index, float value) {
  bi_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.bi_w)
}
void DenseCRFParameter::add_bi_w(float value) {
  bi_w_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseCRFParameter.bi_w)
}
const ::google::protobuf::RepeatedField< float >&
DenseCRFParameter::bi_w() const {
  // @@protoc_insertion_point(field_list:caffe.DenseCRFParameter.bi_w)
  return bi_w_;
}
::google::protobuf::RepeatedField< float >*
DenseCRFParameter::mutable_bi_w() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseCRFParameter.bi_w)
  return &bi_w_;
}

// optional bool output_probability = 7 [default = true];
bool DenseCRFParameter::has_output_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DenseCRFParameter::set_has_output_probability() {
  _has_bits_[0] |= 0x00000002u;
}
void DenseCRFParameter::clear_has_output_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
void DenseCRFParameter::clear_output_probability() {
  output_probability_ = true;
  clear_has_output_probability();
}
bool DenseCRFParameter::output_probability() const {
  // @@protoc_insertion_point(field_get:caffe.DenseCRFParameter.output_probability)
  return output_probability_;
}
void DenseCRFParameter::set_output_probability(bool value) {
  set_has_output_probability();
  output_probability_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseCRFParameter.output_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateRecurrentParameter::kNumOutputFieldNumber;
const int GateRecurrentParameter::kUseBiasFieldNumber;
const int GateRecurrentParameter::kUseWxFieldNumber;
const int GateRecurrentParameter::kUseWhFieldNumber;
const int GateRecurrentParameter::kWeightFillerFieldNumber;
const int GateRecurrentParameter::kBiasFillerFieldNumber;
const int GateRecurrentParameter::kHorizontalFieldNumber;
const int GateRecurrentParameter::kReverseFieldNumber;
const int GateRecurrentParameter::kActiveFieldNumber;
const int GateRecurrentParameter::kBoundDiffFieldNumber;
const int GateRecurrentParameter::kRestrictWFieldNumber;
const int GateRecurrentParameter::kRestrictGFieldNumber;
const int GateRecurrentParameter::kUseXGateFieldNumber;
const int GateRecurrentParameter::kUseNewFixFieldNumber;
const int GateRecurrentParameter::kSlashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateRecurrentParameter::GateRecurrentParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateRecurrentParameter)
}
GateRecurrentParameter::GateRecurrentParameter(const GateRecurrentParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&restrict_g_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(restrict_g_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateRecurrentParameter)
}

void GateRecurrentParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slash_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(slash_));
  use_x_gate_ = true;
  use_new_fix_ = true;
  use_bias_ = true;
  use_wx_ = true;
  use_wh_ = true;
  horizontal_ = true;
  bound_diff_ = -1;
  restrict_w_ = -1;
  restrict_g_ = 1;
}

GateRecurrentParameter::~GateRecurrentParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateRecurrentParameter)
  SharedDtor();
}

void GateRecurrentParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void GateRecurrentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRecurrentParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateRecurrentParameter& GateRecurrentParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateRecurrentParameter* GateRecurrentParameter::New(::google::protobuf::Arena* arena) const {
  GateRecurrentParameter* n = new GateRecurrentParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateRecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slash_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(slash_));
    use_x_gate_ = true;
    use_new_fix_ = true;
  }
  if (cached_has_bits & 32512u) {
    use_bias_ = true;
    use_wx_ = true;
    use_wh_ = true;
    horizontal_ = true;
    bound_diff_ = -1;
    restrict_w_ = -1;
    restrict_g_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateRecurrentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateRecurrentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_bias = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_wx = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_use_wx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_wx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_wh = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_wh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_wh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::GateRecurrentParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::GateRecurrentParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bound_diff = 19 [default = -1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_bound_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bound_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restrict_w = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_restrict_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restrict_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restrict_g = 21 [default = 1];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_restrict_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restrict_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_x_gate = 22 [default = true];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_use_x_gate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_x_gate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_new_fix = 23 [default = true];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_use_new_fix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_new_fix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool slash = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_slash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateRecurrentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateRecurrentParameter)
  return false;
#undef DO_
}

void GateRecurrentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool use_bias = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_bias(), output);
  }

  // optional bool use_wx = 3 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_wx(), output);
  }

  // optional bool use_wh = 4 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_wh(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  // optional float bound_diff = 19 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->bound_diff(), output);
  }

  // optional float restrict_w = 20 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->restrict_w(), output);
  }

  // optional float restrict_g = 21 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->restrict_g(), output);
  }

  // optional bool use_x_gate = 22 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_x_gate(), output);
  }

  // optional bool use_new_fix = 23 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->use_new_fix(), output);
  }

  // optional bool slash = 24 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->slash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateRecurrentParameter)
}

::google::protobuf::uint8* GateRecurrentParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool use_bias = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_bias(), target);
  }

  // optional bool use_wx = 3 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_wx(), target);
  }

  // optional bool use_wh = 4 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_wh(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  // optional float bound_diff = 19 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->bound_diff(), target);
  }

  // optional float restrict_w = 20 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->restrict_w(), target);
  }

  // optional float restrict_g = 21 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->restrict_g(), target);
  }

  // optional bool use_x_gate = 22 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_x_gate(), target);
  }

  // optional bool use_new_fix = 23 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->use_new_fix(), target);
  }

  // optional bool slash = 24 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->slash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateRecurrentParameter)
  return target;
}

size_t GateRecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateRecurrentParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional bool slash = 24 [default = false];
    if (has_slash()) {
      total_size += 2 + 1;
    }

    // optional bool use_x_gate = 22 [default = true];
    if (has_use_x_gate()) {
      total_size += 2 + 1;
    }

    // optional bool use_new_fix = 23 [default = true];
    if (has_use_new_fix()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool use_bias = 2 [default = true];
    if (has_use_bias()) {
      total_size += 1 + 1;
    }

    // optional bool use_wx = 3 [default = true];
    if (has_use_wx()) {
      total_size += 1 + 1;
    }

    // optional bool use_wh = 4 [default = true];
    if (has_use_wh()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

    // optional float bound_diff = 19 [default = -1];
    if (has_bound_diff()) {
      total_size += 2 + 4;
    }

    // optional float restrict_w = 20 [default = -1];
    if (has_restrict_w()) {
      total_size += 2 + 4;
    }

    // optional float restrict_g = 21 [default = 1];
    if (has_restrict_g()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateRecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateRecurrentParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateRecurrentParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateRecurrentParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateRecurrentParameter)
    MergeFrom(*source);
  }
}

void GateRecurrentParameter::MergeFrom(const GateRecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateRecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000010u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000020u) {
      slash_ = from.slash_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_x_gate_ = from.use_x_gate_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_new_fix_ = from.use_new_fix_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      use_bias_ = from.use_bias_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_wx_ = from.use_wx_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_wh_ = from.use_wh_;
    }
    if (cached_has_bits & 0x00000800u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00001000u) {
      bound_diff_ = from.bound_diff_;
    }
    if (cached_has_bits & 0x00002000u) {
      restrict_w_ = from.restrict_w_;
    }
    if (cached_has_bits & 0x00004000u) {
      restrict_g_ = from.restrict_g_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateRecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateRecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRecurrentParameter::CopyFrom(const GateRecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateRecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRecurrentParameter::IsInitialized() const {
  return true;
}

void GateRecurrentParameter::Swap(GateRecurrentParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateRecurrentParameter::InternalSwap(GateRecurrentParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(active_, other->active_);
  swap(reverse_, other->reverse_);
  swap(slash_, other->slash_);
  swap(use_x_gate_, other->use_x_gate_);
  swap(use_new_fix_, other->use_new_fix_);
  swap(use_bias_, other->use_bias_);
  swap(use_wx_, other->use_wx_);
  swap(use_wh_, other->use_wh_);
  swap(horizontal_, other->horizontal_);
  swap(bound_diff_, other->bound_diff_);
  swap(restrict_w_, other->restrict_w_);
  swap(restrict_g_, other->restrict_g_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateRecurrentParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateRecurrentParameter

// optional uint32 num_output = 1;
bool GateRecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateRecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void GateRecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateRecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateRecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.num_output)
  return num_output_;
}
void GateRecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.num_output)
}

// optional bool use_bias = 2 [default = true];
bool GateRecurrentParameter::has_use_bias() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GateRecurrentParameter::set_has_use_bias() {
  _has_bits_[0] |= 0x00000100u;
}
void GateRecurrentParameter::clear_has_use_bias() {
  _has_bits_[0] &= ~0x00000100u;
}
void GateRecurrentParameter::clear_use_bias() {
  use_bias_ = true;
  clear_has_use_bias();
}
bool GateRecurrentParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.use_bias)
  return use_bias_;
}
void GateRecurrentParameter::set_use_bias(bool value) {
  set_has_use_bias();
  use_bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.use_bias)
}

// optional bool use_wx = 3 [default = true];
bool GateRecurrentParameter::has_use_wx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GateRecurrentParameter::set_has_use_wx() {
  _has_bits_[0] |= 0x00000200u;
}
void GateRecurrentParameter::clear_has_use_wx() {
  _has_bits_[0] &= ~0x00000200u;
}
void GateRecurrentParameter::clear_use_wx() {
  use_wx_ = true;
  clear_has_use_wx();
}
bool GateRecurrentParameter::use_wx() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.use_wx)
  return use_wx_;
}
void GateRecurrentParameter::set_use_wx(bool value) {
  set_has_use_wx();
  use_wx_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.use_wx)
}

// optional bool use_wh = 4 [default = true];
bool GateRecurrentParameter::has_use_wh() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GateRecurrentParameter::set_has_use_wh() {
  _has_bits_[0] |= 0x00000400u;
}
void GateRecurrentParameter::clear_has_use_wh() {
  _has_bits_[0] &= ~0x00000400u;
}
void GateRecurrentParameter::clear_use_wh() {
  use_wh_ = true;
  clear_has_use_wh();
}
bool GateRecurrentParameter::use_wh() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.use_wh)
  return use_wh_;
}
void GateRecurrentParameter::set_use_wh(bool value) {
  set_has_use_wh();
  use_wh_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.use_wh)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool GateRecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateRecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void GateRecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateRecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& GateRecurrentParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* GateRecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GateRecurrentParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* GateRecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.GateRecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void GateRecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GateRecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool GateRecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateRecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void GateRecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateRecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& GateRecurrentParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* GateRecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GateRecurrentParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* GateRecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.GateRecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void GateRecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GateRecurrentParameter.bias_filler)
}

// optional bool horizontal = 16 [default = true];
bool GateRecurrentParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GateRecurrentParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000800u;
}
void GateRecurrentParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000800u;
}
void GateRecurrentParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateRecurrentParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.horizontal)
  return horizontal_;
}
void GateRecurrentParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool GateRecurrentParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GateRecurrentParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000010u;
}
void GateRecurrentParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000010u;
}
void GateRecurrentParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateRecurrentParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.reverse)
  return reverse_;
}
void GateRecurrentParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.reverse)
}

// optional .caffe.GateRecurrentParameter.Active active = 18 [default = LINEAR];
bool GateRecurrentParameter::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateRecurrentParameter::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
void GateRecurrentParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateRecurrentParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::GateRecurrentParameter_Active GateRecurrentParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.active)
  return static_cast< ::caffe::GateRecurrentParameter_Active >(active_);
}
void GateRecurrentParameter::set_active(::caffe::GateRecurrentParameter_Active value) {
  assert(::caffe::GateRecurrentParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.active)
}

// optional float bound_diff = 19 [default = -1];
bool GateRecurrentParameter::has_bound_diff() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GateRecurrentParameter::set_has_bound_diff() {
  _has_bits_[0] |= 0x00001000u;
}
void GateRecurrentParameter::clear_has_bound_diff() {
  _has_bits_[0] &= ~0x00001000u;
}
void GateRecurrentParameter::clear_bound_diff() {
  bound_diff_ = -1;
  clear_has_bound_diff();
}
float GateRecurrentParameter::bound_diff() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.bound_diff)
  return bound_diff_;
}
void GateRecurrentParameter::set_bound_diff(float value) {
  set_has_bound_diff();
  bound_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.bound_diff)
}

// optional float restrict_w = 20 [default = -1];
bool GateRecurrentParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GateRecurrentParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00002000u;
}
void GateRecurrentParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00002000u;
}
void GateRecurrentParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
float GateRecurrentParameter::restrict_w() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.restrict_w)
  return restrict_w_;
}
void GateRecurrentParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.restrict_w)
}

// optional float restrict_g = 21 [default = 1];
bool GateRecurrentParameter::has_restrict_g() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GateRecurrentParameter::set_has_restrict_g() {
  _has_bits_[0] |= 0x00004000u;
}
void GateRecurrentParameter::clear_has_restrict_g() {
  _has_bits_[0] &= ~0x00004000u;
}
void GateRecurrentParameter::clear_restrict_g() {
  restrict_g_ = 1;
  clear_has_restrict_g();
}
float GateRecurrentParameter::restrict_g() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.restrict_g)
  return restrict_g_;
}
void GateRecurrentParameter::set_restrict_g(float value) {
  set_has_restrict_g();
  restrict_g_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.restrict_g)
}

// optional bool use_x_gate = 22 [default = true];
bool GateRecurrentParameter::has_use_x_gate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GateRecurrentParameter::set_has_use_x_gate() {
  _has_bits_[0] |= 0x00000040u;
}
void GateRecurrentParameter::clear_has_use_x_gate() {
  _has_bits_[0] &= ~0x00000040u;
}
void GateRecurrentParameter::clear_use_x_gate() {
  use_x_gate_ = true;
  clear_has_use_x_gate();
}
bool GateRecurrentParameter::use_x_gate() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.use_x_gate)
  return use_x_gate_;
}
void GateRecurrentParameter::set_use_x_gate(bool value) {
  set_has_use_x_gate();
  use_x_gate_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.use_x_gate)
}

// optional bool use_new_fix = 23 [default = true];
bool GateRecurrentParameter::has_use_new_fix() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GateRecurrentParameter::set_has_use_new_fix() {
  _has_bits_[0] |= 0x00000080u;
}
void GateRecurrentParameter::clear_has_use_new_fix() {
  _has_bits_[0] &= ~0x00000080u;
}
void GateRecurrentParameter::clear_use_new_fix() {
  use_new_fix_ = true;
  clear_has_use_new_fix();
}
bool GateRecurrentParameter::use_new_fix() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.use_new_fix)
  return use_new_fix_;
}
void GateRecurrentParameter::set_use_new_fix(bool value) {
  set_has_use_new_fix();
  use_new_fix_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.use_new_fix)
}

// optional bool slash = 24 [default = false];
bool GateRecurrentParameter::has_slash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GateRecurrentParameter::set_has_slash() {
  _has_bits_[0] |= 0x00000020u;
}
void GateRecurrentParameter::clear_has_slash() {
  _has_bits_[0] &= ~0x00000020u;
}
void GateRecurrentParameter::clear_slash() {
  slash_ = false;
  clear_has_slash();
}
bool GateRecurrentParameter::slash() const {
  // @@protoc_insertion_point(field_get:caffe.GateRecurrentParameter.slash)
  return slash_;
}
void GateRecurrentParameter::set_slash(bool value) {
  set_has_slash();
  slash_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateRecurrentParameter.slash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateLstmParameter::kNumOutputFieldNumber;
const int GateLstmParameter::kBiasTermFieldNumber;
const int GateLstmParameter::kWeightFillerFieldNumber;
const int GateLstmParameter::kBiasFillerFieldNumber;
const int GateLstmParameter::kHorizontalFieldNumber;
const int GateLstmParameter::kReverseFieldNumber;
const int GateLstmParameter::kRestrictWFieldNumber;
const int GateLstmParameter::kPrintallDatadiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateLstmParameter::GateLstmParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.GateLstmParameter)
}
GateLstmParameter::GateLstmParameter(const GateLstmParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&restrict_w_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(restrict_w_));
  // @@protoc_insertion_point(copy_constructor:caffe.GateLstmParameter)
}

void GateLstmParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&printall_datadiff_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(printall_datadiff_));
  bias_term_ = true;
  horizontal_ = true;
  restrict_w_ = -1;
}

GateLstmParameter::~GateLstmParameter() {
  // @@protoc_insertion_point(destructor:caffe.GateLstmParameter)
  SharedDtor();
}

void GateLstmParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void GateLstmParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateLstmParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GateLstmParameter& GateLstmParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

GateLstmParameter* GateLstmParameter::New(::google::protobuf::Arena* arena) const {
  GateLstmParameter* n = new GateLstmParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateLstmParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.GateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&printall_datadiff_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(printall_datadiff_));
    bias_term_ = true;
    horizontal_ = true;
    restrict_w_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GateLstmParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.GateLstmParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restrict_w = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_restrict_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restrict_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool printall_datadiff = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_printall_datadiff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &printall_datadiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.GateLstmParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.GateLstmParameter)
  return false;
#undef DO_
}

void GateLstmParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.GateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional bool horizontal = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->horizontal(), output);
  }

  // optional bool reverse = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reverse(), output);
  }

  // optional float restrict_w = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->restrict_w(), output);
  }

  // optional bool printall_datadiff = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->printall_datadiff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.GateLstmParameter)
}

::google::protobuf::uint8* GateLstmParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.GateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->horizontal(), target);
  }

  // optional bool reverse = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reverse(), target);
  }

  // optional float restrict_w = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->restrict_w(), target);
  }

  // optional bool printall_datadiff = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->printall_datadiff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.GateLstmParameter)
  return target;
}

size_t GateLstmParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.GateLstmParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 6 [default = false];
    if (has_reverse()) {
      total_size += 1 + 1;
    }

    // optional bool printall_datadiff = 8 [default = false];
    if (has_printall_datadiff()) {
      total_size += 1 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 5 [default = true];
    if (has_horizontal()) {
      total_size += 1 + 1;
    }

    // optional float restrict_w = 7 [default = -1];
    if (has_restrict_w()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateLstmParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.GateLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GateLstmParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GateLstmParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.GateLstmParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.GateLstmParameter)
    MergeFrom(*source);
  }
}

void GateLstmParameter::MergeFrom(const GateLstmParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.GateLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      printall_datadiff_ = from.printall_datadiff_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000040u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00000080u) {
      restrict_w_ = from.restrict_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GateLstmParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.GateLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateLstmParameter::CopyFrom(const GateLstmParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.GateLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateLstmParameter::IsInitialized() const {
  return true;
}

void GateLstmParameter::Swap(GateLstmParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateLstmParameter::InternalSwap(GateLstmParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(printall_datadiff_, other->printall_datadiff_);
  swap(bias_term_, other->bias_term_);
  swap(horizontal_, other->horizontal_);
  swap(restrict_w_, other->restrict_w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateLstmParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateLstmParameter

// optional uint32 num_output = 1;
bool GateLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void GateLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 GateLstmParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.num_output)
  return num_output_;
}
void GateLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool GateLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GateLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
void GateLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void GateLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool GateLstmParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.bias_term)
  return bias_term_;
}
void GateLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool GateLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void GateLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& GateLstmParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* GateLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GateLstmParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* GateLstmParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.GateLstmParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void GateLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GateLstmParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool GateLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void GateLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& GateLstmParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* GateLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.GateLstmParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* GateLstmParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.GateLstmParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void GateLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.GateLstmParameter.bias_filler)
}

// optional bool horizontal = 5 [default = true];
bool GateLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GateLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000040u;
}
void GateLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000040u;
}
void GateLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool GateLstmParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.horizontal)
  return horizontal_;
}
void GateLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.horizontal)
}

// optional bool reverse = 6 [default = false];
bool GateLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void GateLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool GateLstmParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.reverse)
  return reverse_;
}
void GateLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.reverse)
}

// optional float restrict_w = 7 [default = -1];
bool GateLstmParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GateLstmParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000080u;
}
void GateLstmParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void GateLstmParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
float GateLstmParameter::restrict_w() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.restrict_w)
  return restrict_w_;
}
void GateLstmParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.restrict_w)
}

// optional bool printall_datadiff = 8 [default = false];
bool GateLstmParameter::has_printall_datadiff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GateLstmParameter::set_has_printall_datadiff() {
  _has_bits_[0] |= 0x00000010u;
}
void GateLstmParameter::clear_has_printall_datadiff() {
  _has_bits_[0] &= ~0x00000010u;
}
void GateLstmParameter::clear_printall_datadiff() {
  printall_datadiff_ = false;
  clear_has_printall_datadiff();
}
bool GateLstmParameter::printall_datadiff() const {
  // @@protoc_insertion_point(field_get:caffe.GateLstmParameter.printall_datadiff)
  return printall_datadiff_;
}
void GateLstmParameter::set_printall_datadiff(bool value) {
  set_has_printall_datadiff();
  printall_datadiff_ = value;
  // @@protoc_insertion_point(field_set:caffe.GateLstmParameter.printall_datadiff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardSampleParameter::kPosUseRatioFieldNumber;
const int HardSampleParameter::kNegUseRatioFieldNumber;
const int HardSampleParameter::kPosHardRatioFieldNumber;
const int HardSampleParameter::kNegHardRatioFieldNumber;
const int HardSampleParameter::kNegComparePosRatioFieldNumber;
const int HardSampleParameter::kPosIgnoreHardestRatioFieldNumber;
const int HardSampleParameter::kNegIgnoreHardestRatioFieldNumber;
const int HardSampleParameter::kMaxIgnorePosHardestNumFieldNumber;
const int HardSampleParameter::kMaxIgnoreNegHardestNumFieldNumber;
const int HardSampleParameter::kNegMarginFieldNumber;
const int HardSampleParameter::kPosMarginFieldNumber;
const int HardSampleParameter::kUseHardsampleFieldNumber;
const int HardSampleParameter::kMinNegNumFieldNumber;
const int HardSampleParameter::kMinPosNumFieldNumber;
const int HardSampleParameter::kPrintInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardSampleParameter::HardSampleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HardSampleParameter)
}
HardSampleParameter::HardSampleParameter(const HardSampleParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_ignore_hardest_ratio_, &from.pos_ignore_hardest_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&neg_hard_ratio_) -
    reinterpret_cast<char*>(&pos_ignore_hardest_ratio_)) + sizeof(neg_hard_ratio_));
  // @@protoc_insertion_point(copy_constructor:caffe.HardSampleParameter)
}

void HardSampleParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_ignore_hardest_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_info_) -
      reinterpret_cast<char*>(&pos_ignore_hardest_ratio_)) + sizeof(print_info_));
  pos_use_ratio_ = 0.5f;
  neg_compare_pos_ratio_ = -1;
  use_hardsample_ = true;
  neg_use_ratio_ = 0.5f;
  pos_hard_ratio_ = 0.5f;
  neg_hard_ratio_ = 0.5f;
}

HardSampleParameter::~HardSampleParameter() {
  // @@protoc_insertion_point(destructor:caffe.HardSampleParameter)
  SharedDtor();
}

void HardSampleParameter::SharedDtor() {
}

void HardSampleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardSampleParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HardSampleParameter& HardSampleParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardSampleParameter* HardSampleParameter::New(::google::protobuf::Arena* arena) const {
  HardSampleParameter* n = new HardSampleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardSampleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HardSampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&pos_ignore_hardest_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ignore_neg_hardest_num_) -
        reinterpret_cast<char*>(&pos_ignore_hardest_ratio_)) + sizeof(max_ignore_neg_hardest_num_));
  }
  if (cached_has_bits & 32512u) {
    print_info_ = false;
    pos_use_ratio_ = 0.5f;
    neg_compare_pos_ratio_ = -1;
    use_hardsample_ = true;
    neg_use_ratio_ = 0.5f;
    pos_hard_ratio_ = 0.5f;
    neg_hard_ratio_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HardSampleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HardSampleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pos_use_ratio = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_pos_use_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_use_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_compare_pos_ratio = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_neg_compare_pos_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_compare_pos_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_ignore_hardest_ratio = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_pos_ignore_hardest_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_ignore_hardest_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_ignore_hardest_ratio = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_neg_ignore_hardest_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_ignore_hardest_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neg_margin = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_neg_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neg_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos_margin = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_pos_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_hardsample = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_use_hardsample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_hardsample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_use_ratio = 8 [default = 0.5];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_neg_use_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_use_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_neg_num = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_min_neg_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_neg_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_pos_num = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_min_pos_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_pos_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_hard_ratio = 11 [default = 0.5];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_pos_hard_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_hard_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neg_hard_ratio = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_neg_hard_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_hard_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_ignore_pos_hardest_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ignore_pos_hardest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_ignore_neg_hardest_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ignore_neg_hardest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_info = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_print_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HardSampleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HardSampleParameter)
  return false;
#undef DO_
}

void HardSampleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HardSampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_use_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pos_use_ratio(), output);
  }

  // optional float neg_compare_pos_ratio = 2 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->neg_compare_pos_ratio(), output);
  }

  // optional float pos_ignore_hardest_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_ignore_hardest_ratio(), output);
  }

  // optional float neg_ignore_hardest_ratio = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->neg_ignore_hardest_ratio(), output);
  }

  // optional uint32 neg_margin = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->neg_margin(), output);
  }

  // optional uint32 pos_margin = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos_margin(), output);
  }

  // optional bool use_hardsample = 7 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_hardsample(), output);
  }

  // optional float neg_use_ratio = 8 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->neg_use_ratio(), output);
  }

  // optional uint32 min_neg_num = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->min_neg_num(), output);
  }

  // optional uint32 min_pos_num = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min_pos_num(), output);
  }

  // optional float pos_hard_ratio = 11 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pos_hard_ratio(), output);
  }

  // optional float neg_hard_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->neg_hard_ratio(), output);
  }

  // optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_ignore_pos_hardest_num(), output);
  }

  // optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_ignore_neg_hardest_num(), output);
  }

  // optional bool print_info = 15 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->print_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HardSampleParameter)
}

::google::protobuf::uint8* HardSampleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HardSampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_use_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pos_use_ratio(), target);
  }

  // optional float neg_compare_pos_ratio = 2 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->neg_compare_pos_ratio(), target);
  }

  // optional float pos_ignore_hardest_ratio = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_ignore_hardest_ratio(), target);
  }

  // optional float neg_ignore_hardest_ratio = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->neg_ignore_hardest_ratio(), target);
  }

  // optional uint32 neg_margin = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->neg_margin(), target);
  }

  // optional uint32 pos_margin = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos_margin(), target);
  }

  // optional bool use_hardsample = 7 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_hardsample(), target);
  }

  // optional float neg_use_ratio = 8 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->neg_use_ratio(), target);
  }

  // optional uint32 min_neg_num = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->min_neg_num(), target);
  }

  // optional uint32 min_pos_num = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min_pos_num(), target);
  }

  // optional float pos_hard_ratio = 11 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pos_hard_ratio(), target);
  }

  // optional float neg_hard_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->neg_hard_ratio(), target);
  }

  // optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_ignore_pos_hardest_num(), target);
  }

  // optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_ignore_neg_hardest_num(), target);
  }

  // optional bool print_info = 15 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->print_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HardSampleParameter)
  return target;
}

size_t HardSampleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HardSampleParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float pos_ignore_hardest_ratio = 3 [default = 0];
    if (has_pos_ignore_hardest_ratio()) {
      total_size += 1 + 4;
    }

    // optional float neg_ignore_hardest_ratio = 4 [default = 0];
    if (has_neg_ignore_hardest_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 neg_margin = 5 [default = 0];
    if (has_neg_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neg_margin());
    }

    // optional uint32 pos_margin = 6 [default = 0];
    if (has_pos_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_margin());
    }

    // optional uint32 min_neg_num = 9 [default = 0];
    if (has_min_neg_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_neg_num());
    }

    // optional uint32 min_pos_num = 10 [default = 0];
    if (has_min_pos_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_pos_num());
    }

    // optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
    if (has_max_ignore_pos_hardest_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ignore_pos_hardest_num());
    }

    // optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
    if (has_max_ignore_neg_hardest_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ignore_neg_hardest_num());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool print_info = 15 [default = false];
    if (has_print_info()) {
      total_size += 1 + 1;
    }

    // optional float pos_use_ratio = 1 [default = 0.5];
    if (has_pos_use_ratio()) {
      total_size += 1 + 4;
    }

    // optional float neg_compare_pos_ratio = 2 [default = -1];
    if (has_neg_compare_pos_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool use_hardsample = 7 [default = true];
    if (has_use_hardsample()) {
      total_size += 1 + 1;
    }

    // optional float neg_use_ratio = 8 [default = 0.5];
    if (has_neg_use_ratio()) {
      total_size += 1 + 4;
    }

    // optional float pos_hard_ratio = 11 [default = 0.5];
    if (has_pos_hard_ratio()) {
      total_size += 1 + 4;
    }

    // optional float neg_hard_ratio = 12 [default = 0.5];
    if (has_neg_hard_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardSampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HardSampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HardSampleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardSampleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HardSampleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HardSampleParameter)
    MergeFrom(*source);
  }
}

void HardSampleParameter::MergeFrom(const HardSampleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HardSampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pos_ignore_hardest_ratio_ = from.pos_ignore_hardest_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      neg_ignore_hardest_ratio_ = from.neg_ignore_hardest_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      neg_margin_ = from.neg_margin_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_margin_ = from.pos_margin_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_neg_num_ = from.min_neg_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_pos_num_ = from.min_pos_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_ignore_pos_hardest_num_ = from.max_ignore_pos_hardest_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_ignore_neg_hardest_num_ = from.max_ignore_neg_hardest_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      print_info_ = from.print_info_;
    }
    if (cached_has_bits & 0x00000200u) {
      pos_use_ratio_ = from.pos_use_ratio_;
    }
    if (cached_has_bits & 0x00000400u) {
      neg_compare_pos_ratio_ = from.neg_compare_pos_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_hardsample_ = from.use_hardsample_;
    }
    if (cached_has_bits & 0x00001000u) {
      neg_use_ratio_ = from.neg_use_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      pos_hard_ratio_ = from.pos_hard_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      neg_hard_ratio_ = from.neg_hard_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HardSampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HardSampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardSampleParameter::CopyFrom(const HardSampleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HardSampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardSampleParameter::IsInitialized() const {
  return true;
}

void HardSampleParameter::Swap(HardSampleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardSampleParameter::InternalSwap(HardSampleParameter* other) {
  using std::swap;
  swap(pos_ignore_hardest_ratio_, other->pos_ignore_hardest_ratio_);
  swap(neg_ignore_hardest_ratio_, other->neg_ignore_hardest_ratio_);
  swap(neg_margin_, other->neg_margin_);
  swap(pos_margin_, other->pos_margin_);
  swap(min_neg_num_, other->min_neg_num_);
  swap(min_pos_num_, other->min_pos_num_);
  swap(max_ignore_pos_hardest_num_, other->max_ignore_pos_hardest_num_);
  swap(max_ignore_neg_hardest_num_, other->max_ignore_neg_hardest_num_);
  swap(print_info_, other->print_info_);
  swap(pos_use_ratio_, other->pos_use_ratio_);
  swap(neg_compare_pos_ratio_, other->neg_compare_pos_ratio_);
  swap(use_hardsample_, other->use_hardsample_);
  swap(neg_use_ratio_, other->neg_use_ratio_);
  swap(pos_hard_ratio_, other->pos_hard_ratio_);
  swap(neg_hard_ratio_, other->neg_hard_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardSampleParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardSampleParameter

// optional float pos_use_ratio = 1 [default = 0.5];
bool HardSampleParameter::has_pos_use_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HardSampleParameter::set_has_pos_use_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
void HardSampleParameter::clear_has_pos_use_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
void HardSampleParameter::clear_pos_use_ratio() {
  pos_use_ratio_ = 0.5f;
  clear_has_pos_use_ratio();
}
float HardSampleParameter::pos_use_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.pos_use_ratio)
  return pos_use_ratio_;
}
void HardSampleParameter::set_pos_use_ratio(float value) {
  set_has_pos_use_ratio();
  pos_use_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.pos_use_ratio)
}

// optional float neg_use_ratio = 8 [default = 0.5];
bool HardSampleParameter::has_neg_use_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void HardSampleParameter::set_has_neg_use_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
void HardSampleParameter::clear_has_neg_use_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
void HardSampleParameter::clear_neg_use_ratio() {
  neg_use_ratio_ = 0.5f;
  clear_has_neg_use_ratio();
}
float HardSampleParameter::neg_use_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.neg_use_ratio)
  return neg_use_ratio_;
}
void HardSampleParameter::set_neg_use_ratio(float value) {
  set_has_neg_use_ratio();
  neg_use_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.neg_use_ratio)
}

// optional float pos_hard_ratio = 11 [default = 0.5];
bool HardSampleParameter::has_pos_hard_ratio() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void HardSampleParameter::set_has_pos_hard_ratio() {
  _has_bits_[0] |= 0x00002000u;
}
void HardSampleParameter::clear_has_pos_hard_ratio() {
  _has_bits_[0] &= ~0x00002000u;
}
void HardSampleParameter::clear_pos_hard_ratio() {
  pos_hard_ratio_ = 0.5f;
  clear_has_pos_hard_ratio();
}
float HardSampleParameter::pos_hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.pos_hard_ratio)
  return pos_hard_ratio_;
}
void HardSampleParameter::set_pos_hard_ratio(float value) {
  set_has_pos_hard_ratio();
  pos_hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.pos_hard_ratio)
}

// optional float neg_hard_ratio = 12 [default = 0.5];
bool HardSampleParameter::has_neg_hard_ratio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void HardSampleParameter::set_has_neg_hard_ratio() {
  _has_bits_[0] |= 0x00004000u;
}
void HardSampleParameter::clear_has_neg_hard_ratio() {
  _has_bits_[0] &= ~0x00004000u;
}
void HardSampleParameter::clear_neg_hard_ratio() {
  neg_hard_ratio_ = 0.5f;
  clear_has_neg_hard_ratio();
}
float HardSampleParameter::neg_hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.neg_hard_ratio)
  return neg_hard_ratio_;
}
void HardSampleParameter::set_neg_hard_ratio(float value) {
  set_has_neg_hard_ratio();
  neg_hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.neg_hard_ratio)
}

// optional float neg_compare_pos_ratio = 2 [default = -1];
bool HardSampleParameter::has_neg_compare_pos_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HardSampleParameter::set_has_neg_compare_pos_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
void HardSampleParameter::clear_has_neg_compare_pos_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
void HardSampleParameter::clear_neg_compare_pos_ratio() {
  neg_compare_pos_ratio_ = -1;
  clear_has_neg_compare_pos_ratio();
}
float HardSampleParameter::neg_compare_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.neg_compare_pos_ratio)
  return neg_compare_pos_ratio_;
}
void HardSampleParameter::set_neg_compare_pos_ratio(float value) {
  set_has_neg_compare_pos_ratio();
  neg_compare_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.neg_compare_pos_ratio)
}

// optional float pos_ignore_hardest_ratio = 3 [default = 0];
bool HardSampleParameter::has_pos_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardSampleParameter::set_has_pos_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void HardSampleParameter::clear_has_pos_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardSampleParameter::clear_pos_ignore_hardest_ratio() {
  pos_ignore_hardest_ratio_ = 0;
  clear_has_pos_ignore_hardest_ratio();
}
float HardSampleParameter::pos_ignore_hardest_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.pos_ignore_hardest_ratio)
  return pos_ignore_hardest_ratio_;
}
void HardSampleParameter::set_pos_ignore_hardest_ratio(float value) {
  set_has_pos_ignore_hardest_ratio();
  pos_ignore_hardest_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.pos_ignore_hardest_ratio)
}

// optional float neg_ignore_hardest_ratio = 4 [default = 0];
bool HardSampleParameter::has_neg_ignore_hardest_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardSampleParameter::set_has_neg_ignore_hardest_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void HardSampleParameter::clear_has_neg_ignore_hardest_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardSampleParameter::clear_neg_ignore_hardest_ratio() {
  neg_ignore_hardest_ratio_ = 0;
  clear_has_neg_ignore_hardest_ratio();
}
float HardSampleParameter::neg_ignore_hardest_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.neg_ignore_hardest_ratio)
  return neg_ignore_hardest_ratio_;
}
void HardSampleParameter::set_neg_ignore_hardest_ratio(float value) {
  set_has_neg_ignore_hardest_ratio();
  neg_ignore_hardest_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.neg_ignore_hardest_ratio)
}

// optional uint32 max_ignore_pos_hardest_num = 13 [default = 0];
bool HardSampleParameter::has_max_ignore_pos_hardest_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HardSampleParameter::set_has_max_ignore_pos_hardest_num() {
  _has_bits_[0] |= 0x00000040u;
}
void HardSampleParameter::clear_has_max_ignore_pos_hardest_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void HardSampleParameter::clear_max_ignore_pos_hardest_num() {
  max_ignore_pos_hardest_num_ = 0u;
  clear_has_max_ignore_pos_hardest_num();
}
::google::protobuf::uint32 HardSampleParameter::max_ignore_pos_hardest_num() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.max_ignore_pos_hardest_num)
  return max_ignore_pos_hardest_num_;
}
void HardSampleParameter::set_max_ignore_pos_hardest_num(::google::protobuf::uint32 value) {
  set_has_max_ignore_pos_hardest_num();
  max_ignore_pos_hardest_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.max_ignore_pos_hardest_num)
}

// optional uint32 max_ignore_neg_hardest_num = 14 [default = 0];
bool HardSampleParameter::has_max_ignore_neg_hardest_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HardSampleParameter::set_has_max_ignore_neg_hardest_num() {
  _has_bits_[0] |= 0x00000080u;
}
void HardSampleParameter::clear_has_max_ignore_neg_hardest_num() {
  _has_bits_[0] &= ~0x00000080u;
}
void HardSampleParameter::clear_max_ignore_neg_hardest_num() {
  max_ignore_neg_hardest_num_ = 0u;
  clear_has_max_ignore_neg_hardest_num();
}
::google::protobuf::uint32 HardSampleParameter::max_ignore_neg_hardest_num() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.max_ignore_neg_hardest_num)
  return max_ignore_neg_hardest_num_;
}
void HardSampleParameter::set_max_ignore_neg_hardest_num(::google::protobuf::uint32 value) {
  set_has_max_ignore_neg_hardest_num();
  max_ignore_neg_hardest_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.max_ignore_neg_hardest_num)
}

// optional uint32 neg_margin = 5 [default = 0];
bool HardSampleParameter::has_neg_margin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HardSampleParameter::set_has_neg_margin() {
  _has_bits_[0] |= 0x00000004u;
}
void HardSampleParameter::clear_has_neg_margin() {
  _has_bits_[0] &= ~0x00000004u;
}
void HardSampleParameter::clear_neg_margin() {
  neg_margin_ = 0u;
  clear_has_neg_margin();
}
::google::protobuf::uint32 HardSampleParameter::neg_margin() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.neg_margin)
  return neg_margin_;
}
void HardSampleParameter::set_neg_margin(::google::protobuf::uint32 value) {
  set_has_neg_margin();
  neg_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.neg_margin)
}

// optional uint32 pos_margin = 6 [default = 0];
bool HardSampleParameter::has_pos_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HardSampleParameter::set_has_pos_margin() {
  _has_bits_[0] |= 0x00000008u;
}
void HardSampleParameter::clear_has_pos_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
void HardSampleParameter::clear_pos_margin() {
  pos_margin_ = 0u;
  clear_has_pos_margin();
}
::google::protobuf::uint32 HardSampleParameter::pos_margin() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.pos_margin)
  return pos_margin_;
}
void HardSampleParameter::set_pos_margin(::google::protobuf::uint32 value) {
  set_has_pos_margin();
  pos_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.pos_margin)
}

// optional bool use_hardsample = 7 [default = true];
bool HardSampleParameter::has_use_hardsample() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void HardSampleParameter::set_has_use_hardsample() {
  _has_bits_[0] |= 0x00000800u;
}
void HardSampleParameter::clear_has_use_hardsample() {
  _has_bits_[0] &= ~0x00000800u;
}
void HardSampleParameter::clear_use_hardsample() {
  use_hardsample_ = true;
  clear_has_use_hardsample();
}
bool HardSampleParameter::use_hardsample() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.use_hardsample)
  return use_hardsample_;
}
void HardSampleParameter::set_use_hardsample(bool value) {
  set_has_use_hardsample();
  use_hardsample_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.use_hardsample)
}

// optional uint32 min_neg_num = 9 [default = 0];
bool HardSampleParameter::has_min_neg_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HardSampleParameter::set_has_min_neg_num() {
  _has_bits_[0] |= 0x00000010u;
}
void HardSampleParameter::clear_has_min_neg_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void HardSampleParameter::clear_min_neg_num() {
  min_neg_num_ = 0u;
  clear_has_min_neg_num();
}
::google::protobuf::uint32 HardSampleParameter::min_neg_num() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.min_neg_num)
  return min_neg_num_;
}
void HardSampleParameter::set_min_neg_num(::google::protobuf::uint32 value) {
  set_has_min_neg_num();
  min_neg_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.min_neg_num)
}

// optional uint32 min_pos_num = 10 [default = 0];
bool HardSampleParameter::has_min_pos_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HardSampleParameter::set_has_min_pos_num() {
  _has_bits_[0] |= 0x00000020u;
}
void HardSampleParameter::clear_has_min_pos_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void HardSampleParameter::clear_min_pos_num() {
  min_pos_num_ = 0u;
  clear_has_min_pos_num();
}
::google::protobuf::uint32 HardSampleParameter::min_pos_num() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.min_pos_num)
  return min_pos_num_;
}
void HardSampleParameter::set_min_pos_num(::google::protobuf::uint32 value) {
  set_has_min_pos_num();
  min_pos_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.min_pos_num)
}

// optional bool print_info = 15 [default = false];
bool HardSampleParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HardSampleParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000100u;
}
void HardSampleParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void HardSampleParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
bool HardSampleParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.HardSampleParameter.print_info)
  return print_info_;
}
void HardSampleParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.HardSampleParameter.print_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuperCropParameter::kTypeFieldNumber;
const int SuperCropParameter::kCropWFieldNumber;
const int SuperCropParameter::kCropHFieldNumber;
const int SuperCropParameter::kPrintInfoFieldNumber;
const int SuperCropParameter::kPointFixHFieldNumber;
const int SuperCropParameter::kPointFixWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuperCropParameter::SuperCropParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SuperCropParameter)
}
SuperCropParameter::SuperCropParameter(const SuperCropParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&crop_w_, &from.crop_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&crop_w_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:caffe.SuperCropParameter)
}

void SuperCropParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&crop_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_fix_w_) -
      reinterpret_cast<char*>(&crop_w_)) + sizeof(point_fix_w_));
  type_ = 1;
}

SuperCropParameter::~SuperCropParameter() {
  // @@protoc_insertion_point(destructor:caffe.SuperCropParameter)
  SharedDtor();
}

void SuperCropParameter::SharedDtor() {
}

void SuperCropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperCropParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuperCropParameter& SuperCropParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SuperCropParameter* SuperCropParameter::New(::google::protobuf::Arena* arena) const {
  SuperCropParameter* n = new SuperCropParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuperCropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SuperCropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&crop_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point_fix_w_) -
        reinterpret_cast<char*>(&crop_w_)) + sizeof(point_fix_w_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SuperCropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SuperCropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SuperCropParameter_Type_IsValid(value)) {
            set_type(static_cast< ::caffe::SuperCropParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_w = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_crop_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_h = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_crop_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_info = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_print_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 point_fix_h = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_point_fix_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_fix_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 point_fix_w = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_point_fix_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_fix_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SuperCropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SuperCropParameter)
  return false;
#undef DO_
}

void SuperCropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SuperCropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 crop_w = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crop_w(), output);
  }

  // optional uint32 crop_h = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_h(), output);
  }

  // optional bool print_info = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->print_info(), output);
  }

  // optional uint32 point_fix_h = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->point_fix_h(), output);
  }

  // optional uint32 point_fix_w = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->point_fix_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SuperCropParameter)
}

::google::protobuf::uint8* SuperCropParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SuperCropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 crop_w = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crop_w(), target);
  }

  // optional uint32 crop_h = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_h(), target);
  }

  // optional bool print_info = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->print_info(), target);
  }

  // optional uint32 point_fix_h = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->point_fix_h(), target);
  }

  // optional uint32 point_fix_w = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->point_fix_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SuperCropParameter)
  return target;
}

size_t SuperCropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SuperCropParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 crop_w = 2 [default = 0];
    if (has_crop_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_w());
    }

    // optional uint32 crop_h = 3 [default = 0];
    if (has_crop_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_h());
    }

    // optional bool print_info = 4 [default = false];
    if (has_print_info()) {
      total_size += 1 + 1;
    }

    // optional uint32 point_fix_h = 5 [default = 0];
    if (has_point_fix_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point_fix_h());
    }

    // optional uint32 point_fix_w = 6 [default = 0];
    if (has_point_fix_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point_fix_w());
    }

    // optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperCropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SuperCropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SuperCropParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuperCropParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SuperCropParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SuperCropParameter)
    MergeFrom(*source);
  }
}

void SuperCropParameter::MergeFrom(const SuperCropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SuperCropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      crop_w_ = from.crop_w_;
    }
    if (cached_has_bits & 0x00000002u) {
      crop_h_ = from.crop_h_;
    }
    if (cached_has_bits & 0x00000004u) {
      print_info_ = from.print_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      point_fix_h_ = from.point_fix_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      point_fix_w_ = from.point_fix_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuperCropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SuperCropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperCropParameter::CopyFrom(const SuperCropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SuperCropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperCropParameter::IsInitialized() const {
  return true;
}

void SuperCropParameter::Swap(SuperCropParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuperCropParameter::InternalSwap(SuperCropParameter* other) {
  using std::swap;
  swap(crop_w_, other->crop_w_);
  swap(crop_h_, other->crop_h_);
  swap(print_info_, other->print_info_);
  swap(point_fix_h_, other->point_fix_h_);
  swap(point_fix_w_, other->point_fix_w_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuperCropParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SuperCropParameter

// optional .caffe.SuperCropParameter.Type type = 1 [default = CENTER];
bool SuperCropParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SuperCropParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SuperCropParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SuperCropParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
::caffe::SuperCropParameter_Type SuperCropParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.type)
  return static_cast< ::caffe::SuperCropParameter_Type >(type_);
}
void SuperCropParameter::set_type(::caffe::SuperCropParameter_Type value) {
  assert(::caffe::SuperCropParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.type)
}

// optional uint32 crop_w = 2 [default = 0];
bool SuperCropParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SuperCropParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000001u;
}
void SuperCropParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void SuperCropParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
::google::protobuf::uint32 SuperCropParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.crop_w)
  return crop_w_;
}
void SuperCropParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.crop_w)
}

// optional uint32 crop_h = 3 [default = 0];
bool SuperCropParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SuperCropParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000002u;
}
void SuperCropParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void SuperCropParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
::google::protobuf::uint32 SuperCropParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.crop_h)
  return crop_h_;
}
void SuperCropParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.crop_h)
}

// optional bool print_info = 4 [default = false];
bool SuperCropParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SuperCropParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000004u;
}
void SuperCropParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void SuperCropParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
bool SuperCropParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.print_info)
  return print_info_;
}
void SuperCropParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.print_info)
}

// optional uint32 point_fix_h = 5 [default = 0];
bool SuperCropParameter::has_point_fix_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SuperCropParameter::set_has_point_fix_h() {
  _has_bits_[0] |= 0x00000008u;
}
void SuperCropParameter::clear_has_point_fix_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void SuperCropParameter::clear_point_fix_h() {
  point_fix_h_ = 0u;
  clear_has_point_fix_h();
}
::google::protobuf::uint32 SuperCropParameter::point_fix_h() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.point_fix_h)
  return point_fix_h_;
}
void SuperCropParameter::set_point_fix_h(::google::protobuf::uint32 value) {
  set_has_point_fix_h();
  point_fix_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.point_fix_h)
}

// optional uint32 point_fix_w = 6 [default = 0];
bool SuperCropParameter::has_point_fix_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SuperCropParameter::set_has_point_fix_w() {
  _has_bits_[0] |= 0x00000010u;
}
void SuperCropParameter::clear_has_point_fix_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void SuperCropParameter::clear_point_fix_w() {
  point_fix_w_ = 0u;
  clear_has_point_fix_w();
}
::google::protobuf::uint32 SuperCropParameter::point_fix_w() const {
  // @@protoc_insertion_point(field_get:caffe.SuperCropParameter.point_fix_w)
  return point_fix_w_;
}
void SuperCropParameter::set_point_fix_w(::google::protobuf::uint32 value) {
  set_has_point_fix_w();
  point_fix_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.SuperCropParameter.point_fix_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMetricLossParameter::kLosstypeFieldNumber;
const int MapMetricLossParameter::kSimRatioFieldNumber;
const int MapMetricLossParameter::kDisRatioFieldNumber;
const int MapMetricLossParameter::kSimMarginFieldNumber;
const int MapMetricLossParameter::kDisMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMetricLossParameter::MapMetricLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MapMetricLossParameter)
}
MapMetricLossParameter::MapMetricLossParameter(const MapMetricLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sim_margin_, &from.sim_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&dis_margin_) -
    reinterpret_cast<char*>(&sim_margin_)) + sizeof(dis_margin_));
  // @@protoc_insertion_point(copy_constructor:caffe.MapMetricLossParameter)
}

void MapMetricLossParameter::SharedCtor() {
  _cached_size_ = 0;
  sim_margin_ = 0;
  losstype_ = 1;
  sim_ratio_ = 1;
  dis_ratio_ = 1;
  dis_margin_ = 1;
}

MapMetricLossParameter::~MapMetricLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.MapMetricLossParameter)
  SharedDtor();
}

void MapMetricLossParameter::SharedDtor() {
}

void MapMetricLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMetricLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMetricLossParameter& MapMetricLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapMetricLossParameter* MapMetricLossParameter::New(::google::protobuf::Arena* arena) const {
  MapMetricLossParameter* n = new MapMetricLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMetricLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MapMetricLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    sim_margin_ = 0;
    losstype_ = 1;
    sim_ratio_ = 1;
    dis_ratio_ = 1;
    dis_margin_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapMetricLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MapMetricLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::MapMetricLossParameter_LossType_IsValid(value)) {
            set_losstype(static_cast< ::caffe::MapMetricLossParameter_LossType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sim_ratio = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_sim_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dis_ratio = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_dis_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sim_margin = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_sim_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sim_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dis_margin = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_dis_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MapMetricLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MapMetricLossParameter)
  return false;
#undef DO_
}

void MapMetricLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MapMetricLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->losstype(), output);
  }

  // optional float sim_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sim_ratio(), output);
  }

  // optional float dis_ratio = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dis_ratio(), output);
  }

  // optional float sim_margin = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sim_margin(), output);
  }

  // optional float dis_margin = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dis_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MapMetricLossParameter)
}

::google::protobuf::uint8* MapMetricLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MapMetricLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->losstype(), target);
  }

  // optional float sim_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sim_ratio(), target);
  }

  // optional float dis_ratio = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dis_ratio(), target);
  }

  // optional float sim_margin = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sim_margin(), target);
  }

  // optional float dis_margin = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dis_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MapMetricLossParameter)
  return target;
}

size_t MapMetricLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MapMetricLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float sim_margin = 5 [default = 0];
    if (has_sim_margin()) {
      total_size += 1 + 4;
    }

    // optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
    if (has_losstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->losstype());
    }

    // optional float sim_ratio = 2 [default = 1];
    if (has_sim_ratio()) {
      total_size += 1 + 4;
    }

    // optional float dis_ratio = 3 [default = 1];
    if (has_dis_ratio()) {
      total_size += 1 + 4;
    }

    // optional float dis_margin = 6 [default = 1];
    if (has_dis_margin()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMetricLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MapMetricLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMetricLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMetricLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MapMetricLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MapMetricLossParameter)
    MergeFrom(*source);
  }
}

void MapMetricLossParameter::MergeFrom(const MapMetricLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MapMetricLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sim_margin_ = from.sim_margin_;
    }
    if (cached_has_bits & 0x00000002u) {
      losstype_ = from.losstype_;
    }
    if (cached_has_bits & 0x00000004u) {
      sim_ratio_ = from.sim_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      dis_ratio_ = from.dis_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      dis_margin_ = from.dis_margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapMetricLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MapMetricLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMetricLossParameter::CopyFrom(const MapMetricLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MapMetricLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMetricLossParameter::IsInitialized() const {
  return true;
}

void MapMetricLossParameter::Swap(MapMetricLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMetricLossParameter::InternalSwap(MapMetricLossParameter* other) {
  using std::swap;
  swap(sim_margin_, other->sim_margin_);
  swap(losstype_, other->losstype_);
  swap(sim_ratio_, other->sim_ratio_);
  swap(dis_ratio_, other->dis_ratio_);
  swap(dis_margin_, other->dis_margin_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMetricLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapMetricLossParameter

// optional .caffe.MapMetricLossParameter.LossType losstype = 1 [default = contrastive];
bool MapMetricLossParameter::has_losstype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapMetricLossParameter::set_has_losstype() {
  _has_bits_[0] |= 0x00000002u;
}
void MapMetricLossParameter::clear_has_losstype() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapMetricLossParameter::clear_losstype() {
  losstype_ = 1;
  clear_has_losstype();
}
::caffe::MapMetricLossParameter_LossType MapMetricLossParameter::losstype() const {
  // @@protoc_insertion_point(field_get:caffe.MapMetricLossParameter.losstype)
  return static_cast< ::caffe::MapMetricLossParameter_LossType >(losstype_);
}
void MapMetricLossParameter::set_losstype(::caffe::MapMetricLossParameter_LossType value) {
  assert(::caffe::MapMetricLossParameter_LossType_IsValid(value));
  set_has_losstype();
  losstype_ = value;
  // @@protoc_insertion_point(field_set:caffe.MapMetricLossParameter.losstype)
}

// optional float sim_ratio = 2 [default = 1];
bool MapMetricLossParameter::has_sim_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapMetricLossParameter::set_has_sim_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void MapMetricLossParameter::clear_has_sim_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapMetricLossParameter::clear_sim_ratio() {
  sim_ratio_ = 1;
  clear_has_sim_ratio();
}
float MapMetricLossParameter::sim_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.MapMetricLossParameter.sim_ratio)
  return sim_ratio_;
}
void MapMetricLossParameter::set_sim_ratio(float value) {
  set_has_sim_ratio();
  sim_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.MapMetricLossParameter.sim_ratio)
}

// optional float dis_ratio = 3 [default = 1];
bool MapMetricLossParameter::has_dis_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapMetricLossParameter::set_has_dis_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void MapMetricLossParameter::clear_has_dis_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapMetricLossParameter::clear_dis_ratio() {
  dis_ratio_ = 1;
  clear_has_dis_ratio();
}
float MapMetricLossParameter::dis_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.MapMetricLossParameter.dis_ratio)
  return dis_ratio_;
}
void MapMetricLossParameter::set_dis_ratio(float value) {
  set_has_dis_ratio();
  dis_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.MapMetricLossParameter.dis_ratio)
}

// optional float sim_margin = 5 [default = 0];
bool MapMetricLossParameter::has_sim_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapMetricLossParameter::set_has_sim_margin() {
  _has_bits_[0] |= 0x00000001u;
}
void MapMetricLossParameter::clear_has_sim_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapMetricLossParameter::clear_sim_margin() {
  sim_margin_ = 0;
  clear_has_sim_margin();
}
float MapMetricLossParameter::sim_margin() const {
  // @@protoc_insertion_point(field_get:caffe.MapMetricLossParameter.sim_margin)
  return sim_margin_;
}
void MapMetricLossParameter::set_sim_margin(float value) {
  set_has_sim_margin();
  sim_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.MapMetricLossParameter.sim_margin)
}

// optional float dis_margin = 6 [default = 1];
bool MapMetricLossParameter::has_dis_margin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MapMetricLossParameter::set_has_dis_margin() {
  _has_bits_[0] |= 0x00000010u;
}
void MapMetricLossParameter::clear_has_dis_margin() {
  _has_bits_[0] &= ~0x00000010u;
}
void MapMetricLossParameter::clear_dis_margin() {
  dis_margin_ = 1;
  clear_has_dis_margin();
}
float MapMetricLossParameter::dis_margin() const {
  // @@protoc_insertion_point(field_get:caffe.MapMetricLossParameter.dis_margin)
  return dis_margin_;
}
void MapMetricLossParameter::set_dis_margin(float value) {
  set_has_dis_margin();
  dis_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.MapMetricLossParameter.dis_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionconvolutionParameter::kNumOutputFieldNumber;
const int RegionconvolutionParameter::kBiasTermFieldNumber;
const int RegionconvolutionParameter::kInputPadFieldNumber;
const int RegionconvolutionParameter::kInputPadHFieldNumber;
const int RegionconvolutionParameter::kInputPadWFieldNumber;
const int RegionconvolutionParameter::kInputPatchSizeFieldNumber;
const int RegionconvolutionParameter::kInputPatchHFieldNumber;
const int RegionconvolutionParameter::kInputPatchWFieldNumber;
const int RegionconvolutionParameter::kInputStrideFieldNumber;
const int RegionconvolutionParameter::kInputStrideHFieldNumber;
const int RegionconvolutionParameter::kInputStrideWFieldNumber;
const int RegionconvolutionParameter::kOutputPadFieldNumber;
const int RegionconvolutionParameter::kOutputPadHFieldNumber;
const int RegionconvolutionParameter::kOutputPadWFieldNumber;
const int RegionconvolutionParameter::kOutputPatchSizeFieldNumber;
const int RegionconvolutionParameter::kOutputPatchHFieldNumber;
const int RegionconvolutionParameter::kOutputPatchWFieldNumber;
const int RegionconvolutionParameter::kOutputStrideFieldNumber;
const int RegionconvolutionParameter::kOutputStrideHFieldNumber;
const int RegionconvolutionParameter::kOutputStrideWFieldNumber;
const int RegionconvolutionParameter::kGroupFieldNumber;
const int RegionconvolutionParameter::kWeightFillerFieldNumber;
const int RegionconvolutionParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionconvolutionParameter::RegionconvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.RegionconvolutionParameter)
}
RegionconvolutionParameter::RegionconvolutionParameter(const RegionconvolutionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_stride_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(output_stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.RegionconvolutionParameter)
}

void RegionconvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_stride_w_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(output_stride_w_));
  bias_term_ = true;
  group_ = 1u;
  input_stride_ = 1u;
  output_stride_ = 1u;
}

RegionconvolutionParameter::~RegionconvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.RegionconvolutionParameter)
  SharedDtor();
}

void RegionconvolutionParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void RegionconvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionconvolutionParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionconvolutionParameter& RegionconvolutionParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionconvolutionParameter* RegionconvolutionParameter::New(::google::protobuf::Arena* arena) const {
  RegionconvolutionParameter* n = new RegionconvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionconvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.RegionconvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_patch_h_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(input_patch_h_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&input_patch_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_patch_h_) -
        reinterpret_cast<char*>(&input_patch_w_)) + sizeof(output_patch_h_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&output_patch_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_stride_w_) -
        reinterpret_cast<char*>(&output_patch_w_)) + sizeof(output_stride_w_));
    bias_term_ = true;
    group_ = 1u;
    input_stride_ = 1u;
    output_stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionconvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.RegionconvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_pad = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_input_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_patch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_input_patch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_patch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_stride = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_input_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_input_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_input_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_patch_h = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_input_patch_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_patch_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_patch_w = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_input_patch_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_patch_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_stride_h = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_input_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_stride_w = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_input_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_pad = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_output_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_pad_h = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_output_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_pad_w = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_output_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_patch_size = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_output_patch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_patch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_patch_h = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_output_patch_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_patch_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_patch_w = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_output_patch_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_patch_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_stride = 22 [default = 1];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_output_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_stride_h = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_output_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 output_stride_w = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_output_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.RegionconvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.RegionconvolutionParameter)
  return false;
#undef DO_
}

void RegionconvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.RegionconvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional uint32 input_pad = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->input_pad(), output);
  }

  // optional uint32 input_patch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->input_patch_size(), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // optional uint32 input_stride = 6 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->input_stride(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 input_pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->input_pad_h(), output);
  }

  // optional uint32 input_pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->input_pad_w(), output);
  }

  // optional uint32 input_patch_h = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->input_patch_h(), output);
  }

  // optional uint32 input_patch_w = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->input_patch_w(), output);
  }

  // optional uint32 input_stride_h = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->input_stride_h(), output);
  }

  // optional uint32 input_stride_w = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->input_stride_w(), output);
  }

  // optional uint32 output_pad = 16 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->output_pad(), output);
  }

  // optional uint32 output_pad_h = 17 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->output_pad_h(), output);
  }

  // optional uint32 output_pad_w = 18 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->output_pad_w(), output);
  }

  // optional uint32 output_patch_size = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->output_patch_size(), output);
  }

  // optional uint32 output_patch_h = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->output_patch_h(), output);
  }

  // optional uint32 output_patch_w = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->output_patch_w(), output);
  }

  // optional uint32 output_stride = 22 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->output_stride(), output);
  }

  // optional uint32 output_stride_h = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->output_stride_h(), output);
  }

  // optional uint32 output_stride_w = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->output_stride_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.RegionconvolutionParameter)
}

::google::protobuf::uint8* RegionconvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.RegionconvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional uint32 input_pad = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->input_pad(), target);
  }

  // optional uint32 input_patch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->input_patch_size(), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // optional uint32 input_stride = 6 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->input_stride(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 input_pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->input_pad_h(), target);
  }

  // optional uint32 input_pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->input_pad_w(), target);
  }

  // optional uint32 input_patch_h = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->input_patch_h(), target);
  }

  // optional uint32 input_patch_w = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->input_patch_w(), target);
  }

  // optional uint32 input_stride_h = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->input_stride_h(), target);
  }

  // optional uint32 input_stride_w = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->input_stride_w(), target);
  }

  // optional uint32 output_pad = 16 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->output_pad(), target);
  }

  // optional uint32 output_pad_h = 17 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->output_pad_h(), target);
  }

  // optional uint32 output_pad_w = 18 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->output_pad_w(), target);
  }

  // optional uint32 output_patch_size = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->output_patch_size(), target);
  }

  // optional uint32 output_patch_h = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->output_patch_h(), target);
  }

  // optional uint32 output_patch_w = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->output_patch_w(), target);
  }

  // optional uint32 output_stride = 22 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->output_stride(), target);
  }

  // optional uint32 output_stride_h = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->output_stride_h(), target);
  }

  // optional uint32 output_stride_w = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->output_stride_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.RegionconvolutionParameter)
  return target;
}

size_t RegionconvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.RegionconvolutionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_pad = 3 [default = 0];
    if (has_input_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_pad());
    }

    // optional uint32 input_patch_size = 4;
    if (has_input_patch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_patch_size());
    }

    // optional uint32 input_pad_h = 9 [default = 0];
    if (has_input_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_pad_h());
    }

    // optional uint32 input_pad_w = 10 [default = 0];
    if (has_input_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_pad_w());
    }

    // optional uint32 input_patch_h = 11;
    if (has_input_patch_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_patch_h());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 input_patch_w = 12;
    if (has_input_patch_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_patch_w());
    }

    // optional uint32 input_stride_h = 13;
    if (has_input_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_stride_h());
    }

    // optional uint32 input_stride_w = 14;
    if (has_input_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_stride_w());
    }

    // optional uint32 output_pad = 16 [default = 0];
    if (has_output_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_pad());
    }

    // optional uint32 output_pad_h = 17 [default = 0];
    if (has_output_pad_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_pad_h());
    }

    // optional uint32 output_pad_w = 18 [default = 0];
    if (has_output_pad_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_pad_w());
    }

    // optional uint32 output_patch_size = 19;
    if (has_output_patch_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_patch_size());
    }

    // optional uint32 output_patch_h = 20;
    if (has_output_patch_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_patch_h());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 output_patch_w = 21;
    if (has_output_patch_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_patch_w());
    }

    // optional uint32 output_stride_h = 23;
    if (has_output_stride_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_stride_h());
    }

    // optional uint32 output_stride_w = 24;
    if (has_output_stride_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_stride_w());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 input_stride = 6 [default = 1];
    if (has_input_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_stride());
    }

    // optional uint32 output_stride = 22 [default = 1];
    if (has_output_stride()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionconvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.RegionconvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionconvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionconvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.RegionconvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.RegionconvolutionParameter)
    MergeFrom(*source);
  }
}

void RegionconvolutionParameter::MergeFrom(const RegionconvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.RegionconvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_pad_ = from.input_pad_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_patch_size_ = from.input_patch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_pad_h_ = from.input_pad_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_pad_w_ = from.input_pad_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_patch_h_ = from.input_patch_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      input_patch_w_ = from.input_patch_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      input_stride_h_ = from.input_stride_h_;
    }
    if (cached_has_bits & 0x00000400u) {
      input_stride_w_ = from.input_stride_w_;
    }
    if (cached_has_bits & 0x00000800u) {
      output_pad_ = from.output_pad_;
    }
    if (cached_has_bits & 0x00001000u) {
      output_pad_h_ = from.output_pad_h_;
    }
    if (cached_has_bits & 0x00002000u) {
      output_pad_w_ = from.output_pad_w_;
    }
    if (cached_has_bits & 0x00004000u) {
      output_patch_size_ = from.output_patch_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      output_patch_h_ = from.output_patch_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      output_patch_w_ = from.output_patch_w_;
    }
    if (cached_has_bits & 0x00020000u) {
      output_stride_h_ = from.output_stride_h_;
    }
    if (cached_has_bits & 0x00040000u) {
      output_stride_w_ = from.output_stride_w_;
    }
    if (cached_has_bits & 0x00080000u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00100000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00200000u) {
      input_stride_ = from.input_stride_;
    }
    if (cached_has_bits & 0x00400000u) {
      output_stride_ = from.output_stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionconvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.RegionconvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionconvolutionParameter::CopyFrom(const RegionconvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.RegionconvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionconvolutionParameter::IsInitialized() const {
  return true;
}

void RegionconvolutionParameter::Swap(RegionconvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionconvolutionParameter::InternalSwap(RegionconvolutionParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(input_pad_, other->input_pad_);
  swap(input_patch_size_, other->input_patch_size_);
  swap(input_pad_h_, other->input_pad_h_);
  swap(input_pad_w_, other->input_pad_w_);
  swap(input_patch_h_, other->input_patch_h_);
  swap(input_patch_w_, other->input_patch_w_);
  swap(input_stride_h_, other->input_stride_h_);
  swap(input_stride_w_, other->input_stride_w_);
  swap(output_pad_, other->output_pad_);
  swap(output_pad_h_, other->output_pad_h_);
  swap(output_pad_w_, other->output_pad_w_);
  swap(output_patch_size_, other->output_patch_size_);
  swap(output_patch_h_, other->output_patch_h_);
  swap(output_patch_w_, other->output_patch_w_);
  swap(output_stride_h_, other->output_stride_h_);
  swap(output_stride_w_, other->output_stride_w_);
  swap(bias_term_, other->bias_term_);
  swap(group_, other->group_);
  swap(input_stride_, other->input_stride_);
  swap(output_stride_, other->output_stride_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionconvolutionParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionconvolutionParameter

// optional uint32 num_output = 1;
bool RegionconvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RegionconvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void RegionconvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void RegionconvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 RegionconvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.num_output)
  return num_output_;
}
void RegionconvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool RegionconvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void RegionconvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00080000u;
}
void RegionconvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00080000u;
}
void RegionconvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool RegionconvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.bias_term)
  return bias_term_;
}
void RegionconvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.bias_term)
}

// optional uint32 input_pad = 3 [default = 0];
bool RegionconvolutionParameter::has_input_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RegionconvolutionParameter::set_has_input_pad() {
  _has_bits_[0] |= 0x00000008u;
}
void RegionconvolutionParameter::clear_has_input_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
void RegionconvolutionParameter::clear_input_pad() {
  input_pad_ = 0u;
  clear_has_input_pad();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_pad() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_pad)
  return input_pad_;
}
void RegionconvolutionParameter::set_input_pad(::google::protobuf::uint32 value) {
  set_has_input_pad();
  input_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_pad)
}

// optional uint32 input_pad_h = 9 [default = 0];
bool RegionconvolutionParameter::has_input_pad_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RegionconvolutionParameter::set_has_input_pad_h() {
  _has_bits_[0] |= 0x00000020u;
}
void RegionconvolutionParameter::clear_has_input_pad_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void RegionconvolutionParameter::clear_input_pad_h() {
  input_pad_h_ = 0u;
  clear_has_input_pad_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_pad_h)
  return input_pad_h_;
}
void RegionconvolutionParameter::set_input_pad_h(::google::protobuf::uint32 value) {
  set_has_input_pad_h();
  input_pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_pad_h)
}

// optional uint32 input_pad_w = 10 [default = 0];
bool RegionconvolutionParameter::has_input_pad_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RegionconvolutionParameter::set_has_input_pad_w() {
  _has_bits_[0] |= 0x00000040u;
}
void RegionconvolutionParameter::clear_has_input_pad_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void RegionconvolutionParameter::clear_input_pad_w() {
  input_pad_w_ = 0u;
  clear_has_input_pad_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_pad_w)
  return input_pad_w_;
}
void RegionconvolutionParameter::set_input_pad_w(::google::protobuf::uint32 value) {
  set_has_input_pad_w();
  input_pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_pad_w)
}

// optional uint32 input_patch_size = 4;
bool RegionconvolutionParameter::has_input_patch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RegionconvolutionParameter::set_has_input_patch_size() {
  _has_bits_[0] |= 0x00000010u;
}
void RegionconvolutionParameter::clear_has_input_patch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void RegionconvolutionParameter::clear_input_patch_size() {
  input_patch_size_ = 0u;
  clear_has_input_patch_size();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_patch_size() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_patch_size)
  return input_patch_size_;
}
void RegionconvolutionParameter::set_input_patch_size(::google::protobuf::uint32 value) {
  set_has_input_patch_size();
  input_patch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_patch_size)
}

// optional uint32 input_patch_h = 11;
bool RegionconvolutionParameter::has_input_patch_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RegionconvolutionParameter::set_has_input_patch_h() {
  _has_bits_[0] |= 0x00000080u;
}
void RegionconvolutionParameter::clear_has_input_patch_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void RegionconvolutionParameter::clear_input_patch_h() {
  input_patch_h_ = 0u;
  clear_has_input_patch_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_patch_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_patch_h)
  return input_patch_h_;
}
void RegionconvolutionParameter::set_input_patch_h(::google::protobuf::uint32 value) {
  set_has_input_patch_h();
  input_patch_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_patch_h)
}

// optional uint32 input_patch_w = 12;
bool RegionconvolutionParameter::has_input_patch_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RegionconvolutionParameter::set_has_input_patch_w() {
  _has_bits_[0] |= 0x00000100u;
}
void RegionconvolutionParameter::clear_has_input_patch_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void RegionconvolutionParameter::clear_input_patch_w() {
  input_patch_w_ = 0u;
  clear_has_input_patch_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_patch_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_patch_w)
  return input_patch_w_;
}
void RegionconvolutionParameter::set_input_patch_w(::google::protobuf::uint32 value) {
  set_has_input_patch_w();
  input_patch_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_patch_w)
}

// optional uint32 input_stride = 6 [default = 1];
bool RegionconvolutionParameter::has_input_stride() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void RegionconvolutionParameter::set_has_input_stride() {
  _has_bits_[0] |= 0x00200000u;
}
void RegionconvolutionParameter::clear_has_input_stride() {
  _has_bits_[0] &= ~0x00200000u;
}
void RegionconvolutionParameter::clear_input_stride() {
  input_stride_ = 1u;
  clear_has_input_stride();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_stride() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_stride)
  return input_stride_;
}
void RegionconvolutionParameter::set_input_stride(::google::protobuf::uint32 value) {
  set_has_input_stride();
  input_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_stride)
}

// optional uint32 input_stride_h = 13;
bool RegionconvolutionParameter::has_input_stride_h() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RegionconvolutionParameter::set_has_input_stride_h() {
  _has_bits_[0] |= 0x00000200u;
}
void RegionconvolutionParameter::clear_has_input_stride_h() {
  _has_bits_[0] &= ~0x00000200u;
}
void RegionconvolutionParameter::clear_input_stride_h() {
  input_stride_h_ = 0u;
  clear_has_input_stride_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_stride_h)
  return input_stride_h_;
}
void RegionconvolutionParameter::set_input_stride_h(::google::protobuf::uint32 value) {
  set_has_input_stride_h();
  input_stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_stride_h)
}

// optional uint32 input_stride_w = 14;
bool RegionconvolutionParameter::has_input_stride_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RegionconvolutionParameter::set_has_input_stride_w() {
  _has_bits_[0] |= 0x00000400u;
}
void RegionconvolutionParameter::clear_has_input_stride_w() {
  _has_bits_[0] &= ~0x00000400u;
}
void RegionconvolutionParameter::clear_input_stride_w() {
  input_stride_w_ = 0u;
  clear_has_input_stride_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::input_stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.input_stride_w)
  return input_stride_w_;
}
void RegionconvolutionParameter::set_input_stride_w(::google::protobuf::uint32 value) {
  set_has_input_stride_w();
  input_stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.input_stride_w)
}

// optional uint32 output_pad = 16 [default = 0];
bool RegionconvolutionParameter::has_output_pad() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RegionconvolutionParameter::set_has_output_pad() {
  _has_bits_[0] |= 0x00000800u;
}
void RegionconvolutionParameter::clear_has_output_pad() {
  _has_bits_[0] &= ~0x00000800u;
}
void RegionconvolutionParameter::clear_output_pad() {
  output_pad_ = 0u;
  clear_has_output_pad();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_pad() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_pad)
  return output_pad_;
}
void RegionconvolutionParameter::set_output_pad(::google::protobuf::uint32 value) {
  set_has_output_pad();
  output_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_pad)
}

// optional uint32 output_pad_h = 17 [default = 0];
bool RegionconvolutionParameter::has_output_pad_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RegionconvolutionParameter::set_has_output_pad_h() {
  _has_bits_[0] |= 0x00001000u;
}
void RegionconvolutionParameter::clear_has_output_pad_h() {
  _has_bits_[0] &= ~0x00001000u;
}
void RegionconvolutionParameter::clear_output_pad_h() {
  output_pad_h_ = 0u;
  clear_has_output_pad_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_pad_h)
  return output_pad_h_;
}
void RegionconvolutionParameter::set_output_pad_h(::google::protobuf::uint32 value) {
  set_has_output_pad_h();
  output_pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_pad_h)
}

// optional uint32 output_pad_w = 18 [default = 0];
bool RegionconvolutionParameter::has_output_pad_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RegionconvolutionParameter::set_has_output_pad_w() {
  _has_bits_[0] |= 0x00002000u;
}
void RegionconvolutionParameter::clear_has_output_pad_w() {
  _has_bits_[0] &= ~0x00002000u;
}
void RegionconvolutionParameter::clear_output_pad_w() {
  output_pad_w_ = 0u;
  clear_has_output_pad_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_pad_w)
  return output_pad_w_;
}
void RegionconvolutionParameter::set_output_pad_w(::google::protobuf::uint32 value) {
  set_has_output_pad_w();
  output_pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_pad_w)
}

// optional uint32 output_patch_size = 19;
bool RegionconvolutionParameter::has_output_patch_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RegionconvolutionParameter::set_has_output_patch_size() {
  _has_bits_[0] |= 0x00004000u;
}
void RegionconvolutionParameter::clear_has_output_patch_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void RegionconvolutionParameter::clear_output_patch_size() {
  output_patch_size_ = 0u;
  clear_has_output_patch_size();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_patch_size() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_patch_size)
  return output_patch_size_;
}
void RegionconvolutionParameter::set_output_patch_size(::google::protobuf::uint32 value) {
  set_has_output_patch_size();
  output_patch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_patch_size)
}

// optional uint32 output_patch_h = 20;
bool RegionconvolutionParameter::has_output_patch_h() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RegionconvolutionParameter::set_has_output_patch_h() {
  _has_bits_[0] |= 0x00008000u;
}
void RegionconvolutionParameter::clear_has_output_patch_h() {
  _has_bits_[0] &= ~0x00008000u;
}
void RegionconvolutionParameter::clear_output_patch_h() {
  output_patch_h_ = 0u;
  clear_has_output_patch_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_patch_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_patch_h)
  return output_patch_h_;
}
void RegionconvolutionParameter::set_output_patch_h(::google::protobuf::uint32 value) {
  set_has_output_patch_h();
  output_patch_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_patch_h)
}

// optional uint32 output_patch_w = 21;
bool RegionconvolutionParameter::has_output_patch_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RegionconvolutionParameter::set_has_output_patch_w() {
  _has_bits_[0] |= 0x00010000u;
}
void RegionconvolutionParameter::clear_has_output_patch_w() {
  _has_bits_[0] &= ~0x00010000u;
}
void RegionconvolutionParameter::clear_output_patch_w() {
  output_patch_w_ = 0u;
  clear_has_output_patch_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_patch_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_patch_w)
  return output_patch_w_;
}
void RegionconvolutionParameter::set_output_patch_w(::google::protobuf::uint32 value) {
  set_has_output_patch_w();
  output_patch_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_patch_w)
}

// optional uint32 output_stride = 22 [default = 1];
bool RegionconvolutionParameter::has_output_stride() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void RegionconvolutionParameter::set_has_output_stride() {
  _has_bits_[0] |= 0x00400000u;
}
void RegionconvolutionParameter::clear_has_output_stride() {
  _has_bits_[0] &= ~0x00400000u;
}
void RegionconvolutionParameter::clear_output_stride() {
  output_stride_ = 1u;
  clear_has_output_stride();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_stride() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_stride)
  return output_stride_;
}
void RegionconvolutionParameter::set_output_stride(::google::protobuf::uint32 value) {
  set_has_output_stride();
  output_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_stride)
}

// optional uint32 output_stride_h = 23;
bool RegionconvolutionParameter::has_output_stride_h() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RegionconvolutionParameter::set_has_output_stride_h() {
  _has_bits_[0] |= 0x00020000u;
}
void RegionconvolutionParameter::clear_has_output_stride_h() {
  _has_bits_[0] &= ~0x00020000u;
}
void RegionconvolutionParameter::clear_output_stride_h() {
  output_stride_h_ = 0u;
  clear_has_output_stride_h();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_stride_h)
  return output_stride_h_;
}
void RegionconvolutionParameter::set_output_stride_h(::google::protobuf::uint32 value) {
  set_has_output_stride_h();
  output_stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_stride_h)
}

// optional uint32 output_stride_w = 24;
bool RegionconvolutionParameter::has_output_stride_w() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void RegionconvolutionParameter::set_has_output_stride_w() {
  _has_bits_[0] |= 0x00040000u;
}
void RegionconvolutionParameter::clear_has_output_stride_w() {
  _has_bits_[0] &= ~0x00040000u;
}
void RegionconvolutionParameter::clear_output_stride_w() {
  output_stride_w_ = 0u;
  clear_has_output_stride_w();
}
::google::protobuf::uint32 RegionconvolutionParameter::output_stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.output_stride_w)
  return output_stride_w_;
}
void RegionconvolutionParameter::set_output_stride_w(::google::protobuf::uint32 value) {
  set_has_output_stride_w();
  output_stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.output_stride_w)
}

// optional uint32 group = 5 [default = 1];
bool RegionconvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void RegionconvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00100000u;
}
void RegionconvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00100000u;
}
void RegionconvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 RegionconvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.group)
  return group_;
}
void RegionconvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.RegionconvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool RegionconvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionconvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionconvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionconvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& RegionconvolutionParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* RegionconvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RegionconvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* RegionconvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RegionconvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void RegionconvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RegionconvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool RegionconvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RegionconvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void RegionconvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void RegionconvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& RegionconvolutionParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.RegionconvolutionParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* RegionconvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RegionconvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* RegionconvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RegionconvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void RegionconvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RegionconvolutionParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BNParameter::kScaleFillerFieldNumber;
const int BNParameter::kShiftFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BNParameter::BNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BNParameter)
}
BNParameter::BNParameter(const BNParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scale_filler()) {
    scale_filler_ = new ::caffe::FillerParameter(*from.scale_filler_);
  } else {
    scale_filler_ = NULL;
  }
  if (from.has_shift_filler()) {
    shift_filler_ = new ::caffe::FillerParameter(*from.shift_filler_);
  } else {
    shift_filler_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe.BNParameter)
}

void BNParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scale_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shift_filler_) -
      reinterpret_cast<char*>(&scale_filler_)) + sizeof(shift_filler_));
}

BNParameter::~BNParameter() {
  // @@protoc_insertion_point(destructor:caffe.BNParameter)
  SharedDtor();
}

void BNParameter::SharedDtor() {
  if (this != internal_default_instance()) delete scale_filler_;
  if (this != internal_default_instance()) delete shift_filler_;
}

void BNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BNParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BNParameter& BNParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BNParameter* BNParameter::New(::google::protobuf::Arena* arena) const {
  BNParameter* n = new BNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scale_filler_ != NULL);
      scale_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shift_filler_ != NULL);
      shift_filler_->::caffe::FillerParameter::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter scale_filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter shift_filler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shift_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BNParameter)
  return false;
#undef DO_
}

void BNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter scale_filler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scale_filler_, output);
  }

  // optional .caffe.FillerParameter shift_filler = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shift_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BNParameter)
}

::google::protobuf::uint8* BNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter scale_filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scale_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter shift_filler = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shift_filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BNParameter)
  return target;
}

size_t BNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BNParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.FillerParameter scale_filler = 1;
    if (has_scale_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_filler_);
    }

    // optional .caffe.FillerParameter shift_filler = 2;
    if (has_shift_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shift_filler_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BNParameter)
    MergeFrom(*source);
  }
}

void BNParameter::MergeFrom(const BNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scale_filler()->::caffe::FillerParameter::MergeFrom(from.scale_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shift_filler()->::caffe::FillerParameter::MergeFrom(from.shift_filler());
    }
  }
}

void BNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNParameter::CopyFrom(const BNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNParameter::IsInitialized() const {
  return true;
}

void BNParameter::Swap(BNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BNParameter::InternalSwap(BNParameter* other) {
  using std::swap;
  swap(scale_filler_, other->scale_filler_);
  swap(shift_filler_, other->shift_filler_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BNParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BNParameter

// optional .caffe.FillerParameter scale_filler = 1;
bool BNParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BNParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void BNParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void BNParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
const ::caffe::FillerParameter& BNParameter::scale_filler() const {
  const ::caffe::FillerParameter* p = scale_filler_;
  // @@protoc_insertion_point(field_get:caffe.BNParameter.scale_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* BNParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) {
    scale_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.scale_filler)
  return scale_filler_;
}
::caffe::FillerParameter* BNParameter::release_scale_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.scale_filler)
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
void BNParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.scale_filler)
}

// optional .caffe.FillerParameter shift_filler = 2;
bool BNParameter::has_shift_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BNParameter::set_has_shift_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void BNParameter::clear_has_shift_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void BNParameter::clear_shift_filler() {
  if (shift_filler_ != NULL) shift_filler_->::caffe::FillerParameter::Clear();
  clear_has_shift_filler();
}
const ::caffe::FillerParameter& BNParameter::shift_filler() const {
  const ::caffe::FillerParameter* p = shift_filler_;
  // @@protoc_insertion_point(field_get:caffe.BNParameter.shift_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* BNParameter::mutable_shift_filler() {
  set_has_shift_filler();
  if (shift_filler_ == NULL) {
    shift_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.shift_filler)
  return shift_filler_;
}
::caffe::FillerParameter* BNParameter::release_shift_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.shift_filler)
  clear_has_shift_filler();
  ::caffe::FillerParameter* temp = shift_filler_;
  shift_filler_ = NULL;
  return temp;
}
void BNParameter::set_allocated_shift_filler(::caffe::FillerParameter* shift_filler) {
  delete shift_filler_;
  shift_filler_ = shift_filler;
  if (shift_filler) {
    set_has_shift_filler();
  } else {
    clear_has_shift_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.shift_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementHingeLossParameter::kNormFieldNumber;
const int ElementHingeLossParameter::kScaleLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementHingeLossParameter::ElementHingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ElementHingeLossParameter)
}
ElementHingeLossParameter::ElementHingeLossParameter(const ElementHingeLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_loss_, &from.scale_loss_,
    static_cast<size_t>(reinterpret_cast<char*>(&norm_) -
    reinterpret_cast<char*>(&scale_loss_)) + sizeof(norm_));
  // @@protoc_insertion_point(copy_constructor:caffe.ElementHingeLossParameter)
}

void ElementHingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  scale_loss_ = false;
  norm_ = 2;
}

ElementHingeLossParameter::~ElementHingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ElementHingeLossParameter)
  SharedDtor();
}

void ElementHingeLossParameter::SharedDtor() {
}

void ElementHingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementHingeLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ElementHingeLossParameter& ElementHingeLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ElementHingeLossParameter* ElementHingeLossParameter::New(::google::protobuf::Arena* arena) const {
  ElementHingeLossParameter* n = new ElementHingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElementHingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ElementHingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    scale_loss_ = false;
    norm_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ElementHingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ElementHingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ElementHingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::ElementHingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool scale_loss = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scale_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ElementHingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ElementHingeLossParameter)
  return false;
#undef DO_
}

void ElementHingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ElementHingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  // optional bool scale_loss = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->scale_loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ElementHingeLossParameter)
}

::google::protobuf::uint8* ElementHingeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ElementHingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  // optional bool scale_loss = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->scale_loss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ElementHingeLossParameter)
  return target;
}

size_t ElementHingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ElementHingeLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool scale_loss = 2 [default = false];
    if (has_scale_loss()) {
      total_size += 1 + 1;
    }

    // optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
    if (has_norm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementHingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ElementHingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementHingeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementHingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ElementHingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ElementHingeLossParameter)
    MergeFrom(*source);
  }
}

void ElementHingeLossParameter::MergeFrom(const ElementHingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ElementHingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      scale_loss_ = from.scale_loss_;
    }
    if (cached_has_bits & 0x00000002u) {
      norm_ = from.norm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ElementHingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ElementHingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementHingeLossParameter::CopyFrom(const ElementHingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ElementHingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementHingeLossParameter::IsInitialized() const {
  return true;
}

void ElementHingeLossParameter::Swap(ElementHingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementHingeLossParameter::InternalSwap(ElementHingeLossParameter* other) {
  using std::swap;
  swap(scale_loss_, other->scale_loss_);
  swap(norm_, other->norm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElementHingeLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElementHingeLossParameter

// optional .caffe.ElementHingeLossParameter.Norm norm = 1 [default = L2];
bool ElementHingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ElementHingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000002u;
}
void ElementHingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000002u;
}
void ElementHingeLossParameter::clear_norm() {
  norm_ = 2;
  clear_has_norm();
}
::caffe::ElementHingeLossParameter_Norm ElementHingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.norm)
  return static_cast< ::caffe::ElementHingeLossParameter_Norm >(norm_);
}
void ElementHingeLossParameter::set_norm(::caffe::ElementHingeLossParameter_Norm value) {
  assert(::caffe::ElementHingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.norm)
}

// optional bool scale_loss = 2 [default = false];
bool ElementHingeLossParameter::has_scale_loss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ElementHingeLossParameter::set_has_scale_loss() {
  _has_bits_[0] |= 0x00000001u;
}
void ElementHingeLossParameter::clear_has_scale_loss() {
  _has_bits_[0] &= ~0x00000001u;
}
void ElementHingeLossParameter::clear_scale_loss() {
  scale_loss_ = false;
  clear_has_scale_loss();
}
bool ElementHingeLossParameter::scale_loss() const {
  // @@protoc_insertion_point(field_get:caffe.ElementHingeLossParameter.scale_loss)
  return scale_loss_;
}
void ElementHingeLossParameter::set_scale_loss(bool value) {
  set_has_scale_loss();
  scale_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.ElementHingeLossParameter.scale_loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManipulateLossParameter::kUseBalancesampleFieldNumber;
const int ManipulateLossParameter::kIgnoreValueFieldNumber;
const int ManipulateLossParameter::kUseFullzeroignoreFieldNumber;
const int ManipulateLossParameter::kBgRatioFieldNumber;
const int ManipulateLossParameter::kUniformDroprateFieldNumber;
const int ManipulateLossParameter::kUsePerchannelBalanceFieldNumber;
const int ManipulateLossParameter::kDropSingleclasschannelFieldNumber;
const int ManipulateLossParameter::kPrintInfoFieldNumber;
const int ManipulateLossParameter::kUseUnionchannelBalanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManipulateLossParameter::ManipulateLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ManipulateLossParameter)
}
ManipulateLossParameter::ManipulateLossParameter(const ManipulateLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ignore_value()) {
    ignore_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_value_);
  }
  ::memcpy(&use_balancesample_, &from.use_balancesample_,
    static_cast<size_t>(reinterpret_cast<char*>(&uniform_droprate_) -
    reinterpret_cast<char*>(&use_balancesample_)) + sizeof(uniform_droprate_));
  // @@protoc_insertion_point(copy_constructor:caffe.ManipulateLossParameter)
}

void ManipulateLossParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_balancesample_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_unionchannel_balance_) -
      reinterpret_cast<char*>(&use_balancesample_)) + sizeof(use_unionchannel_balance_));
  bg_ratio_ = 1;
  uniform_droprate_ = 1;
}

ManipulateLossParameter::~ManipulateLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ManipulateLossParameter)
  SharedDtor();
}

void ManipulateLossParameter::SharedDtor() {
  ignore_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManipulateLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulateLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManipulateLossParameter& ManipulateLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManipulateLossParameter* ManipulateLossParameter::New(::google::protobuf::Arena* arena) const {
  ManipulateLossParameter* n = new ManipulateLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManipulateLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ManipulateLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_ignore_value()) {
    GOOGLE_DCHECK(!ignore_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ignore_value_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&use_balancesample_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_unionchannel_balance_) -
        reinterpret_cast<char*>(&use_balancesample_)) + sizeof(use_unionchannel_balance_));
    bg_ratio_ = 1;
  }
  uniform_droprate_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManipulateLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ManipulateLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_balancesample = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_balancesample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_balancesample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ignore_value = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ignore_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ignore_value().data(), static_cast<int>(this->ignore_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ManipulateLossParameter.ignore_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fullzeroignore = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_use_fullzeroignore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fullzeroignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bg_ratio = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_bg_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float uniform_droprate = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_uniform_droprate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uniform_droprate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_perchannel_balance = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_use_perchannel_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_perchannel_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_singleclasschannel = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_drop_singleclasschannel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_singleclasschannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_info = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_print_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_unionchannel_balance = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_use_unionchannel_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_unionchannel_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ManipulateLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ManipulateLossParameter)
  return false;
#undef DO_
}

void ManipulateLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ManipulateLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_balancesample = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_balancesample(), output);
  }

  // optional string ignore_value = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_value().data(), static_cast<int>(this->ignore_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ManipulateLossParameter.ignore_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ignore_value(), output);
  }

  // optional bool use_fullzeroignore = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_fullzeroignore(), output);
  }

  // optional float bg_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bg_ratio(), output);
  }

  // optional float uniform_droprate = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->uniform_droprate(), output);
  }

  // optional bool use_perchannel_balance = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_perchannel_balance(), output);
  }

  // optional bool drop_singleclasschannel = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drop_singleclasschannel(), output);
  }

  // optional bool print_info = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->print_info(), output);
  }

  // optional bool use_unionchannel_balance = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_unionchannel_balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ManipulateLossParameter)
}

::google::protobuf::uint8* ManipulateLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ManipulateLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_balancesample = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_balancesample(), target);
  }

  // optional string ignore_value = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignore_value().data(), static_cast<int>(this->ignore_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ManipulateLossParameter.ignore_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ignore_value(), target);
  }

  // optional bool use_fullzeroignore = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_fullzeroignore(), target);
  }

  // optional float bg_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bg_ratio(), target);
  }

  // optional float uniform_droprate = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->uniform_droprate(), target);
  }

  // optional bool use_perchannel_balance = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_perchannel_balance(), target);
  }

  // optional bool drop_singleclasschannel = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drop_singleclasschannel(), target);
  }

  // optional bool print_info = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->print_info(), target);
  }

  // optional bool use_unionchannel_balance = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_unionchannel_balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ManipulateLossParameter)
  return target;
}

size_t ManipulateLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ManipulateLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ignore_value = 2 [default = ""];
    if (has_ignore_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ignore_value());
    }

    // optional bool use_balancesample = 1 [default = false];
    if (has_use_balancesample()) {
      total_size += 1 + 1;
    }

    // optional bool use_fullzeroignore = 3 [default = false];
    if (has_use_fullzeroignore()) {
      total_size += 1 + 1;
    }

    // optional bool use_perchannel_balance = 6 [default = false];
    if (has_use_perchannel_balance()) {
      total_size += 1 + 1;
    }

    // optional bool drop_singleclasschannel = 7 [default = false];
    if (has_drop_singleclasschannel()) {
      total_size += 1 + 1;
    }

    // optional bool print_info = 8 [default = false];
    if (has_print_info()) {
      total_size += 1 + 1;
    }

    // optional bool use_unionchannel_balance = 9 [default = false];
    if (has_use_unionchannel_balance()) {
      total_size += 1 + 1;
    }

    // optional float bg_ratio = 4 [default = 1];
    if (has_bg_ratio()) {
      total_size += 1 + 4;
    }

  }
  // optional float uniform_droprate = 5 [default = 1];
  if (has_uniform_droprate()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulateLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ManipulateLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ManipulateLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManipulateLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ManipulateLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ManipulateLossParameter)
    MergeFrom(*source);
  }
}

void ManipulateLossParameter::MergeFrom(const ManipulateLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ManipulateLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ignore_value();
      ignore_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ignore_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      use_balancesample_ = from.use_balancesample_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_fullzeroignore_ = from.use_fullzeroignore_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_perchannel_balance_ = from.use_perchannel_balance_;
    }
    if (cached_has_bits & 0x00000010u) {
      drop_singleclasschannel_ = from.drop_singleclasschannel_;
    }
    if (cached_has_bits & 0x00000020u) {
      print_info_ = from.print_info_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_unionchannel_balance_ = from.use_unionchannel_balance_;
    }
    if (cached_has_bits & 0x00000080u) {
      bg_ratio_ = from.bg_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_uniform_droprate(from.uniform_droprate());
  }
}

void ManipulateLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ManipulateLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulateLossParameter::CopyFrom(const ManipulateLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ManipulateLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulateLossParameter::IsInitialized() const {
  return true;
}

void ManipulateLossParameter::Swap(ManipulateLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManipulateLossParameter::InternalSwap(ManipulateLossParameter* other) {
  using std::swap;
  ignore_value_.Swap(&other->ignore_value_);
  swap(use_balancesample_, other->use_balancesample_);
  swap(use_fullzeroignore_, other->use_fullzeroignore_);
  swap(use_perchannel_balance_, other->use_perchannel_balance_);
  swap(drop_singleclasschannel_, other->drop_singleclasschannel_);
  swap(print_info_, other->print_info_);
  swap(use_unionchannel_balance_, other->use_unionchannel_balance_);
  swap(bg_ratio_, other->bg_ratio_);
  swap(uniform_droprate_, other->uniform_droprate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManipulateLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManipulateLossParameter

// optional bool use_balancesample = 1 [default = false];
bool ManipulateLossParameter::has_use_balancesample() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManipulateLossParameter::set_has_use_balancesample() {
  _has_bits_[0] |= 0x00000002u;
}
void ManipulateLossParameter::clear_has_use_balancesample() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManipulateLossParameter::clear_use_balancesample() {
  use_balancesample_ = false;
  clear_has_use_balancesample();
}
bool ManipulateLossParameter::use_balancesample() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_balancesample)
  return use_balancesample_;
}
void ManipulateLossParameter::set_use_balancesample(bool value) {
  set_has_use_balancesample();
  use_balancesample_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_balancesample)
}

// optional string ignore_value = 2 [default = ""];
bool ManipulateLossParameter::has_ignore_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManipulateLossParameter::set_has_ignore_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ManipulateLossParameter::clear_has_ignore_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManipulateLossParameter::clear_ignore_value() {
  ignore_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ignore_value();
}
const ::std::string& ManipulateLossParameter::ignore_value() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.GetNoArena();
}
void ManipulateLossParameter::set_ignore_value(const ::std::string& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.ignore_value)
}
#if LANG_CXX11
void ManipulateLossParameter::set_ignore_value(::std::string&& value) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ManipulateLossParameter.ignore_value)
}
#endif
void ManipulateLossParameter::set_ignore_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ManipulateLossParameter.ignore_value)
}
void ManipulateLossParameter::set_ignore_value(const char* value, size_t size) {
  set_has_ignore_value();
  ignore_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ManipulateLossParameter.ignore_value)
}
::std::string* ManipulateLossParameter::mutable_ignore_value() {
  set_has_ignore_value();
  // @@protoc_insertion_point(field_mutable:caffe.ManipulateLossParameter.ignore_value)
  return ignore_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManipulateLossParameter::release_ignore_value() {
  // @@protoc_insertion_point(field_release:caffe.ManipulateLossParameter.ignore_value)
  clear_has_ignore_value();
  return ignore_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManipulateLossParameter::set_allocated_ignore_value(::std::string* ignore_value) {
  if (ignore_value != NULL) {
    set_has_ignore_value();
  } else {
    clear_has_ignore_value();
  }
  ignore_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ignore_value);
  // @@protoc_insertion_point(field_set_allocated:caffe.ManipulateLossParameter.ignore_value)
}

// optional bool use_fullzeroignore = 3 [default = false];
bool ManipulateLossParameter::has_use_fullzeroignore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManipulateLossParameter::set_has_use_fullzeroignore() {
  _has_bits_[0] |= 0x00000004u;
}
void ManipulateLossParameter::clear_has_use_fullzeroignore() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManipulateLossParameter::clear_use_fullzeroignore() {
  use_fullzeroignore_ = false;
  clear_has_use_fullzeroignore();
}
bool ManipulateLossParameter::use_fullzeroignore() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_fullzeroignore)
  return use_fullzeroignore_;
}
void ManipulateLossParameter::set_use_fullzeroignore(bool value) {
  set_has_use_fullzeroignore();
  use_fullzeroignore_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_fullzeroignore)
}

// optional float bg_ratio = 4 [default = 1];
bool ManipulateLossParameter::has_bg_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManipulateLossParameter::set_has_bg_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
void ManipulateLossParameter::clear_has_bg_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManipulateLossParameter::clear_bg_ratio() {
  bg_ratio_ = 1;
  clear_has_bg_ratio();
}
float ManipulateLossParameter::bg_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.bg_ratio)
  return bg_ratio_;
}
void ManipulateLossParameter::set_bg_ratio(float value) {
  set_has_bg_ratio();
  bg_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.bg_ratio)
}

// optional float uniform_droprate = 5 [default = 1];
bool ManipulateLossParameter::has_uniform_droprate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManipulateLossParameter::set_has_uniform_droprate() {
  _has_bits_[0] |= 0x00000100u;
}
void ManipulateLossParameter::clear_has_uniform_droprate() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManipulateLossParameter::clear_uniform_droprate() {
  uniform_droprate_ = 1;
  clear_has_uniform_droprate();
}
float ManipulateLossParameter::uniform_droprate() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.uniform_droprate)
  return uniform_droprate_;
}
void ManipulateLossParameter::set_uniform_droprate(float value) {
  set_has_uniform_droprate();
  uniform_droprate_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.uniform_droprate)
}

// optional bool use_perchannel_balance = 6 [default = false];
bool ManipulateLossParameter::has_use_perchannel_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManipulateLossParameter::set_has_use_perchannel_balance() {
  _has_bits_[0] |= 0x00000008u;
}
void ManipulateLossParameter::clear_has_use_perchannel_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManipulateLossParameter::clear_use_perchannel_balance() {
  use_perchannel_balance_ = false;
  clear_has_use_perchannel_balance();
}
bool ManipulateLossParameter::use_perchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_perchannel_balance)
  return use_perchannel_balance_;
}
void ManipulateLossParameter::set_use_perchannel_balance(bool value) {
  set_has_use_perchannel_balance();
  use_perchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_perchannel_balance)
}

// optional bool drop_singleclasschannel = 7 [default = false];
bool ManipulateLossParameter::has_drop_singleclasschannel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManipulateLossParameter::set_has_drop_singleclasschannel() {
  _has_bits_[0] |= 0x00000010u;
}
void ManipulateLossParameter::clear_has_drop_singleclasschannel() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManipulateLossParameter::clear_drop_singleclasschannel() {
  drop_singleclasschannel_ = false;
  clear_has_drop_singleclasschannel();
}
bool ManipulateLossParameter::drop_singleclasschannel() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.drop_singleclasschannel)
  return drop_singleclasschannel_;
}
void ManipulateLossParameter::set_drop_singleclasschannel(bool value) {
  set_has_drop_singleclasschannel();
  drop_singleclasschannel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.drop_singleclasschannel)
}

// optional bool print_info = 8 [default = false];
bool ManipulateLossParameter::has_print_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManipulateLossParameter::set_has_print_info() {
  _has_bits_[0] |= 0x00000020u;
}
void ManipulateLossParameter::clear_has_print_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManipulateLossParameter::clear_print_info() {
  print_info_ = false;
  clear_has_print_info();
}
bool ManipulateLossParameter::print_info() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.print_info)
  return print_info_;
}
void ManipulateLossParameter::set_print_info(bool value) {
  set_has_print_info();
  print_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.print_info)
}

// optional bool use_unionchannel_balance = 9 [default = false];
bool ManipulateLossParameter::has_use_unionchannel_balance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManipulateLossParameter::set_has_use_unionchannel_balance() {
  _has_bits_[0] |= 0x00000040u;
}
void ManipulateLossParameter::clear_has_use_unionchannel_balance() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManipulateLossParameter::clear_use_unionchannel_balance() {
  use_unionchannel_balance_ = false;
  clear_has_use_unionchannel_balance();
}
bool ManipulateLossParameter::use_unionchannel_balance() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulateLossParameter.use_unionchannel_balance)
  return use_unionchannel_balance_;
}
void ManipulateLossParameter::set_use_unionchannel_balance(bool value) {
  set_has_use_unionchannel_balance();
  use_unionchannel_balance_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulateLossParameter.use_unionchannel_balance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeParameter::kResizeRatioFieldNumber;
const int ResizeParameter::kTypeFieldNumber;
const int ResizeParameter::kIsPyramidTestFieldNumber;
const int ResizeParameter::kHeightFieldNumber;
const int ResizeParameter::kWidthFieldNumber;
const int ResizeParameter::kOutHeightScaleFieldNumber;
const int ResizeParameter::kOutWidthScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeParameter::ResizeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ResizeParameter)
}
ResizeParameter::ResizeParameter(const ResizeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_pyramid_test_, &from.is_pyramid_test_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_pyramid_test_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:caffe.ResizeParameter)
}

void ResizeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_pyramid_test_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_width_scale_) -
      reinterpret_cast<char*>(&is_pyramid_test_)) + sizeof(out_width_scale_));
  resize_ratio_ = 1;
  type_ = 1;
}

ResizeParameter::~ResizeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ResizeParameter)
  SharedDtor();
}

void ResizeParameter::SharedDtor() {
}

void ResizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResizeParameter& ResizeParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeParameter* ResizeParameter::New(::google::protobuf::Arena* arena) const {
  ResizeParameter* n = new ResizeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ResizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&is_pyramid_test_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&out_width_scale_) -
        reinterpret_cast<char*>(&is_pyramid_test_)) + sizeof(out_width_scale_));
    resize_ratio_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ResizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float resize_ratio = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_resize_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resize_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ResizeParameter_Type_IsValid(value)) {
            set_type(static_cast< ::caffe::ResizeParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pyramid_test = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_pyramid_test();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pyramid_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float out_height_scale = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_out_height_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_height_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float out_width_scale = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_out_width_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &out_width_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ResizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ResizeParameter)
  return false;
#undef DO_
}

void ResizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ResizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float resize_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->resize_ratio(), output);
  }

  // optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bool is_pyramid_test = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_pyramid_test(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional float width = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->width(), output);
  }

  // optional float out_height_scale = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->out_height_scale(), output);
  }

  // optional float out_width_scale = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->out_width_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ResizeParameter)
}

::google::protobuf::uint8* ResizeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ResizeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float resize_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->resize_ratio(), target);
  }

  // optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bool is_pyramid_test = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_pyramid_test(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional float width = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->width(), target);
  }

  // optional float out_height_scale = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->out_height_scale(), target);
  }

  // optional float out_width_scale = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->out_width_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ResizeParameter)
  return target;
}

size_t ResizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ResizeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool is_pyramid_test = 5 [default = false];
    if (has_is_pyramid_test()) {
      total_size += 1 + 1;
    }

    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float width = 7;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float out_height_scale = 8;
    if (has_out_height_scale()) {
      total_size += 1 + 4;
    }

    // optional float out_width_scale = 9;
    if (has_out_width_scale()) {
      total_size += 1 + 4;
    }

    // optional float resize_ratio = 1 [default = 1];
    if (has_resize_ratio()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ResizeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ResizeParameter)
    MergeFrom(*source);
  }
}

void ResizeParameter::MergeFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      is_pyramid_test_ = from.is_pyramid_test_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      out_height_scale_ = from.out_height_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      out_width_scale_ = from.out_width_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      resize_ratio_ = from.resize_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeParameter::CopyFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeParameter::IsInitialized() const {
  return true;
}

void ResizeParameter::Swap(ResizeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeParameter::InternalSwap(ResizeParameter* other) {
  using std::swap;
  swap(is_pyramid_test_, other->is_pyramid_test_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(out_height_scale_, other->out_height_scale_);
  swap(out_width_scale_, other->out_width_scale_);
  swap(resize_ratio_, other->resize_ratio_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeParameter

// optional float resize_ratio = 1 [default = 1];
bool ResizeParameter::has_resize_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResizeParameter::set_has_resize_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
void ResizeParameter::clear_has_resize_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResizeParameter::clear_resize_ratio() {
  resize_ratio_ = 1;
  clear_has_resize_ratio();
}
float ResizeParameter::resize_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.resize_ratio)
  return resize_ratio_;
}
void ResizeParameter::set_resize_ratio(float value) {
  set_has_resize_ratio();
  resize_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.resize_ratio)
}

// optional .caffe.ResizeParameter.Type type = 4 [default = NEAREST];
bool ResizeParameter::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ResizeParameter::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void ResizeParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void ResizeParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
::caffe::ResizeParameter_Type ResizeParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.type)
  return static_cast< ::caffe::ResizeParameter_Type >(type_);
}
void ResizeParameter::set_type(::caffe::ResizeParameter_Type value) {
  assert(::caffe::ResizeParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.type)
}

// optional bool is_pyramid_test = 5 [default = false];
bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000001u;
}
void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
bool ResizeParameter::is_pyramid_test() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.is_pyramid_test)
  return is_pyramid_test_;
}
void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.is_pyramid_test)
}

// optional float height = 6;
bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResizeParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
float ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
void ResizeParameter::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional float width = 7;
bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResizeParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
float ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
void ResizeParameter::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional float out_height_scale = 8;
bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
float ResizeParameter::out_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_height_scale)
  return out_height_scale_;
}
void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_height_scale)
}

// optional float out_width_scale = 9;
bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
float ResizeParameter::out_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_width_scale)
  return out_width_scale_;
}
void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_width_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TemporalLstmParameter::kNumOutputFieldNumber;
const int TemporalLstmParameter::kBiasTermFieldNumber;
const int TemporalLstmParameter::kWeightFillerFieldNumber;
const int TemporalLstmParameter::kBiasFillerFieldNumber;
const int TemporalLstmParameter::kHorizontalFieldNumber;
const int TemporalLstmParameter::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TemporalLstmParameter::TemporalLstmParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TemporalLstmParameter)
}
TemporalLstmParameter::TemporalLstmParameter(const TemporalLstmParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:caffe.TemporalLstmParameter)
}

void TemporalLstmParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(reverse_));
  bias_term_ = true;
  horizontal_ = true;
}

TemporalLstmParameter::~TemporalLstmParameter() {
  // @@protoc_insertion_point(destructor:caffe.TemporalLstmParameter)
  SharedDtor();
}

void TemporalLstmParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void TemporalLstmParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemporalLstmParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TemporalLstmParameter& TemporalLstmParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TemporalLstmParameter* TemporalLstmParameter::New(::google::protobuf::Arena* arena) const {
  TemporalLstmParameter* n = new TemporalLstmParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TemporalLstmParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TemporalLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(reverse_));
    bias_term_ = true;
    horizontal_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TemporalLstmParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TemporalLstmParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TemporalLstmParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TemporalLstmParameter)
  return false;
#undef DO_
}

void TemporalLstmParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TemporalLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TemporalLstmParameter)
}

::google::protobuf::uint8* TemporalLstmParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TemporalLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TemporalLstmParameter)
  return target;
}

size_t TemporalLstmParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TemporalLstmParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemporalLstmParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TemporalLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TemporalLstmParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TemporalLstmParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TemporalLstmParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TemporalLstmParameter)
    MergeFrom(*source);
  }
}

void TemporalLstmParameter::MergeFrom(const TemporalLstmParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TemporalLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TemporalLstmParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TemporalLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemporalLstmParameter::CopyFrom(const TemporalLstmParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TemporalLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporalLstmParameter::IsInitialized() const {
  return true;
}

void TemporalLstmParameter::Swap(TemporalLstmParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TemporalLstmParameter::InternalSwap(TemporalLstmParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(bias_term_, other->bias_term_);
  swap(horizontal_, other->horizontal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TemporalLstmParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TemporalLstmParameter

// optional uint32 num_output = 1;
bool TemporalLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TemporalLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void TemporalLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void TemporalLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 TemporalLstmParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.num_output)
  return num_output_;
}
void TemporalLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.TemporalLstmParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool TemporalLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TemporalLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
void TemporalLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void TemporalLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool TemporalLstmParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.bias_term)
  return bias_term_;
}
void TemporalLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.TemporalLstmParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool TemporalLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TemporalLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void TemporalLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void TemporalLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& TemporalLstmParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* TemporalLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TemporalLstmParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* TemporalLstmParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.TemporalLstmParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void TemporalLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TemporalLstmParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool TemporalLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TemporalLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void TemporalLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void TemporalLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& TemporalLstmParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* TemporalLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TemporalLstmParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* TemporalLstmParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.TemporalLstmParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void TemporalLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TemporalLstmParameter.bias_filler)
}

// optional bool horizontal = 16 [default = true];
bool TemporalLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TemporalLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
void TemporalLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
void TemporalLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool TemporalLstmParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.horizontal)
  return horizontal_;
}
void TemporalLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.TemporalLstmParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool TemporalLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TemporalLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void TemporalLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void TemporalLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool TemporalLstmParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.TemporalLstmParameter.reverse)
  return reverse_;
}
void TemporalLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.TemporalLstmParameter.reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeakGateLstmParameter::kNumOutputFieldNumber;
const int WeakGateLstmParameter::kBiasTermFieldNumber;
const int WeakGateLstmParameter::kWeightFillerFieldNumber;
const int WeakGateLstmParameter::kBiasFillerFieldNumber;
const int WeakGateLstmParameter::kHorizontalFieldNumber;
const int WeakGateLstmParameter::kReverseFieldNumber;
const int WeakGateLstmParameter::kRestrictWFieldNumber;
const int WeakGateLstmParameter::kPrintallDatadiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeakGateLstmParameter::WeakGateLstmParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WeakGateLstmParameter)
}
WeakGateLstmParameter::WeakGateLstmParameter(const WeakGateLstmParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&restrict_w_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(restrict_w_));
  // @@protoc_insertion_point(copy_constructor:caffe.WeakGateLstmParameter)
}

void WeakGateLstmParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&printall_datadiff_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(printall_datadiff_));
  bias_term_ = true;
  horizontal_ = true;
  restrict_w_ = -1;
}

WeakGateLstmParameter::~WeakGateLstmParameter() {
  // @@protoc_insertion_point(destructor:caffe.WeakGateLstmParameter)
  SharedDtor();
}

void WeakGateLstmParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void WeakGateLstmParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeakGateLstmParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeakGateLstmParameter& WeakGateLstmParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeakGateLstmParameter* WeakGateLstmParameter::New(::google::protobuf::Arena* arena) const {
  WeakGateLstmParameter* n = new WeakGateLstmParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeakGateLstmParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WeakGateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&printall_datadiff_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(printall_datadiff_));
    bias_term_ = true;
    horizontal_ = true;
    restrict_w_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeakGateLstmParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WeakGateLstmParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restrict_w = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_restrict_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restrict_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool printall_datadiff = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_printall_datadiff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &printall_datadiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WeakGateLstmParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WeakGateLstmParameter)
  return false;
#undef DO_
}

void WeakGateLstmParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WeakGateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional bool horizontal = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->horizontal(), output);
  }

  // optional bool reverse = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reverse(), output);
  }

  // optional float restrict_w = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->restrict_w(), output);
  }

  // optional bool printall_datadiff = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->printall_datadiff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WeakGateLstmParameter)
}

::google::protobuf::uint8* WeakGateLstmParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WeakGateLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->horizontal(), target);
  }

  // optional bool reverse = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reverse(), target);
  }

  // optional float restrict_w = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->restrict_w(), target);
  }

  // optional bool printall_datadiff = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->printall_datadiff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WeakGateLstmParameter)
  return target;
}

size_t WeakGateLstmParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WeakGateLstmParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 6 [default = false];
    if (has_reverse()) {
      total_size += 1 + 1;
    }

    // optional bool printall_datadiff = 8 [default = false];
    if (has_printall_datadiff()) {
      total_size += 1 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 5 [default = true];
    if (has_horizontal()) {
      total_size += 1 + 1;
    }

    // optional float restrict_w = 7 [default = -1];
    if (has_restrict_w()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeakGateLstmParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WeakGateLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const WeakGateLstmParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeakGateLstmParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WeakGateLstmParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WeakGateLstmParameter)
    MergeFrom(*source);
  }
}

void WeakGateLstmParameter::MergeFrom(const WeakGateLstmParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WeakGateLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      printall_datadiff_ = from.printall_datadiff_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000040u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00000080u) {
      restrict_w_ = from.restrict_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeakGateLstmParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WeakGateLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeakGateLstmParameter::CopyFrom(const WeakGateLstmParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WeakGateLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeakGateLstmParameter::IsInitialized() const {
  return true;
}

void WeakGateLstmParameter::Swap(WeakGateLstmParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeakGateLstmParameter::InternalSwap(WeakGateLstmParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(printall_datadiff_, other->printall_datadiff_);
  swap(bias_term_, other->bias_term_);
  swap(horizontal_, other->horizontal_);
  swap(restrict_w_, other->restrict_w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeakGateLstmParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeakGateLstmParameter

// optional uint32 num_output = 1;
bool WeakGateLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WeakGateLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void WeakGateLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void WeakGateLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 WeakGateLstmParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.num_output)
  return num_output_;
}
void WeakGateLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool WeakGateLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WeakGateLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
void WeakGateLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
void WeakGateLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool WeakGateLstmParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.bias_term)
  return bias_term_;
}
void WeakGateLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool WeakGateLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeakGateLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void WeakGateLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeakGateLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& WeakGateLstmParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* WeakGateLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.WeakGateLstmParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* WeakGateLstmParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.WeakGateLstmParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void WeakGateLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WeakGateLstmParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool WeakGateLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeakGateLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void WeakGateLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeakGateLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& WeakGateLstmParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* WeakGateLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.WeakGateLstmParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* WeakGateLstmParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.WeakGateLstmParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void WeakGateLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WeakGateLstmParameter.bias_filler)
}

// optional bool horizontal = 5 [default = true];
bool WeakGateLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WeakGateLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000040u;
}
void WeakGateLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000040u;
}
void WeakGateLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool WeakGateLstmParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.horizontal)
  return horizontal_;
}
void WeakGateLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.horizontal)
}

// optional bool reverse = 6 [default = false];
bool WeakGateLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WeakGateLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void WeakGateLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void WeakGateLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool WeakGateLstmParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.reverse)
  return reverse_;
}
void WeakGateLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.reverse)
}

// optional float restrict_w = 7 [default = -1];
bool WeakGateLstmParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WeakGateLstmParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000080u;
}
void WeakGateLstmParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void WeakGateLstmParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
float WeakGateLstmParameter::restrict_w() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.restrict_w)
  return restrict_w_;
}
void WeakGateLstmParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.restrict_w)
}

// optional bool printall_datadiff = 8 [default = false];
bool WeakGateLstmParameter::has_printall_datadiff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WeakGateLstmParameter::set_has_printall_datadiff() {
  _has_bits_[0] |= 0x00000010u;
}
void WeakGateLstmParameter::clear_has_printall_datadiff() {
  _has_bits_[0] &= ~0x00000010u;
}
void WeakGateLstmParameter::clear_printall_datadiff() {
  printall_datadiff_ = false;
  clear_has_printall_datadiff();
}
bool WeakGateLstmParameter::printall_datadiff() const {
  // @@protoc_insertion_point(field_get:caffe.WeakGateLstmParameter.printall_datadiff)
  return printall_datadiff_;
}
void WeakGateLstmParameter::set_printall_datadiff(bool value) {
  set_has_printall_datadiff();
  printall_datadiff_ = value;
  // @@protoc_insertion_point(field_set:caffe.WeakGateLstmParameter.printall_datadiff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialLstmParameter::kNumOutputFieldNumber;
const int SpatialLstmParameter::kBiasTermFieldNumber;
const int SpatialLstmParameter::kWeightFillerFieldNumber;
const int SpatialLstmParameter::kBiasFillerFieldNumber;
const int SpatialLstmParameter::kHorizontalFieldNumber;
const int SpatialLstmParameter::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialLstmParameter::SpatialLstmParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SpatialLstmParameter)
}
SpatialLstmParameter::SpatialLstmParameter(const SpatialLstmParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:caffe.SpatialLstmParameter)
}

void SpatialLstmParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(reverse_));
  bias_term_ = true;
  horizontal_ = true;
}

SpatialLstmParameter::~SpatialLstmParameter() {
  // @@protoc_insertion_point(destructor:caffe.SpatialLstmParameter)
  SharedDtor();
}

void SpatialLstmParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void SpatialLstmParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialLstmParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialLstmParameter& SpatialLstmParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpatialLstmParameter* SpatialLstmParameter::New(::google::protobuf::Arena* arena) const {
  SpatialLstmParameter* n = new SpatialLstmParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialLstmParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SpatialLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(reverse_));
    bias_term_ = true;
    horizontal_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpatialLstmParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SpatialLstmParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SpatialLstmParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SpatialLstmParameter)
  return false;
#undef DO_
}

void SpatialLstmParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SpatialLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SpatialLstmParameter)
}

::google::protobuf::uint8* SpatialLstmParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SpatialLstmParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SpatialLstmParameter)
  return target;
}

size_t SpatialLstmParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SpatialLstmParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialLstmParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SpatialLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialLstmParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialLstmParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SpatialLstmParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SpatialLstmParameter)
    MergeFrom(*source);
  }
}

void SpatialLstmParameter::MergeFrom(const SpatialLstmParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SpatialLstmParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpatialLstmParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SpatialLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialLstmParameter::CopyFrom(const SpatialLstmParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SpatialLstmParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialLstmParameter::IsInitialized() const {
  return true;
}

void SpatialLstmParameter::Swap(SpatialLstmParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialLstmParameter::InternalSwap(SpatialLstmParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(bias_term_, other->bias_term_);
  swap(horizontal_, other->horizontal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialLstmParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpatialLstmParameter

// optional uint32 num_output = 1;
bool SpatialLstmParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpatialLstmParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void SpatialLstmParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpatialLstmParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 SpatialLstmParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.num_output)
  return num_output_;
}
void SpatialLstmParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialLstmParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool SpatialLstmParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpatialLstmParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
void SpatialLstmParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpatialLstmParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool SpatialLstmParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.bias_term)
  return bias_term_;
}
void SpatialLstmParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialLstmParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool SpatialLstmParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpatialLstmParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void SpatialLstmParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpatialLstmParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& SpatialLstmParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* SpatialLstmParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SpatialLstmParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* SpatialLstmParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.SpatialLstmParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void SpatialLstmParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SpatialLstmParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool SpatialLstmParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpatialLstmParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void SpatialLstmParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpatialLstmParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& SpatialLstmParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* SpatialLstmParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SpatialLstmParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* SpatialLstmParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.SpatialLstmParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void SpatialLstmParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SpatialLstmParameter.bias_filler)
}

// optional bool horizontal = 16 [default = true];
bool SpatialLstmParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpatialLstmParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000020u;
}
void SpatialLstmParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpatialLstmParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool SpatialLstmParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.horizontal)
  return horizontal_;
}
void SpatialLstmParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialLstmParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool SpatialLstmParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpatialLstmParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void SpatialLstmParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpatialLstmParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool SpatialLstmParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialLstmParameter.reverse)
  return reverse_;
}
void SpatialLstmParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialLstmParameter.reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialRecurrentParameter::kNumOutputFieldNumber;
const int SpatialRecurrentParameter::kBiasTermFieldNumber;
const int SpatialRecurrentParameter::kWeightFillerFieldNumber;
const int SpatialRecurrentParameter::kBiasFillerFieldNumber;
const int SpatialRecurrentParameter::kHorizontalFieldNumber;
const int SpatialRecurrentParameter::kReverseFieldNumber;
const int SpatialRecurrentParameter::kActiveFieldNumber;
const int SpatialRecurrentParameter::kBoundDiffFieldNumber;
const int SpatialRecurrentParameter::kRestrictWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialRecurrentParameter::SpatialRecurrentParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SpatialRecurrentParameter)
}
SpatialRecurrentParameter::SpatialRecurrentParameter(const SpatialRecurrentParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_diff_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(bound_diff_));
  // @@protoc_insertion_point(copy_constructor:caffe.SpatialRecurrentParameter)
}

void SpatialRecurrentParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(active_));
  restrict_w_ = -1;
  bias_term_ = true;
  horizontal_ = true;
  bound_diff_ = -1;
}

SpatialRecurrentParameter::~SpatialRecurrentParameter() {
  // @@protoc_insertion_point(destructor:caffe.SpatialRecurrentParameter)
  SharedDtor();
}

void SpatialRecurrentParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void SpatialRecurrentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialRecurrentParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialRecurrentParameter& SpatialRecurrentParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpatialRecurrentParameter* SpatialRecurrentParameter::New(::google::protobuf::Arena* arena) const {
  SpatialRecurrentParameter* n = new SpatialRecurrentParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialRecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SpatialRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(active_));
    restrict_w_ = -1;
    bias_term_ = true;
    horizontal_ = true;
  }
  bound_diff_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpatialRecurrentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SpatialRecurrentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SpatialRecurrentParameter_Active_IsValid(value)) {
            set_active(static_cast< ::caffe::SpatialRecurrentParameter_Active >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bound_diff = 19 [default = -1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_bound_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bound_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float restrict_w = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_restrict_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &restrict_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SpatialRecurrentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SpatialRecurrentParameter)
  return false;
#undef DO_
}

void SpatialRecurrentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SpatialRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->horizontal(), output);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reverse(), output);
  }

  // optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->active(), output);
  }

  // optional float bound_diff = 19 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->bound_diff(), output);
  }

  // optional float restrict_w = 20 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->restrict_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SpatialRecurrentParameter)
}

::google::protobuf::uint8* SpatialRecurrentParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SpatialRecurrentParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional bool horizontal = 16 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->horizontal(), target);
  }

  // optional bool reverse = 17 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->reverse(), target);
  }

  // optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->active(), target);
  }

  // optional float bound_diff = 19 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->bound_diff(), target);
  }

  // optional float restrict_w = 20 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->restrict_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SpatialRecurrentParameter)
  return target;
}

size_t SpatialRecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SpatialRecurrentParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool reverse = 17 [default = false];
    if (has_reverse()) {
      total_size += 2 + 1;
    }

    // optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->active());
    }

    // optional float restrict_w = 20 [default = -1];
    if (has_restrict_w()) {
      total_size += 2 + 4;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional bool horizontal = 16 [default = true];
    if (has_horizontal()) {
      total_size += 2 + 1;
    }

  }
  // optional float bound_diff = 19 [default = -1];
  if (has_bound_diff()) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialRecurrentParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SpatialRecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialRecurrentParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialRecurrentParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SpatialRecurrentParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SpatialRecurrentParameter)
    MergeFrom(*source);
  }
}

void SpatialRecurrentParameter::MergeFrom(const SpatialRecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SpatialRecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000020u) {
      restrict_w_ = from.restrict_w_;
    }
    if (cached_has_bits & 0x00000040u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000080u) {
      horizontal_ = from.horizontal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_bound_diff(from.bound_diff());
  }
}

void SpatialRecurrentParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SpatialRecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialRecurrentParameter::CopyFrom(const SpatialRecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SpatialRecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialRecurrentParameter::IsInitialized() const {
  return true;
}

void SpatialRecurrentParameter::Swap(SpatialRecurrentParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialRecurrentParameter::InternalSwap(SpatialRecurrentParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(reverse_, other->reverse_);
  swap(active_, other->active_);
  swap(restrict_w_, other->restrict_w_);
  swap(bias_term_, other->bias_term_);
  swap(horizontal_, other->horizontal_);
  swap(bound_diff_, other->bound_diff_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialRecurrentParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpatialRecurrentParameter

// optional uint32 num_output = 1;
bool SpatialRecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpatialRecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void SpatialRecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpatialRecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 SpatialRecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.num_output)
  return num_output_;
}
void SpatialRecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool SpatialRecurrentParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SpatialRecurrentParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000040u;
}
void SpatialRecurrentParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000040u;
}
void SpatialRecurrentParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool SpatialRecurrentParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.bias_term)
  return bias_term_;
}
void SpatialRecurrentParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool SpatialRecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpatialRecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void SpatialRecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpatialRecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& SpatialRecurrentParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* SpatialRecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SpatialRecurrentParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* SpatialRecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.SpatialRecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void SpatialRecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SpatialRecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool SpatialRecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpatialRecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void SpatialRecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpatialRecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& SpatialRecurrentParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* SpatialRecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SpatialRecurrentParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* SpatialRecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.SpatialRecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void SpatialRecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SpatialRecurrentParameter.bias_filler)
}

// optional bool horizontal = 16 [default = true];
bool SpatialRecurrentParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SpatialRecurrentParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000080u;
}
void SpatialRecurrentParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000080u;
}
void SpatialRecurrentParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool SpatialRecurrentParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.horizontal)
  return horizontal_;
}
void SpatialRecurrentParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.horizontal)
}

// optional bool reverse = 17 [default = false];
bool SpatialRecurrentParameter::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpatialRecurrentParameter::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void SpatialRecurrentParameter::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpatialRecurrentParameter::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool SpatialRecurrentParameter::reverse() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.reverse)
  return reverse_;
}
void SpatialRecurrentParameter::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.reverse)
}

// optional .caffe.SpatialRecurrentParameter.Active active = 18 [default = LINEAR];
bool SpatialRecurrentParameter::has_active() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpatialRecurrentParameter::set_has_active() {
  _has_bits_[0] |= 0x00000010u;
}
void SpatialRecurrentParameter::clear_has_active() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpatialRecurrentParameter::clear_active() {
  active_ = 0;
  clear_has_active();
}
::caffe::SpatialRecurrentParameter_Active SpatialRecurrentParameter::active() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.active)
  return static_cast< ::caffe::SpatialRecurrentParameter_Active >(active_);
}
void SpatialRecurrentParameter::set_active(::caffe::SpatialRecurrentParameter_Active value) {
  assert(::caffe::SpatialRecurrentParameter_Active_IsValid(value));
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.active)
}

// optional float bound_diff = 19 [default = -1];
bool SpatialRecurrentParameter::has_bound_diff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SpatialRecurrentParameter::set_has_bound_diff() {
  _has_bits_[0] |= 0x00000100u;
}
void SpatialRecurrentParameter::clear_has_bound_diff() {
  _has_bits_[0] &= ~0x00000100u;
}
void SpatialRecurrentParameter::clear_bound_diff() {
  bound_diff_ = -1;
  clear_has_bound_diff();
}
float SpatialRecurrentParameter::bound_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.bound_diff)
  return bound_diff_;
}
void SpatialRecurrentParameter::set_bound_diff(float value) {
  set_has_bound_diff();
  bound_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.bound_diff)
}

// optional float restrict_w = 20 [default = -1];
bool SpatialRecurrentParameter::has_restrict_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpatialRecurrentParameter::set_has_restrict_w() {
  _has_bits_[0] |= 0x00000020u;
}
void SpatialRecurrentParameter::clear_has_restrict_w() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpatialRecurrentParameter::clear_restrict_w() {
  restrict_w_ = -1;
  clear_has_restrict_w();
}
float SpatialRecurrentParameter::restrict_w() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialRecurrentParameter.restrict_w)
  return restrict_w_;
}
void SpatialRecurrentParameter::set_restrict_w(float value) {
  set_has_restrict_w();
  restrict_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialRecurrentParameter.restrict_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManipulatelabelParameter::kMaxlabelFieldNumber;
const int ManipulatelabelParameter::kTypeFieldNumber;
const int ManipulatelabelParameter::kHorizontalFieldNumber;
const int ManipulatelabelParameter::kEdgerangeFieldNumber;
const int ManipulatelabelParameter::kDuplicateDimFieldNumber;
const int ManipulatelabelParameter::kDuplicateNumFieldNumber;
const int ManipulatelabelParameter::kReverseLabelFieldNumber;
const int ManipulatelabelParameter::kBothEdgeDirectionFieldNumber;
const int ManipulatelabelParameter::kDuplicateIsanyoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManipulatelabelParameter::ManipulatelabelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ManipulatelabelParameter)
}
ManipulatelabelParameter::ManipulatelabelParameter(const ManipulatelabelParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxlabel_, &from.maxlabel_,
    static_cast<size_t>(reinterpret_cast<char*>(&duplicate_dim_) -
    reinterpret_cast<char*>(&maxlabel_)) + sizeof(duplicate_dim_));
  // @@protoc_insertion_point(copy_constructor:caffe.ManipulatelabelParameter)
}

void ManipulatelabelParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxlabel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duplicate_isanyone_) -
      reinterpret_cast<char*>(&maxlabel_)) + sizeof(duplicate_isanyone_));
  duplicate_num_ = 1u;
  type_ = 1;
  horizontal_ = true;
  edgerange_ = 1u;
  duplicate_dim_ = 1u;
}

ManipulatelabelParameter::~ManipulatelabelParameter() {
  // @@protoc_insertion_point(destructor:caffe.ManipulatelabelParameter)
  SharedDtor();
}

void ManipulatelabelParameter::SharedDtor() {
}

void ManipulatelabelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulatelabelParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManipulatelabelParameter& ManipulatelabelParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManipulatelabelParameter* ManipulatelabelParameter::New(::google::protobuf::Arena* arena) const {
  ManipulatelabelParameter* n = new ManipulatelabelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManipulatelabelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ManipulatelabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&maxlabel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duplicate_isanyone_) -
        reinterpret_cast<char*>(&maxlabel_)) + sizeof(duplicate_isanyone_));
    duplicate_num_ = 1u;
    type_ = 1;
    horizontal_ = true;
    edgerange_ = 1u;
  }
  duplicate_dim_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManipulatelabelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ManipulatelabelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxlabel = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_maxlabel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ManipulatelabelParameter_Type_IsValid(value)) {
            set_type(static_cast< ::caffe::ManipulatelabelParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horizontal = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_horizontal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 edgerange = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_edgerange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edgerange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duplicate_dim = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_duplicate_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duplicate_num = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_duplicate_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse_label = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reverse_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool both_edge_direction = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_both_edge_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &both_edge_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool duplicate_isanyone = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_duplicate_isanyone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duplicate_isanyone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ManipulatelabelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ManipulatelabelParameter)
  return false;
#undef DO_
}

void ManipulatelabelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ManipulatelabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maxlabel = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxlabel(), output);
  }

  // optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool horizontal = 3 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->horizontal(), output);
  }

  // optional uint32 edgerange = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->edgerange(), output);
  }

  // optional uint32 duplicate_dim = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->duplicate_dim(), output);
  }

  // optional uint32 duplicate_num = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->duplicate_num(), output);
  }

  // optional bool reverse_label = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reverse_label(), output);
  }

  // optional bool both_edge_direction = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->both_edge_direction(), output);
  }

  // optional bool duplicate_isanyone = 9 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->duplicate_isanyone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ManipulatelabelParameter)
}

::google::protobuf::uint8* ManipulatelabelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ManipulatelabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maxlabel = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxlabel(), target);
  }

  // optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool horizontal = 3 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->horizontal(), target);
  }

  // optional uint32 edgerange = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->edgerange(), target);
  }

  // optional uint32 duplicate_dim = 5 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->duplicate_dim(), target);
  }

  // optional uint32 duplicate_num = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->duplicate_num(), target);
  }

  // optional bool reverse_label = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reverse_label(), target);
  }

  // optional bool both_edge_direction = 8 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->both_edge_direction(), target);
  }

  // optional bool duplicate_isanyone = 9 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->duplicate_isanyone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ManipulatelabelParameter)
  return target;
}

size_t ManipulatelabelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ManipulatelabelParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 maxlabel = 1 [default = 0];
    if (has_maxlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlabel());
    }

    // optional bool reverse_label = 7 [default = false];
    if (has_reverse_label()) {
      total_size += 1 + 1;
    }

    // optional bool both_edge_direction = 8 [default = false];
    if (has_both_edge_direction()) {
      total_size += 1 + 1;
    }

    // optional bool duplicate_isanyone = 9 [default = false];
    if (has_duplicate_isanyone()) {
      total_size += 1 + 1;
    }

    // optional uint32 duplicate_num = 6 [default = 1];
    if (has_duplicate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate_num());
    }

    // optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool horizontal = 3 [default = true];
    if (has_horizontal()) {
      total_size += 1 + 1;
    }

    // optional uint32 edgerange = 4 [default = 1];
    if (has_edgerange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->edgerange());
    }

  }
  // optional uint32 duplicate_dim = 5 [default = 1];
  if (has_duplicate_dim()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duplicate_dim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulatelabelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ManipulatelabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ManipulatelabelParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManipulatelabelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ManipulatelabelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ManipulatelabelParameter)
    MergeFrom(*source);
  }
}

void ManipulatelabelParameter::MergeFrom(const ManipulatelabelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ManipulatelabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      maxlabel_ = from.maxlabel_;
    }
    if (cached_has_bits & 0x00000002u) {
      reverse_label_ = from.reverse_label_;
    }
    if (cached_has_bits & 0x00000004u) {
      both_edge_direction_ = from.both_edge_direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      duplicate_isanyone_ = from.duplicate_isanyone_;
    }
    if (cached_has_bits & 0x00000010u) {
      duplicate_num_ = from.duplicate_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      horizontal_ = from.horizontal_;
    }
    if (cached_has_bits & 0x00000080u) {
      edgerange_ = from.edgerange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_duplicate_dim(from.duplicate_dim());
  }
}

void ManipulatelabelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ManipulatelabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulatelabelParameter::CopyFrom(const ManipulatelabelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ManipulatelabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulatelabelParameter::IsInitialized() const {
  return true;
}

void ManipulatelabelParameter::Swap(ManipulatelabelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManipulatelabelParameter::InternalSwap(ManipulatelabelParameter* other) {
  using std::swap;
  swap(maxlabel_, other->maxlabel_);
  swap(reverse_label_, other->reverse_label_);
  swap(both_edge_direction_, other->both_edge_direction_);
  swap(duplicate_isanyone_, other->duplicate_isanyone_);
  swap(duplicate_num_, other->duplicate_num_);
  swap(type_, other->type_);
  swap(horizontal_, other->horizontal_);
  swap(edgerange_, other->edgerange_);
  swap(duplicate_dim_, other->duplicate_dim_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManipulatelabelParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManipulatelabelParameter

// optional uint32 maxlabel = 1 [default = 0];
bool ManipulatelabelParameter::has_maxlabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManipulatelabelParameter::set_has_maxlabel() {
  _has_bits_[0] |= 0x00000001u;
}
void ManipulatelabelParameter::clear_has_maxlabel() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManipulatelabelParameter::clear_maxlabel() {
  maxlabel_ = 0u;
  clear_has_maxlabel();
}
::google::protobuf::uint32 ManipulatelabelParameter::maxlabel() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.maxlabel)
  return maxlabel_;
}
void ManipulatelabelParameter::set_maxlabel(::google::protobuf::uint32 value) {
  set_has_maxlabel();
  maxlabel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.maxlabel)
}

// optional .caffe.ManipulatelabelParameter.Type type = 2 [default = EXPAND];
bool ManipulatelabelParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManipulatelabelParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void ManipulatelabelParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManipulatelabelParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
::caffe::ManipulatelabelParameter_Type ManipulatelabelParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.type)
  return static_cast< ::caffe::ManipulatelabelParameter_Type >(type_);
}
void ManipulatelabelParameter::set_type(::caffe::ManipulatelabelParameter_Type value) {
  assert(::caffe::ManipulatelabelParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.type)
}

// optional bool horizontal = 3 [default = true];
bool ManipulatelabelParameter::has_horizontal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManipulatelabelParameter::set_has_horizontal() {
  _has_bits_[0] |= 0x00000040u;
}
void ManipulatelabelParameter::clear_has_horizontal() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManipulatelabelParameter::clear_horizontal() {
  horizontal_ = true;
  clear_has_horizontal();
}
bool ManipulatelabelParameter::horizontal() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.horizontal)
  return horizontal_;
}
void ManipulatelabelParameter::set_horizontal(bool value) {
  set_has_horizontal();
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.horizontal)
}

// optional uint32 edgerange = 4 [default = 1];
bool ManipulatelabelParameter::has_edgerange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManipulatelabelParameter::set_has_edgerange() {
  _has_bits_[0] |= 0x00000080u;
}
void ManipulatelabelParameter::clear_has_edgerange() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManipulatelabelParameter::clear_edgerange() {
  edgerange_ = 1u;
  clear_has_edgerange();
}
::google::protobuf::uint32 ManipulatelabelParameter::edgerange() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.edgerange)
  return edgerange_;
}
void ManipulatelabelParameter::set_edgerange(::google::protobuf::uint32 value) {
  set_has_edgerange();
  edgerange_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.edgerange)
}

// optional uint32 duplicate_dim = 5 [default = 1];
bool ManipulatelabelParameter::has_duplicate_dim() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManipulatelabelParameter::set_has_duplicate_dim() {
  _has_bits_[0] |= 0x00000100u;
}
void ManipulatelabelParameter::clear_has_duplicate_dim() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManipulatelabelParameter::clear_duplicate_dim() {
  duplicate_dim_ = 1u;
  clear_has_duplicate_dim();
}
::google::protobuf::uint32 ManipulatelabelParameter::duplicate_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.duplicate_dim)
  return duplicate_dim_;
}
void ManipulatelabelParameter::set_duplicate_dim(::google::protobuf::uint32 value) {
  set_has_duplicate_dim();
  duplicate_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.duplicate_dim)
}

// optional uint32 duplicate_num = 6 [default = 1];
bool ManipulatelabelParameter::has_duplicate_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManipulatelabelParameter::set_has_duplicate_num() {
  _has_bits_[0] |= 0x00000010u;
}
void ManipulatelabelParameter::clear_has_duplicate_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManipulatelabelParameter::clear_duplicate_num() {
  duplicate_num_ = 1u;
  clear_has_duplicate_num();
}
::google::protobuf::uint32 ManipulatelabelParameter::duplicate_num() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.duplicate_num)
  return duplicate_num_;
}
void ManipulatelabelParameter::set_duplicate_num(::google::protobuf::uint32 value) {
  set_has_duplicate_num();
  duplicate_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.duplicate_num)
}

// optional bool reverse_label = 7 [default = false];
bool ManipulatelabelParameter::has_reverse_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManipulatelabelParameter::set_has_reverse_label() {
  _has_bits_[0] |= 0x00000002u;
}
void ManipulatelabelParameter::clear_has_reverse_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManipulatelabelParameter::clear_reverse_label() {
  reverse_label_ = false;
  clear_has_reverse_label();
}
bool ManipulatelabelParameter::reverse_label() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.reverse_label)
  return reverse_label_;
}
void ManipulatelabelParameter::set_reverse_label(bool value) {
  set_has_reverse_label();
  reverse_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.reverse_label)
}

// optional bool both_edge_direction = 8 [default = false];
bool ManipulatelabelParameter::has_both_edge_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManipulatelabelParameter::set_has_both_edge_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void ManipulatelabelParameter::clear_has_both_edge_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManipulatelabelParameter::clear_both_edge_direction() {
  both_edge_direction_ = false;
  clear_has_both_edge_direction();
}
bool ManipulatelabelParameter::both_edge_direction() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.both_edge_direction)
  return both_edge_direction_;
}
void ManipulatelabelParameter::set_both_edge_direction(bool value) {
  set_has_both_edge_direction();
  both_edge_direction_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.both_edge_direction)
}

// optional bool duplicate_isanyone = 9 [default = false];
bool ManipulatelabelParameter::has_duplicate_isanyone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManipulatelabelParameter::set_has_duplicate_isanyone() {
  _has_bits_[0] |= 0x00000008u;
}
void ManipulatelabelParameter::clear_has_duplicate_isanyone() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManipulatelabelParameter::clear_duplicate_isanyone() {
  duplicate_isanyone_ = false;
  clear_has_duplicate_isanyone();
}
bool ManipulatelabelParameter::duplicate_isanyone() const {
  // @@protoc_insertion_point(field_get:caffe.ManipulatelabelParameter.duplicate_isanyone)
  return duplicate_isanyone_;
}
void ManipulatelabelParameter::set_duplicate_isanyone(bool value) {
  set_has_duplicate_isanyone();
  duplicate_isanyone_ = value;
  // @@protoc_insertion_point(field_set:caffe.ManipulatelabelParameter.duplicate_isanyone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataArbitraryParameter::kSourceFieldNumber;
const int ImageDataArbitraryParameter::kUseDisturbFieldNumber;
const int ImageDataArbitraryParameter::kUseflipFieldNumber;
const int ImageDataArbitraryParameter::kBatchSizeFieldNumber;
const int ImageDataArbitraryParameter::kRandSkipFieldNumber;
const int ImageDataArbitraryParameter::kShuffleFieldNumber;
const int ImageDataArbitraryParameter::kCropSizeFieldNumber;
const int ImageDataArbitraryParameter::kMirrorFieldNumber;
const int ImageDataArbitraryParameter::kResizeTypeFieldNumber;
const int ImageDataArbitraryParameter::kDataHeightFieldNumber;
const int ImageDataArbitraryParameter::kDataWidthFieldNumber;
const int ImageDataArbitraryParameter::kDataChannelsFieldNumber;
const int ImageDataArbitraryParameter::kDataScaleFieldNumber;
const int ImageDataArbitraryParameter::kMeanFileFieldNumber;
const int ImageDataArbitraryParameter::kRandAngleFieldNumber;
const int ImageDataArbitraryParameter::kRandScaleFieldNumber;
const int ImageDataArbitraryParameter::kRandMovexFieldNumber;
const int ImageDataArbitraryParameter::kRandMoveyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataArbitraryParameter::ImageDataArbitraryParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataArbitraryParameter)
}
ImageDataArbitraryParameter::ImageDataArbitraryParameter(const ImageDataArbitraryParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      resize_type_(from.resize_type_),
      mean_file_(from.mean_file_),
      data_height_(from.data_height_),
      data_width_(from.data_width_),
      data_channels_(from.data_channels_),
      data_scale_(from.data_scale_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&rand_movey_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(rand_movey_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataArbitraryParameter)
}

void ImageDataArbitraryParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rand_movey_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(rand_movey_));
}

ImageDataArbitraryParameter::~ImageDataArbitraryParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataArbitraryParameter)
  SharedDtor();
}

void ImageDataArbitraryParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataArbitraryParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataArbitraryParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataArbitraryParameter& ImageDataArbitraryParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDataArbitraryParameter* ImageDataArbitraryParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataArbitraryParameter* n = new ImageDataArbitraryParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataArbitraryParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataArbitraryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resize_type_.Clear();
  mean_file_.Clear();
  data_height_.Clear();
  data_width_.Clear();
  data_channels_.Clear();
  data_scale_.Clear();
  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&rand_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rand_movey_) -
        reinterpret_cast<char*>(&rand_angle_)) + sizeof(rand_movey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDataArbitraryParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataArbitraryParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 resize_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_resize_type())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_resize_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file(this->mean_file_size() - 1).data(),
            static_cast<int>(this->mean_file(this->mean_file_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataArbitraryParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_data_height())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_data_width())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool useflip = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_useflip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_channels = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_data_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_angle = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_rand_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_scale = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_rand_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movex = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_rand_movex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movey = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_rand_movey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data_scale = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181u, input, this->mutable_data_scale())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataArbitraryParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataArbitraryParameter)
  return false;
#undef DO_
}

void ImageDataArbitraryParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataArbitraryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // repeated uint32 resize_type = 2;
  for (int i = 0, n = this->resize_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->resize_type(i), output);
  }

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mean_file(i), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // repeated uint32 data_height = 9;
  for (int i = 0, n = this->data_height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->data_height(i), output);
  }

  // repeated uint32 data_width = 10;
  for (int i = 0, n = this->data_width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->data_width(i), output);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_disturb(), output);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->useflip(), output);
  }

  // repeated uint32 data_channels = 17;
  for (int i = 0, n = this->data_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->data_channels(i), output);
  }

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rand_angle(), output);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->rand_scale(), output);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->rand_movex(), output);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->rand_movey(), output);
  }

  // repeated float data_scale = 22;
  for (int i = 0, n = this->data_scale_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->data_scale(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataArbitraryParameter)
}

::google::protobuf::uint8* ImageDataArbitraryParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataArbitraryParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // repeated uint32 resize_type = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->resize_type_, target);

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataArbitraryParameter.mean_file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mean_file(i), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // repeated uint32 data_height = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->data_height_, target);

  // repeated uint32 data_width = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->data_width_, target);

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_disturb(), target);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->useflip(), target);
  }

  // repeated uint32 data_channels = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->data_channels_, target);

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rand_angle(), target);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->rand_scale(), target);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->rand_movex(), target);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->rand_movey(), target);
  }

  // repeated float data_scale = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(22, this->data_scale_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataArbitraryParameter)
  return target;
}

size_t ImageDataArbitraryParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataArbitraryParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 resize_type = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->resize_type_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->resize_type_size());
    total_size += data_size;
  }

  // repeated string mean_file = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mean_file_size());
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mean_file(i));
  }

  // repeated uint32 data_height = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_height_size());
    total_size += data_size;
  }

  // repeated uint32 data_width = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_width_size());
    total_size += data_size;
  }

  // repeated uint32 data_channels = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_channels_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_channels_size());
    total_size += data_size;
  }

  // repeated float data_scale = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->data_scale_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_scale_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool use_disturb = 14 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool useflip = 15 [default = false];
    if (has_useflip()) {
      total_size += 1 + 1;
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float rand_angle = 18 [default = 0];
    if (has_rand_angle()) {
      total_size += 2 + 4;
    }

    // optional float rand_scale = 19 [default = 0];
    if (has_rand_scale()) {
      total_size += 2 + 4;
    }

    // optional float rand_movex = 20 [default = 0];
    if (has_rand_movex()) {
      total_size += 2 + 4;
    }

    // optional float rand_movey = 21 [default = 0];
    if (has_rand_movey()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataArbitraryParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataArbitraryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataArbitraryParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataArbitraryParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataArbitraryParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataArbitraryParameter)
    MergeFrom(*source);
  }
}

void ImageDataArbitraryParameter::MergeFrom(const ImageDataArbitraryParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataArbitraryParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resize_type_.MergeFrom(from.resize_type_);
  mean_file_.MergeFrom(from.mean_file_);
  data_height_.MergeFrom(from.data_height_);
  data_width_.MergeFrom(from.data_width_);
  data_channels_.MergeFrom(from.data_channels_);
  data_scale_.MergeFrom(from.data_scale_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00000020u) {
      useflip_ = from.useflip_;
    }
    if (cached_has_bits & 0x00000040u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000080u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      rand_angle_ = from.rand_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      rand_scale_ = from.rand_scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      rand_movex_ = from.rand_movex_;
    }
    if (cached_has_bits & 0x00000800u) {
      rand_movey_ = from.rand_movey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataArbitraryParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataArbitraryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataArbitraryParameter::CopyFrom(const ImageDataArbitraryParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataArbitraryParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataArbitraryParameter::IsInitialized() const {
  return true;
}

void ImageDataArbitraryParameter::Swap(ImageDataArbitraryParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataArbitraryParameter::InternalSwap(ImageDataArbitraryParameter* other) {
  using std::swap;
  resize_type_.InternalSwap(&other->resize_type_);
  mean_file_.InternalSwap(&other->mean_file_);
  data_height_.InternalSwap(&other->data_height_);
  data_width_.InternalSwap(&other->data_width_);
  data_channels_.InternalSwap(&other->data_channels_);
  data_scale_.InternalSwap(&other->data_scale_);
  source_.Swap(&other->source_);
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(use_disturb_, other->use_disturb_);
  swap(useflip_, other->useflip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(rand_angle_, other->rand_angle_);
  swap(rand_scale_, other->rand_scale_);
  swap(rand_movex_, other->rand_movex_);
  swap(rand_movey_, other->rand_movey_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataArbitraryParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataArbitraryParameter

// optional string source = 1;
bool ImageDataArbitraryParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataArbitraryParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataArbitraryParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataArbitraryParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataArbitraryParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.source)
  return source_.GetNoArena();
}
void ImageDataArbitraryParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.source)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataArbitraryParameter.source)
}
#endif
void ImageDataArbitraryParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.source)
}
void ImageDataArbitraryParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.source)
}
::std::string* ImageDataArbitraryParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataArbitraryParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataArbitraryParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataArbitraryParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataArbitraryParameter.source)
}

// optional bool use_disturb = 14 [default = false];
bool ImageDataArbitraryParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataArbitraryParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataArbitraryParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataArbitraryParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool ImageDataArbitraryParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.use_disturb)
  return use_disturb_;
}
void ImageDataArbitraryParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
bool ImageDataArbitraryParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataArbitraryParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataArbitraryParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataArbitraryParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
bool ImageDataArbitraryParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.useflip)
  return useflip_;
}
void ImageDataArbitraryParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.useflip)
}

// optional uint32 batch_size = 4;
bool ImageDataArbitraryParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataArbitraryParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataArbitraryParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataArbitraryParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.batch_size)
  return batch_size_;
}
void ImageDataArbitraryParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataArbitraryParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataArbitraryParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataArbitraryParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_skip)
  return rand_skip_;
}
void ImageDataArbitraryParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataArbitraryParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataArbitraryParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataArbitraryParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataArbitraryParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataArbitraryParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.shuffle)
  return shuffle_;
}
void ImageDataArbitraryParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.shuffle)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataArbitraryParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataArbitraryParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataArbitraryParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataArbitraryParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.crop_size)
  return crop_size_;
}
void ImageDataArbitraryParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataArbitraryParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataArbitraryParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataArbitraryParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataArbitraryParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataArbitraryParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mirror)
  return mirror_;
}
void ImageDataArbitraryParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mirror)
}

// repeated uint32 resize_type = 2;
int ImageDataArbitraryParameter::resize_type_size() const {
  return resize_type_.size();
}
void ImageDataArbitraryParameter::clear_resize_type() {
  resize_type_.Clear();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::resize_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.resize_type)
  return resize_type_.Get(index);
}
void ImageDataArbitraryParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.resize_type)
}
void ImageDataArbitraryParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.resize_type)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::resize_type() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.resize_type)
  return resize_type_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_resize_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.resize_type)
  return &resize_type_;
}

// repeated uint32 data_height = 9;
int ImageDataArbitraryParameter::data_height_size() const {
  return data_height_.size();
}
void ImageDataArbitraryParameter::clear_data_height() {
  data_height_.Clear();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_height)
  return data_height_.Get(index);
}
void ImageDataArbitraryParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_height)
}
void ImageDataArbitraryParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.data_height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_height() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.data_height)
  return data_height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.data_height)
  return &data_height_;
}

// repeated uint32 data_width = 10;
int ImageDataArbitraryParameter::data_width_size() const {
  return data_width_.size();
}
void ImageDataArbitraryParameter::clear_data_width() {
  data_width_.Clear();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_width)
  return data_width_.Get(index);
}
void ImageDataArbitraryParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_width)
}
void ImageDataArbitraryParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.data_width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_width() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.data_width)
  return data_width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.data_width)
  return &data_width_;
}

// repeated uint32 data_channels = 17;
int ImageDataArbitraryParameter::data_channels_size() const {
  return data_channels_.size();
}
void ImageDataArbitraryParameter::clear_data_channels() {
  data_channels_.Clear();
}
::google::protobuf::uint32 ImageDataArbitraryParameter::data_channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_channels)
  return data_channels_.Get(index);
}
void ImageDataArbitraryParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_channels)
}
void ImageDataArbitraryParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.data_channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataArbitraryParameter::data_channels() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.data_channels)
  return data_channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataArbitraryParameter::mutable_data_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.data_channels)
  return &data_channels_;
}

// repeated float data_scale = 22;
int ImageDataArbitraryParameter::data_scale_size() const {
  return data_scale_.size();
}
void ImageDataArbitraryParameter::clear_data_scale() {
  data_scale_.Clear();
}
float ImageDataArbitraryParameter::data_scale(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.data_scale)
  return data_scale_.Get(index);
}
void ImageDataArbitraryParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.data_scale)
}
void ImageDataArbitraryParameter::add_data_scale(float value) {
  data_scale_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.data_scale)
}
const ::google::protobuf::RepeatedField< float >&
ImageDataArbitraryParameter::data_scale() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.data_scale)
  return data_scale_;
}
::google::protobuf::RepeatedField< float >*
ImageDataArbitraryParameter::mutable_data_scale() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.data_scale)
  return &data_scale_;
}

// repeated string mean_file = 3;
int ImageDataArbitraryParameter::mean_file_size() const {
  return mean_file_.size();
}
void ImageDataArbitraryParameter::clear_mean_file() {
  mean_file_.Clear();
}
const ::std::string& ImageDataArbitraryParameter::mean_file(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.Get(index);
}
::std::string* ImageDataArbitraryParameter::mutable_mean_file(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.Mutable(index);
}
void ImageDataArbitraryParameter::set_mean_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mean_file)
  mean_file_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ImageDataArbitraryParameter::set_mean_file(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.mean_file)
  mean_file_.Mutable(index)->assign(std::move(value));
}
#endif
void ImageDataArbitraryParameter::set_mean_file(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataArbitraryParameter.mean_file)
}
void ImageDataArbitraryParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataArbitraryParameter.mean_file)
}
::std::string* ImageDataArbitraryParameter::add_mean_file() {
  // @@protoc_insertion_point(field_add_mutable:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_.Add();
}
void ImageDataArbitraryParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.mean_file)
}
#if LANG_CXX11
void ImageDataArbitraryParameter::add_mean_file(::std::string&& value) {
  mean_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.ImageDataArbitraryParameter.mean_file)
}
#endif
void ImageDataArbitraryParameter::add_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.ImageDataArbitraryParameter.mean_file)
}
void ImageDataArbitraryParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.ImageDataArbitraryParameter.mean_file)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDataArbitraryParameter::mean_file() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataArbitraryParameter.mean_file)
  return mean_file_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDataArbitraryParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataArbitraryParameter.mean_file)
  return &mean_file_;
}

// optional float rand_angle = 18 [default = 0];
bool ImageDataArbitraryParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataArbitraryParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataArbitraryParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
float ImageDataArbitraryParameter::rand_angle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_angle)
  return rand_angle_;
}
void ImageDataArbitraryParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_angle)
}

// optional float rand_scale = 19 [default = 0];
bool ImageDataArbitraryParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataArbitraryParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataArbitraryParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
float ImageDataArbitraryParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_scale)
  return rand_scale_;
}
void ImageDataArbitraryParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_scale)
}

// optional float rand_movex = 20 [default = 0];
bool ImageDataArbitraryParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataArbitraryParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataArbitraryParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
float ImageDataArbitraryParameter::rand_movex() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_movex)
  return rand_movex_;
}
void ImageDataArbitraryParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_movex)
}

// optional float rand_movey = 21 [default = 0];
bool ImageDataArbitraryParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataArbitraryParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataArbitraryParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataArbitraryParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
float ImageDataArbitraryParameter::rand_movey() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataArbitraryParameter.rand_movey)
  return rand_movey_;
}
void ImageDataArbitraryParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataArbitraryParameter.rand_movey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataTextLabelParameter::kSourceFieldNumber;
const int ImageDataTextLabelParameter::kUseDisturbFieldNumber;
const int ImageDataTextLabelParameter::kUseflipFieldNumber;
const int ImageDataTextLabelParameter::kBatchSizeFieldNumber;
const int ImageDataTextLabelParameter::kRandSkipFieldNumber;
const int ImageDataTextLabelParameter::kShuffleFieldNumber;
const int ImageDataTextLabelParameter::kCropSizeFieldNumber;
const int ImageDataTextLabelParameter::kMirrorFieldNumber;
const int ImageDataTextLabelParameter::kMeanValueFieldNumber;
const int ImageDataTextLabelParameter::kResizeTypeFieldNumber;
const int ImageDataTextLabelParameter::kDataHeightFieldNumber;
const int ImageDataTextLabelParameter::kDataWidthFieldNumber;
const int ImageDataTextLabelParameter::kDataChannelsFieldNumber;
const int ImageDataTextLabelParameter::kDataScaleFieldNumber;
const int ImageDataTextLabelParameter::kMeanFileFieldNumber;
const int ImageDataTextLabelParameter::kTextlabeltypeFieldNumber;
const int ImageDataTextLabelParameter::kTextlabelNumPerpixelFieldNumber;
const int ImageDataTextLabelParameter::kSaveTopdataFieldNumber;
const int ImageDataTextLabelParameter::kTextlabelChannelsFieldNumber;
const int ImageDataTextLabelParameter::kTextlabelHeightFieldNumber;
const int ImageDataTextLabelParameter::kTextlabelWidthFieldNumber;
const int ImageDataTextLabelParameter::kHeatmapRadiusFieldNumber;
const int ImageDataTextLabelParameter::kRandAngleFieldNumber;
const int ImageDataTextLabelParameter::kRandScaleFieldNumber;
const int ImageDataTextLabelParameter::kRandMovexFieldNumber;
const int ImageDataTextLabelParameter::kRandMoveyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataTextLabelParameter::ImageDataTextLabelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataTextLabelParameter)
}
ImageDataTextLabelParameter::ImageDataTextLabelParameter(const ImageDataTextLabelParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      resize_type_(from.resize_type_),
      mean_file_(from.mean_file_),
      data_height_(from.data_height_),
      data_width_(from.data_width_),
      data_channels_(from.data_channels_),
      data_scale_(from.data_scale_),
      mean_value_(from.mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&textlabel_height_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(textlabel_height_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataTextLabelParameter)
}

void ImageDataTextLabelParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&textlabel_height_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(textlabel_height_));
}

ImageDataTextLabelParameter::~ImageDataTextLabelParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataTextLabelParameter)
  SharedDtor();
}

void ImageDataTextLabelParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataTextLabelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataTextLabelParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataTextLabelParameter& ImageDataTextLabelParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDataTextLabelParameter* ImageDataTextLabelParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataTextLabelParameter* n = new ImageDataTextLabelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataTextLabelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataTextLabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resize_type_.Clear();
  mean_file_.Clear();
  data_height_.Clear();
  data_width_.Clear();
  data_channels_.Clear();
  data_scale_.Clear();
  mean_value_.Clear();
  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&rand_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textlabel_channels_) -
        reinterpret_cast<char*>(&rand_angle_)) + sizeof(textlabel_channels_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&textlabel_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textlabel_height_) -
        reinterpret_cast<char*>(&textlabel_width_)) + sizeof(textlabel_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDataTextLabelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataTextLabelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataTextLabelParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 resize_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_resize_type())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_resize_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file(this->mean_file_size() - 1).data(),
            static_cast<int>(this->mean_file(this->mean_file_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataTextLabelParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_data_height())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_data_width())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_disturb = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_use_disturb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_disturb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool useflip = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_useflip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useflip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data_channels = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_data_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_angle = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_rand_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_scale = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_rand_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movex = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_rand_movex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rand_movey = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_rand_movey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rand_movey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data_scale = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181u, input, this->mutable_data_scale())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ImageDataTextLabelParameter_TextLabelType_IsValid(value)) {
            set_textlabeltype(static_cast< ::caffe::ImageDataTextLabelParameter_TextLabelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 textlabel_num_perpixel = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_textlabel_num_perpixel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textlabel_num_perpixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool save_topdata = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_save_topdata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_topdata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 textlabel_channels = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_textlabel_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textlabel_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heatmap_radius = 27 [default = 0];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_heatmap_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heatmap_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 textlabel_height = 28 [default = 0];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_textlabel_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textlabel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 textlabel_width = 29 [default = 0];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_textlabel_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &textlabel_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_value = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 245u, input, this->mutable_mean_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataTextLabelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataTextLabelParameter)
  return false;
#undef DO_
}

void ImageDataTextLabelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataTextLabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataTextLabelParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // repeated uint32 resize_type = 2;
  for (int i = 0, n = this->resize_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->resize_type(i), output);
  }

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataTextLabelParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mean_file(i), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // repeated uint32 data_height = 9;
  for (int i = 0, n = this->data_height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->data_height(i), output);
  }

  // repeated uint32 data_width = 10;
  for (int i = 0, n = this->data_width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->data_width(i), output);
  }

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_disturb(), output);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->useflip(), output);
  }

  // repeated uint32 data_channels = 17;
  for (int i = 0, n = this->data_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->data_channels(i), output);
  }

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rand_angle(), output);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->rand_scale(), output);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->rand_movex(), output);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->rand_movey(), output);
  }

  // repeated float data_scale = 22;
  for (int i = 0, n = this->data_scale_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      22, this->data_scale(i), output);
  }

  // optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->textlabeltype(), output);
  }

  // optional uint32 textlabel_num_perpixel = 24 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->textlabel_num_perpixel(), output);
  }

  // optional bool save_topdata = 25 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->save_topdata(), output);
  }

  // optional uint32 textlabel_channels = 26 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->textlabel_channels(), output);
  }

  // optional float heatmap_radius = 27 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->heatmap_radius(), output);
  }

  // optional uint32 textlabel_height = 28 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->textlabel_height(), output);
  }

  // optional uint32 textlabel_width = 29 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->textlabel_width(), output);
  }

  // repeated float mean_value = 30;
  for (int i = 0, n = this->mean_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      30, this->mean_value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataTextLabelParameter)
}

::google::protobuf::uint8* ImageDataTextLabelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataTextLabelParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataTextLabelParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // repeated uint32 resize_type = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->resize_type_, target);

  // repeated string mean_file = 3;
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file(i).data(), static_cast<int>(this->mean_file(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataTextLabelParameter.mean_file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mean_file(i), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // repeated uint32 data_height = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->data_height_, target);

  // repeated uint32 data_width = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->data_width_, target);

  // optional bool use_disturb = 14 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_disturb(), target);
  }

  // optional bool useflip = 15 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->useflip(), target);
  }

  // repeated uint32 data_channels = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->data_channels_, target);

  // optional float rand_angle = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rand_angle(), target);
  }

  // optional float rand_scale = 19 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->rand_scale(), target);
  }

  // optional float rand_movex = 20 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->rand_movex(), target);
  }

  // optional float rand_movey = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->rand_movey(), target);
  }

  // repeated float data_scale = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(22, this->data_scale_, target);

  // optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->textlabeltype(), target);
  }

  // optional uint32 textlabel_num_perpixel = 24 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->textlabel_num_perpixel(), target);
  }

  // optional bool save_topdata = 25 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->save_topdata(), target);
  }

  // optional uint32 textlabel_channels = 26 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->textlabel_channels(), target);
  }

  // optional float heatmap_radius = 27 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->heatmap_radius(), target);
  }

  // optional uint32 textlabel_height = 28 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->textlabel_height(), target);
  }

  // optional uint32 textlabel_width = 29 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->textlabel_width(), target);
  }

  // repeated float mean_value = 30;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(30, this->mean_value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataTextLabelParameter)
  return target;
}

size_t ImageDataTextLabelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataTextLabelParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 resize_type = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->resize_type_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->resize_type_size());
    total_size += data_size;
  }

  // repeated string mean_file = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mean_file_size());
  for (int i = 0, n = this->mean_file_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mean_file(i));
  }

  // repeated uint32 data_height = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_height_size());
    total_size += data_size;
  }

  // repeated uint32 data_width = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_width_size());
    total_size += data_size;
  }

  // repeated uint32 data_channels = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_channels_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_channels_size());
    total_size += data_size;
  }

  // repeated float data_scale = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->data_scale_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->data_scale_size());
    total_size += data_size;
  }

  // repeated float mean_value = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->mean_value_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mean_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool use_disturb = 14 [default = false];
    if (has_use_disturb()) {
      total_size += 1 + 1;
    }

    // optional bool useflip = 15 [default = false];
    if (has_useflip()) {
      total_size += 1 + 1;
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float rand_angle = 18 [default = 0];
    if (has_rand_angle()) {
      total_size += 2 + 4;
    }

    // optional float rand_scale = 19 [default = 0];
    if (has_rand_scale()) {
      total_size += 2 + 4;
    }

    // optional float rand_movex = 20 [default = 0];
    if (has_rand_movex()) {
      total_size += 2 + 4;
    }

    // optional float rand_movey = 21 [default = 0];
    if (has_rand_movey()) {
      total_size += 2 + 4;
    }

    // optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
    if (has_textlabeltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->textlabeltype());
    }

    // optional uint32 textlabel_num_perpixel = 24 [default = 0];
    if (has_textlabel_num_perpixel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textlabel_num_perpixel());
    }

    // optional bool save_topdata = 25 [default = false];
    if (has_save_topdata()) {
      total_size += 2 + 1;
    }

    // optional uint32 textlabel_channels = 26 [default = 0];
    if (has_textlabel_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textlabel_channels());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 textlabel_width = 29 [default = 0];
    if (has_textlabel_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textlabel_width());
    }

    // optional float heatmap_radius = 27 [default = 0];
    if (has_heatmap_radius()) {
      total_size += 2 + 4;
    }

    // optional uint32 textlabel_height = 28 [default = 0];
    if (has_textlabel_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->textlabel_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataTextLabelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataTextLabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataTextLabelParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataTextLabelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataTextLabelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataTextLabelParameter)
    MergeFrom(*source);
  }
}

void ImageDataTextLabelParameter::MergeFrom(const ImageDataTextLabelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataTextLabelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resize_type_.MergeFrom(from.resize_type_);
  mean_file_.MergeFrom(from.mean_file_);
  data_height_.MergeFrom(from.data_height_);
  data_width_.MergeFrom(from.data_width_);
  data_channels_.MergeFrom(from.data_channels_);
  data_scale_.MergeFrom(from.data_scale_);
  mean_value_.MergeFrom(from.mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_disturb_ = from.use_disturb_;
    }
    if (cached_has_bits & 0x00000020u) {
      useflip_ = from.useflip_;
    }
    if (cached_has_bits & 0x00000040u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000080u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      rand_angle_ = from.rand_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      rand_scale_ = from.rand_scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      rand_movex_ = from.rand_movex_;
    }
    if (cached_has_bits & 0x00000800u) {
      rand_movey_ = from.rand_movey_;
    }
    if (cached_has_bits & 0x00001000u) {
      textlabeltype_ = from.textlabeltype_;
    }
    if (cached_has_bits & 0x00002000u) {
      textlabel_num_perpixel_ = from.textlabel_num_perpixel_;
    }
    if (cached_has_bits & 0x00004000u) {
      save_topdata_ = from.save_topdata_;
    }
    if (cached_has_bits & 0x00008000u) {
      textlabel_channels_ = from.textlabel_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      textlabel_width_ = from.textlabel_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      heatmap_radius_ = from.heatmap_radius_;
    }
    if (cached_has_bits & 0x00040000u) {
      textlabel_height_ = from.textlabel_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataTextLabelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataTextLabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataTextLabelParameter::CopyFrom(const ImageDataTextLabelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataTextLabelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataTextLabelParameter::IsInitialized() const {
  return true;
}

void ImageDataTextLabelParameter::Swap(ImageDataTextLabelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataTextLabelParameter::InternalSwap(ImageDataTextLabelParameter* other) {
  using std::swap;
  resize_type_.InternalSwap(&other->resize_type_);
  mean_file_.InternalSwap(&other->mean_file_);
  data_height_.InternalSwap(&other->data_height_);
  data_width_.InternalSwap(&other->data_width_);
  data_channels_.InternalSwap(&other->data_channels_);
  data_scale_.InternalSwap(&other->data_scale_);
  mean_value_.InternalSwap(&other->mean_value_);
  source_.Swap(&other->source_);
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(use_disturb_, other->use_disturb_);
  swap(useflip_, other->useflip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(rand_angle_, other->rand_angle_);
  swap(rand_scale_, other->rand_scale_);
  swap(rand_movex_, other->rand_movex_);
  swap(rand_movey_, other->rand_movey_);
  swap(textlabeltype_, other->textlabeltype_);
  swap(textlabel_num_perpixel_, other->textlabel_num_perpixel_);
  swap(save_topdata_, other->save_topdata_);
  swap(textlabel_channels_, other->textlabel_channels_);
  swap(textlabel_width_, other->textlabel_width_);
  swap(heatmap_radius_, other->heatmap_radius_);
  swap(textlabel_height_, other->textlabel_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataTextLabelParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataTextLabelParameter

// optional string source = 1;
bool ImageDataTextLabelParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataTextLabelParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataTextLabelParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataTextLabelParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataTextLabelParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.source)
  return source_.GetNoArena();
}
void ImageDataTextLabelParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.source)
}
#if LANG_CXX11
void ImageDataTextLabelParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataTextLabelParameter.source)
}
#endif
void ImageDataTextLabelParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataTextLabelParameter.source)
}
void ImageDataTextLabelParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataTextLabelParameter.source)
}
::std::string* ImageDataTextLabelParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataTextLabelParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataTextLabelParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataTextLabelParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataTextLabelParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataTextLabelParameter.source)
}

// optional bool use_disturb = 14 [default = false];
bool ImageDataTextLabelParameter::has_use_disturb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataTextLabelParameter::set_has_use_disturb() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataTextLabelParameter::clear_has_use_disturb() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataTextLabelParameter::clear_use_disturb() {
  use_disturb_ = false;
  clear_has_use_disturb();
}
bool ImageDataTextLabelParameter::use_disturb() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.use_disturb)
  return use_disturb_;
}
void ImageDataTextLabelParameter::set_use_disturb(bool value) {
  set_has_use_disturb();
  use_disturb_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.use_disturb)
}

// optional bool useflip = 15 [default = false];
bool ImageDataTextLabelParameter::has_useflip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataTextLabelParameter::set_has_useflip() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataTextLabelParameter::clear_has_useflip() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataTextLabelParameter::clear_useflip() {
  useflip_ = false;
  clear_has_useflip();
}
bool ImageDataTextLabelParameter::useflip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.useflip)
  return useflip_;
}
void ImageDataTextLabelParameter::set_useflip(bool value) {
  set_has_useflip();
  useflip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.useflip)
}

// optional uint32 batch_size = 4;
bool ImageDataTextLabelParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataTextLabelParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataTextLabelParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataTextLabelParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.batch_size)
  return batch_size_;
}
void ImageDataTextLabelParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataTextLabelParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataTextLabelParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataTextLabelParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataTextLabelParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.rand_skip)
  return rand_skip_;
}
void ImageDataTextLabelParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataTextLabelParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataTextLabelParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataTextLabelParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataTextLabelParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataTextLabelParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.shuffle)
  return shuffle_;
}
void ImageDataTextLabelParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.shuffle)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataTextLabelParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataTextLabelParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataTextLabelParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataTextLabelParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.crop_size)
  return crop_size_;
}
void ImageDataTextLabelParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataTextLabelParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataTextLabelParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataTextLabelParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataTextLabelParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataTextLabelParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.mirror)
  return mirror_;
}
void ImageDataTextLabelParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.mirror)
}

// repeated float mean_value = 30;
int ImageDataTextLabelParameter::mean_value_size() const {
  return mean_value_.size();
}
void ImageDataTextLabelParameter::clear_mean_value() {
  mean_value_.Clear();
}
float ImageDataTextLabelParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.mean_value)
  return mean_value_.Get(index);
}
void ImageDataTextLabelParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.mean_value)
}
void ImageDataTextLabelParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.mean_value)
}
const ::google::protobuf::RepeatedField< float >&
ImageDataTextLabelParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.mean_value)
  return mean_value_;
}
::google::protobuf::RepeatedField< float >*
ImageDataTextLabelParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.mean_value)
  return &mean_value_;
}

// repeated uint32 resize_type = 2;
int ImageDataTextLabelParameter::resize_type_size() const {
  return resize_type_.size();
}
void ImageDataTextLabelParameter::clear_resize_type() {
  resize_type_.Clear();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::resize_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.resize_type)
  return resize_type_.Get(index);
}
void ImageDataTextLabelParameter::set_resize_type(int index, ::google::protobuf::uint32 value) {
  resize_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.resize_type)
}
void ImageDataTextLabelParameter::add_resize_type(::google::protobuf::uint32 value) {
  resize_type_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.resize_type)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::resize_type() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.resize_type)
  return resize_type_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_resize_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.resize_type)
  return &resize_type_;
}

// repeated uint32 data_height = 9;
int ImageDataTextLabelParameter::data_height_size() const {
  return data_height_.size();
}
void ImageDataTextLabelParameter::clear_data_height() {
  data_height_.Clear();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::data_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.data_height)
  return data_height_.Get(index);
}
void ImageDataTextLabelParameter::set_data_height(int index, ::google::protobuf::uint32 value) {
  data_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.data_height)
}
void ImageDataTextLabelParameter::add_data_height(::google::protobuf::uint32 value) {
  data_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.data_height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_height() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.data_height)
  return data_height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.data_height)
  return &data_height_;
}

// repeated uint32 data_width = 10;
int ImageDataTextLabelParameter::data_width_size() const {
  return data_width_.size();
}
void ImageDataTextLabelParameter::clear_data_width() {
  data_width_.Clear();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::data_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.data_width)
  return data_width_.Get(index);
}
void ImageDataTextLabelParameter::set_data_width(int index, ::google::protobuf::uint32 value) {
  data_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.data_width)
}
void ImageDataTextLabelParameter::add_data_width(::google::protobuf::uint32 value) {
  data_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.data_width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_width() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.data_width)
  return data_width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.data_width)
  return &data_width_;
}

// repeated uint32 data_channels = 17;
int ImageDataTextLabelParameter::data_channels_size() const {
  return data_channels_.size();
}
void ImageDataTextLabelParameter::clear_data_channels() {
  data_channels_.Clear();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::data_channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.data_channels)
  return data_channels_.Get(index);
}
void ImageDataTextLabelParameter::set_data_channels(int index, ::google::protobuf::uint32 value) {
  data_channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.data_channels)
}
void ImageDataTextLabelParameter::add_data_channels(::google::protobuf::uint32 value) {
  data_channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.data_channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ImageDataTextLabelParameter::data_channels() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.data_channels)
  return data_channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ImageDataTextLabelParameter::mutable_data_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.data_channels)
  return &data_channels_;
}

// repeated float data_scale = 22;
int ImageDataTextLabelParameter::data_scale_size() const {
  return data_scale_.size();
}
void ImageDataTextLabelParameter::clear_data_scale() {
  data_scale_.Clear();
}
float ImageDataTextLabelParameter::data_scale(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.data_scale)
  return data_scale_.Get(index);
}
void ImageDataTextLabelParameter::set_data_scale(int index, float value) {
  data_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.data_scale)
}
void ImageDataTextLabelParameter::add_data_scale(float value) {
  data_scale_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.data_scale)
}
const ::google::protobuf::RepeatedField< float >&
ImageDataTextLabelParameter::data_scale() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.data_scale)
  return data_scale_;
}
::google::protobuf::RepeatedField< float >*
ImageDataTextLabelParameter::mutable_data_scale() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.data_scale)
  return &data_scale_;
}

// repeated string mean_file = 3;
int ImageDataTextLabelParameter::mean_file_size() const {
  return mean_file_.size();
}
void ImageDataTextLabelParameter::clear_mean_file() {
  mean_file_.Clear();
}
const ::std::string& ImageDataTextLabelParameter::mean_file(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.mean_file)
  return mean_file_.Get(index);
}
::std::string* ImageDataTextLabelParameter::mutable_mean_file(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataTextLabelParameter.mean_file)
  return mean_file_.Mutable(index);
}
void ImageDataTextLabelParameter::set_mean_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.mean_file)
  mean_file_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ImageDataTextLabelParameter::set_mean_file(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.mean_file)
  mean_file_.Mutable(index)->assign(std::move(value));
}
#endif
void ImageDataTextLabelParameter::set_mean_file(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataTextLabelParameter.mean_file)
}
void ImageDataTextLabelParameter::set_mean_file(int index, const char* value, size_t size) {
  mean_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataTextLabelParameter.mean_file)
}
::std::string* ImageDataTextLabelParameter::add_mean_file() {
  // @@protoc_insertion_point(field_add_mutable:caffe.ImageDataTextLabelParameter.mean_file)
  return mean_file_.Add();
}
void ImageDataTextLabelParameter::add_mean_file(const ::std::string& value) {
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.mean_file)
}
#if LANG_CXX11
void ImageDataTextLabelParameter::add_mean_file(::std::string&& value) {
  mean_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.ImageDataTextLabelParameter.mean_file)
}
#endif
void ImageDataTextLabelParameter::add_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mean_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.ImageDataTextLabelParameter.mean_file)
}
void ImageDataTextLabelParameter::add_mean_file(const char* value, size_t size) {
  mean_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.ImageDataTextLabelParameter.mean_file)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDataTextLabelParameter::mean_file() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataTextLabelParameter.mean_file)
  return mean_file_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDataTextLabelParameter::mutable_mean_file() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataTextLabelParameter.mean_file)
  return &mean_file_;
}

// optional .caffe.ImageDataTextLabelParameter.TextLabelType textlabeltype = 23 [default = NONE];
bool ImageDataTextLabelParameter::has_textlabeltype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImageDataTextLabelParameter::set_has_textlabeltype() {
  _has_bits_[0] |= 0x00001000u;
}
void ImageDataTextLabelParameter::clear_has_textlabeltype() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImageDataTextLabelParameter::clear_textlabeltype() {
  textlabeltype_ = 0;
  clear_has_textlabeltype();
}
::caffe::ImageDataTextLabelParameter_TextLabelType ImageDataTextLabelParameter::textlabeltype() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.textlabeltype)
  return static_cast< ::caffe::ImageDataTextLabelParameter_TextLabelType >(textlabeltype_);
}
void ImageDataTextLabelParameter::set_textlabeltype(::caffe::ImageDataTextLabelParameter_TextLabelType value) {
  assert(::caffe::ImageDataTextLabelParameter_TextLabelType_IsValid(value));
  set_has_textlabeltype();
  textlabeltype_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.textlabeltype)
}

// optional uint32 textlabel_num_perpixel = 24 [default = 0];
bool ImageDataTextLabelParameter::has_textlabel_num_perpixel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImageDataTextLabelParameter::set_has_textlabel_num_perpixel() {
  _has_bits_[0] |= 0x00002000u;
}
void ImageDataTextLabelParameter::clear_has_textlabel_num_perpixel() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImageDataTextLabelParameter::clear_textlabel_num_perpixel() {
  textlabel_num_perpixel_ = 0u;
  clear_has_textlabel_num_perpixel();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_num_perpixel() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.textlabel_num_perpixel)
  return textlabel_num_perpixel_;
}
void ImageDataTextLabelParameter::set_textlabel_num_perpixel(::google::protobuf::uint32 value) {
  set_has_textlabel_num_perpixel();
  textlabel_num_perpixel_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.textlabel_num_perpixel)
}

// optional bool save_topdata = 25 [default = false];
bool ImageDataTextLabelParameter::has_save_topdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImageDataTextLabelParameter::set_has_save_topdata() {
  _has_bits_[0] |= 0x00004000u;
}
void ImageDataTextLabelParameter::clear_has_save_topdata() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImageDataTextLabelParameter::clear_save_topdata() {
  save_topdata_ = false;
  clear_has_save_topdata();
}
bool ImageDataTextLabelParameter::save_topdata() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.save_topdata)
  return save_topdata_;
}
void ImageDataTextLabelParameter::set_save_topdata(bool value) {
  set_has_save_topdata();
  save_topdata_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.save_topdata)
}

// optional uint32 textlabel_channels = 26 [default = 0];
bool ImageDataTextLabelParameter::has_textlabel_channels() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImageDataTextLabelParameter::set_has_textlabel_channels() {
  _has_bits_[0] |= 0x00008000u;
}
void ImageDataTextLabelParameter::clear_has_textlabel_channels() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImageDataTextLabelParameter::clear_textlabel_channels() {
  textlabel_channels_ = 0u;
  clear_has_textlabel_channels();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_channels() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.textlabel_channels)
  return textlabel_channels_;
}
void ImageDataTextLabelParameter::set_textlabel_channels(::google::protobuf::uint32 value) {
  set_has_textlabel_channels();
  textlabel_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.textlabel_channels)
}

// optional uint32 textlabel_height = 28 [default = 0];
bool ImageDataTextLabelParameter::has_textlabel_height() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ImageDataTextLabelParameter::set_has_textlabel_height() {
  _has_bits_[0] |= 0x00040000u;
}
void ImageDataTextLabelParameter::clear_has_textlabel_height() {
  _has_bits_[0] &= ~0x00040000u;
}
void ImageDataTextLabelParameter::clear_textlabel_height() {
  textlabel_height_ = 0u;
  clear_has_textlabel_height();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.textlabel_height)
  return textlabel_height_;
}
void ImageDataTextLabelParameter::set_textlabel_height(::google::protobuf::uint32 value) {
  set_has_textlabel_height();
  textlabel_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.textlabel_height)
}

// optional uint32 textlabel_width = 29 [default = 0];
bool ImageDataTextLabelParameter::has_textlabel_width() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImageDataTextLabelParameter::set_has_textlabel_width() {
  _has_bits_[0] |= 0x00010000u;
}
void ImageDataTextLabelParameter::clear_has_textlabel_width() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImageDataTextLabelParameter::clear_textlabel_width() {
  textlabel_width_ = 0u;
  clear_has_textlabel_width();
}
::google::protobuf::uint32 ImageDataTextLabelParameter::textlabel_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.textlabel_width)
  return textlabel_width_;
}
void ImageDataTextLabelParameter::set_textlabel_width(::google::protobuf::uint32 value) {
  set_has_textlabel_width();
  textlabel_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.textlabel_width)
}

// optional float heatmap_radius = 27 [default = 0];
bool ImageDataTextLabelParameter::has_heatmap_radius() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ImageDataTextLabelParameter::set_has_heatmap_radius() {
  _has_bits_[0] |= 0x00020000u;
}
void ImageDataTextLabelParameter::clear_has_heatmap_radius() {
  _has_bits_[0] &= ~0x00020000u;
}
void ImageDataTextLabelParameter::clear_heatmap_radius() {
  heatmap_radius_ = 0;
  clear_has_heatmap_radius();
}
float ImageDataTextLabelParameter::heatmap_radius() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.heatmap_radius)
  return heatmap_radius_;
}
void ImageDataTextLabelParameter::set_heatmap_radius(float value) {
  set_has_heatmap_radius();
  heatmap_radius_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.heatmap_radius)
}

// optional float rand_angle = 18 [default = 0];
bool ImageDataTextLabelParameter::has_rand_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataTextLabelParameter::set_has_rand_angle() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataTextLabelParameter::clear_has_rand_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataTextLabelParameter::clear_rand_angle() {
  rand_angle_ = 0;
  clear_has_rand_angle();
}
float ImageDataTextLabelParameter::rand_angle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.rand_angle)
  return rand_angle_;
}
void ImageDataTextLabelParameter::set_rand_angle(float value) {
  set_has_rand_angle();
  rand_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.rand_angle)
}

// optional float rand_scale = 19 [default = 0];
bool ImageDataTextLabelParameter::has_rand_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataTextLabelParameter::set_has_rand_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataTextLabelParameter::clear_has_rand_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataTextLabelParameter::clear_rand_scale() {
  rand_scale_ = 0;
  clear_has_rand_scale();
}
float ImageDataTextLabelParameter::rand_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.rand_scale)
  return rand_scale_;
}
void ImageDataTextLabelParameter::set_rand_scale(float value) {
  set_has_rand_scale();
  rand_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.rand_scale)
}

// optional float rand_movex = 20 [default = 0];
bool ImageDataTextLabelParameter::has_rand_movex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataTextLabelParameter::set_has_rand_movex() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataTextLabelParameter::clear_has_rand_movex() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataTextLabelParameter::clear_rand_movex() {
  rand_movex_ = 0;
  clear_has_rand_movex();
}
float ImageDataTextLabelParameter::rand_movex() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.rand_movex)
  return rand_movex_;
}
void ImageDataTextLabelParameter::set_rand_movex(float value) {
  set_has_rand_movex();
  rand_movex_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.rand_movex)
}

// optional float rand_movey = 21 [default = 0];
bool ImageDataTextLabelParameter::has_rand_movey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataTextLabelParameter::set_has_rand_movey() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataTextLabelParameter::clear_has_rand_movey() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataTextLabelParameter::clear_rand_movey() {
  rand_movey_ = 0;
  clear_has_rand_movey();
}
float ImageDataTextLabelParameter::rand_movey() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataTextLabelParameter.rand_movey)
  return rand_movey_;
}
void ImageDataTextLabelParameter::set_rand_movey(float value) {
  set_has_rand_movey();
  rand_movey_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataTextLabelParameter.rand_movey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationParameter::kScaleFieldNumber;
const int TransformationParameter::kMirrorFieldNumber;
const int TransformationParameter::kCropSizeFieldNumber;
const int TransformationParameter::kMeanFileFieldNumber;
const int TransformationParameter::kMeanValueFieldNumber;
const int TransformationParameter::kForceColorFieldNumber;
const int TransformationParameter::kForceGrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationParameter::TransformationParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mean_value_(from.mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&crop_size_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  _cached_size_ = 0;
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_gray_) -
      reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
  scale_ = 1;
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:caffe.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransformationParameter& TransformationParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransformationParameter* TransformationParameter::New(::google::protobuf::Arena* arena) const {
  TransformationParameter* n = new TransformationParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TransformationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_value_.Clear();
  if (has_mean_file()) {
    GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*mean_file_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_gray_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(force_gray_));
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransformationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TransformationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), static_cast<int>(this->mean_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.TransformationParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mean_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_mean_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mean_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_color = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_force_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_gray = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_force_gray();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_gray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TransformationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TransformationParameter)
  return false;
#undef DO_
}

void TransformationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TransformationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mirror(), output);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crop_size(), output);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mean_file(), output);
  }

  // repeated float mean_value = 5;
  for (int i = 0, n = this->mean_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->mean_value(i), output);
  }

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_color(), output);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force_gray(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TransformationParameter)
}

::google::protobuf::uint8* TransformationParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TransformationParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->crop_size(), target);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.TransformationParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mean_file(), target);
  }

  // repeated float mean_value = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->mean_value_, target);

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force_gray(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TransformationParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float mean_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mean_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mean_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string mean_file = 4;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 2 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool force_color = 6 [default = false];
    if (has_force_color()) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (has_force_gray()) {
      total_size += 1 + 1;
    }

    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransformationParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TransformationParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TransformationParameter)
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_value_.MergeFrom(from.mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000008u) {
      force_color_ = from.force_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_gray_ = from.force_gray_;
    }
    if (cached_has_bits & 0x00000020u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransformationParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
  return true;
}

void TransformationParameter::Swap(TransformationParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationParameter::InternalSwap(TransformationParameter* other) {
  using std::swap;
  mean_value_.InternalSwap(&other->mean_value_);
  mean_file_.Swap(&other->mean_file_);
  swap(crop_size_, other->crop_size_);
  swap(mirror_, other->mirror_);
  swap(force_color_, other->force_color_);
  swap(force_gray_, other->force_gray_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransformationParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformationParameter

// optional float scale = 1 [default = 1];
bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000004u;
}
void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000002u;
}
void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena();
}
void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
#if LANG_CXX11
void TransformationParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TransformationParameter.mean_file)
}
#endif
void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000008u;
}
void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000010u;
}
void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LossParameter::kIgnoreLabelFieldNumber;
const int LossParameter::kNormalizationFieldNumber;
const int LossParameter::kNormalizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LossParameter::LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalization_) -
    reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalization_));
  // @@protoc_insertion_point(copy_constructor:caffe.LossParameter)
}

void LossParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ignore_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_) -
      reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
  normalization_ = 1;
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LossParameter& LossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LossParameter* LossParameter::New(::google::protobuf::Arena* arena) const {
  LossParameter* n = new LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ignore_label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalize_) -
        reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
    normalization_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ignore_label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LossParameter_NormalizationMode_IsValid(value)) {
            set_normalization(static_cast< ::caffe::LossParameter_NormalizationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LossParameter)
  return false;
#undef DO_
}

void LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ignore_label(), output);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->normalize(), output);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->normalization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LossParameter)
}

::google::protobuf::uint8* LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->normalize(), target);
  }

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->normalization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 1;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional bool normalize = 2;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

    // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (has_normalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalization());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LossParameter)
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_ = from.normalize_;
    }
    if (cached_has_bits & 0x00000004u) {
      normalization_ = from.normalization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  return true;
}

void LossParameter::Swap(LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LossParameter::InternalSwap(LossParameter* other) {
  using std::swap;
  swap(ignore_label_, other->ignore_label_);
  swap(normalize_, other->normalize_);
  swap(normalization_, other->normalization_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LossParameter

// optional int32 ignore_label = 1;
bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000004u;
}
void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000004u;
}
void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccuracyParameter::kTopKFieldNumber;
const int AccuracyParameter::kAxisFieldNumber;
const int AccuracyParameter::kIgnoreLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccuracyParameter::AccuracyParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&ignore_label_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  _cached_size_ = 0;
  ignore_label_ = 0;
  top_k_ = 1u;
  axis_ = 1;
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:caffe.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccuracyParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccuracyParameter& AccuracyParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccuracyParameter* AccuracyParameter::New(::google::protobuf::Arena* arena) const {
  AccuracyParameter* n = new AccuracyParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.AccuracyParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ignore_label_ = 0;
    top_k_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccuracyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.AccuracyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 top_k = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ignore_label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ignore_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.AccuracyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.AccuracyParameter)
  return false;
#undef DO_
}

void AccuracyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.AccuracyParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_k(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ignore_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.AccuracyParameter)
}

::google::protobuf::uint8* AccuracyParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.AccuracyParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ignore_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.AccuracyParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ignore_label = 3;
    if (has_ignore_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccuracyParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccuracyParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.AccuracyParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.AccuracyParameter)
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccuracyParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
  return true;
}

void AccuracyParameter::Swap(AccuracyParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  using std::swap;
  swap(ignore_label_, other->ignore_label_);
  swap(top_k_, other->top_k_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccuracyParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgMaxParameter::kOutMaxValFieldNumber;
const int ArgMaxParameter::kTopKFieldNumber;
const int ArgMaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgMaxParameter::ArgMaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ArgMaxParameter)
}
ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_max_val_, &from.out_max_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&out_max_val_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:caffe.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&out_max_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_) -
      reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
  top_k_ = 1u;
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
}

void ArgMaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgMaxParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArgMaxParameter& ArgMaxParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArgMaxParameter* ArgMaxParameter::New(::google::protobuf::Arena* arena) const {
  ArgMaxParameter* n = new ArgMaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ArgMaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&out_max_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axis_) -
        reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
    top_k_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArgMaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ArgMaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool out_max_val = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_out_max_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_max_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top_k = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_top_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ArgMaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ArgMaxParameter)
  return false;
#undef DO_
}

void ArgMaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ArgMaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->out_max_val(), output);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_k(), output);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ArgMaxParameter)
}

::google::protobuf::uint8* ArgMaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ArgMaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_k(), target);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ArgMaxParameter)
  return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ArgMaxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool out_max_val = 1 [default = false];
    if (has_out_max_val()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 3;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional uint32 top_k = 2 [default = 1];
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ArgMaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgMaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ArgMaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ArgMaxParameter)
    MergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      out_max_val_ = from.out_max_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArgMaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {
  return true;
}

void ArgMaxParameter::Swap(ArgMaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  using std::swap;
  swap(out_max_val_, other->out_max_val_);
  swap(axis_, other->axis_);
  swap(top_k_, other->top_k_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgMaxParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatParameter::kAxisFieldNumber;
const int ConcatParameter::kConcatDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatParameter::ConcatParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&concat_dim_, &from.concat_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&concat_dim_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  _cached_size_ = 0;
  concat_dim_ = 1u;
  axis_ = 1;
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConcatParameter& ConcatParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConcatParameter* ConcatParameter::New(::google::protobuf::Arena* arena) const {
  ConcatParameter* n = new ConcatParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConcatParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    concat_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConcatParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConcatParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConcatParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConcatParameter)
  return false;
#undef DO_
}

void ConcatParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConcatParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->concat_dim(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConcatParameter)
}

::google::protobuf::uint8* ConcatParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConcatParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConcatParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (has_concat_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConcatParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConcatParameter)
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConcatParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  return true;
}

void ConcatParameter::Swap(ConcatParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatParameter::InternalSwap(ConcatParameter* other) {
  using std::swap;
  swap(concat_dim_, other->concat_dim_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConcatParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConcatParameter

// optional int32 axis = 2 [default = 1];
bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchNormParameter::kUseGlobalStatsFieldNumber;
const int BatchNormParameter::kMovingAverageFractionFieldNumber;
const int BatchNormParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchNormParameter::BatchNormParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_global_stats_, &from.use_global_stats_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&use_global_stats_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  _cached_size_ = 0;
  use_global_stats_ = false;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:caffe.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
}

void BatchNormParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchNormParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchNormParameter& BatchNormParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchNormParameter* BatchNormParameter::New(::google::protobuf::Arena* arena) const {
  BatchNormParameter* n = new BatchNormParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BatchNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    use_global_stats_ = false;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchNormParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BatchNormParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_global_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_global_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_global_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_moving_average_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moving_average_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-05];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BatchNormParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BatchNormParameter)
  return false;
#undef DO_
}

void BatchNormParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BatchNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_global_stats(), output);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->moving_average_fraction(), output);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BatchNormParameter)
}

::google::protobuf::uint8* BatchNormParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BatchNormParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BatchNormParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool use_global_stats = 1;
    if (has_use_global_stats()) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (has_moving_average_fraction()) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchNormParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BatchNormParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BatchNormParameter)
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      use_global_stats_ = from.use_global_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      moving_average_fraction_ = from.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNormParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
  return true;
}

void BatchNormParameter::Swap(BatchNormParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  using std::swap;
  swap(use_global_stats_, other->use_global_stats_);
  swap(moving_average_fraction_, other->moving_average_fraction_);
  swap(eps_, other->eps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchNormParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchNormParameter

// optional bool use_global_stats = 1;
bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BiasParameter::kAxisFieldNumber;
const int BiasParameter::kNumAxesFieldNumber;
const int BiasParameter::kFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BiasParameter::BiasParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.BiasParameter)
}
BiasParameter::BiasParameter(const BiasParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.BiasParameter)
}

void BiasParameter::SharedCtor() {
  _cached_size_ = 0;
  filler_ = NULL;
  axis_ = 1;
  num_axes_ = 1;
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:caffe.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
}

void BiasParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiasParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BiasParameter& BiasParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

BiasParameter* BiasParameter::New(::google::protobuf::Arena* arena) const {
  BiasParameter* n = new BiasParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.BiasParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != NULL);
      filler_->::caffe::FillerParameter::Clear();
    }
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BiasParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.BiasParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.BiasParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.BiasParameter)
  return false;
#undef DO_
}

void BiasParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.BiasParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.BiasParameter)
}

::google::protobuf::uint8* BiasParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.BiasParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.BiasParameter)
  return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.BiasParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiasParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BiasParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.BiasParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.BiasParameter)
    MergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiasParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {
  return true;
}

void BiasParameter::Swap(BiasParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BiasParameter::InternalSwap(BiasParameter* other) {
  using std::swap;
  swap(filler_, other->filler_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BiasParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BiasParameter

// optional int32 axis = 1 [default = 1];
bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& BiasParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContrastiveLossParameter::kMarginFieldNumber;
const int ContrastiveLossParameter::kLegacyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ContrastiveLossParameter)
}
ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&legacy_version_, &from.legacy_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&legacy_version_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:caffe.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  _cached_size_ = 0;
  legacy_version_ = false;
  margin_ = 1;
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContrastiveLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContrastiveLossParameter* ContrastiveLossParameter::New(::google::protobuf::Arena* arena) const {
  ContrastiveLossParameter* n = new ContrastiveLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ContrastiveLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    legacy_version_ = false;
    margin_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContrastiveLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ContrastiveLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_version = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_legacy_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ContrastiveLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ContrastiveLossParameter)
  return false;
#undef DO_
}

void ContrastiveLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ContrastiveLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->legacy_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ContrastiveLossParameter)
}

::google::protobuf::uint8* ContrastiveLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ContrastiveLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->legacy_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ContrastiveLossParameter)
  return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ContrastiveLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool legacy_version = 2 [default = false];
    if (has_legacy_version()) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (has_margin()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContrastiveLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContrastiveLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ContrastiveLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ContrastiveLossParameter)
    MergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_version_ = from.legacy_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContrastiveLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {
  return true;
}

void ContrastiveLossParameter::Swap(ContrastiveLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  using std::swap;
  swap(legacy_version_, other->legacy_version_);
  swap(margin_, other->margin_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContrastiveLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuberLossParameter::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuberLossParameter::HuberLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HuberLossParameter)
}
HuberLossParameter::HuberLossParameter(const HuberLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_ = from.delta_;
  // @@protoc_insertion_point(copy_constructor:caffe.HuberLossParameter)
}

void HuberLossParameter::SharedCtor() {
  _cached_size_ = 0;
  delta_ = 0.1f;
}

HuberLossParameter::~HuberLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HuberLossParameter)
  SharedDtor();
}

void HuberLossParameter::SharedDtor() {
}

void HuberLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuberLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuberLossParameter& HuberLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuberLossParameter* HuberLossParameter::New(::google::protobuf::Arena* arena) const {
  HuberLossParameter* n = new HuberLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuberLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HuberLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_ = 0.1f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HuberLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HuberLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delta = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HuberLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HuberLossParameter)
  return false;
#undef DO_
}

void HuberLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HuberLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delta = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HuberLossParameter)
}

::google::protobuf::uint8* HuberLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HuberLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delta = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HuberLossParameter)
  return target;
}

size_t HuberLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HuberLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float delta = 1 [default = 0.1];
  if (has_delta()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuberLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HuberLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HuberLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuberLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HuberLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HuberLossParameter)
    MergeFrom(*source);
  }
}

void HuberLossParameter::MergeFrom(const HuberLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HuberLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delta()) {
    set_delta(from.delta());
  }
}

void HuberLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HuberLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuberLossParameter::CopyFrom(const HuberLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HuberLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuberLossParameter::IsInitialized() const {
  return true;
}

void HuberLossParameter::Swap(HuberLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuberLossParameter::InternalSwap(HuberLossParameter* other) {
  using std::swap;
  swap(delta_, other->delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuberLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuberLossParameter

// optional float delta = 1 [default = 0.1];
bool HuberLossParameter::has_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HuberLossParameter::set_has_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void HuberLossParameter::clear_has_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void HuberLossParameter::clear_delta() {
  delta_ = 0.1f;
  clear_has_delta();
}
float HuberLossParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.HuberLossParameter.delta)
  return delta_;
}
void HuberLossParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.HuberLossParameter.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionParameter::kNumOutputFieldNumber;
const int ConvolutionParameter::kBiasTermFieldNumber;
const int ConvolutionParameter::kPadFieldNumber;
const int ConvolutionParameter::kKernelSizeFieldNumber;
const int ConvolutionParameter::kStrideFieldNumber;
const int ConvolutionParameter::kDilationFieldNumber;
const int ConvolutionParameter::kPadHFieldNumber;
const int ConvolutionParameter::kPadWFieldNumber;
const int ConvolutionParameter::kKernelHFieldNumber;
const int ConvolutionParameter::kKernelWFieldNumber;
const int ConvolutionParameter::kStrideHFieldNumber;
const int ConvolutionParameter::kStrideWFieldNumber;
const int ConvolutionParameter::kGroupFieldNumber;
const int ConvolutionParameter::kWeightFillerFieldNumber;
const int ConvolutionParameter::kBiasFillerFieldNumber;
const int ConvolutionParameter::kEngineFieldNumber;
const int ConvolutionParameter::kAxisFieldNumber;
const int ConvolutionParameter::kForceNdIm2ColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pad_(from.pad_),
      kernel_size_(from.kernel_size_),
      stride_(from.stride_),
      dilation_(from.dilation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:caffe.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_nd_im2col_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(force_nd_im2col_));
  axis_ = 1;
  bias_term_ = true;
  group_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_h_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(stride_h_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&stride_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_nd_im2col_) -
        reinterpret_cast<char*>(&stride_w_)) + sizeof(force_nd_im2col_));
    axis_ = 1;
    bias_term_ = true;
    group_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_pad())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pad())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 kernel_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_kernel_size())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kernel_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stride = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_stride())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ConvolutionParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ConvolutionParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 16 [default = 1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_nd_im2col = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_force_nd_im2col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_nd_im2col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 dilation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_dilation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dilation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->pad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pad(i), output);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0, n = this->kernel_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->kernel_size(i), output);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated uint32 stride = 6;
  for (int i = 0, n = this->stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->stride(i), output);
  }

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bias_filler_, output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->stride_h(), output);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->stride_w(), output);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->engine(), output);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->axis(), output);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->force_nd_im2col(), output);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0, n = this->dilation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->dilation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ConvolutionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // repeated uint32 pad = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->pad_, target);

  // repeated uint32 kernel_size = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->kernel_size_, target);

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated uint32 stride = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->stride_, target);

  // optional .caffe.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->stride_w(), target);
  }

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->dilation_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ConvolutionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 pad = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pad_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->kernel_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dilation_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->dilation_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.FillerParameter weight_filler = 7;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 8;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional uint32 kernel_h = 11;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 stride_w = 14;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (has_force_nd_im2col()) {
      total_size += 2 + 1;
    }

    // optional int32 axis = 16 [default = 1];
    if (has_axis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      stride_h_ = from.stride_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_nd_im2col_ = from.force_nd_im2col_;
    }
    if (cached_has_bits & 0x00000800u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00001000u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_ = from.group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  using std::swap;
  pad_.InternalSwap(&other->pad_);
  kernel_size_.InternalSwap(&other->kernel_size_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(pad_h_, other->pad_h_);
  swap(pad_w_, other->pad_w_);
  swap(kernel_h_, other->kernel_h_);
  swap(kernel_w_, other->kernel_w_);
  swap(stride_h_, other->stride_h_);
  swap(stride_w_, other->stride_w_);
  swap(engine_, other->engine_);
  swap(force_nd_im2col_, other->force_nd_im2col_);
  swap(axis_, other->axis_);
  swap(bias_term_, other->bias_term_);
  swap(group_, other->group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

// optional uint32 num_output = 1;
bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00001000u;
}
void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00002000u;
}
void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CropParameter::kAxisFieldNumber;
const int CropParameter::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CropParameter::CropParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.CropParameter)
}
CropParameter::CropParameter(const CropParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      offset_(from.offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  axis_ = from.axis_;
  // @@protoc_insertion_point(copy_constructor:caffe.CropParameter)
}

void CropParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 2;
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:caffe.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
}

void CropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CropParameter& CropParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

CropParameter* CropParameter::New(::google::protobuf::Arena* arena) const {
  CropParameter* n = new CropParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.CropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.Clear();
  axis_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.CropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.CropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.CropParameter)
  return false;
#undef DO_
}

void CropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.CropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // repeated uint32 offset = 2;
  for (int i = 0, n = this->offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->offset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.CropParameter)
}

::google::protobuf::uint8* CropParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.CropParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // repeated uint32 offset = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->offset_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.CropParameter)
  return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.CropParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 offset = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->offset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->offset_size());
    total_size += data_size;
  }

  // optional int32 axis = 1 [default = 2];
  if (has_axis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->axis());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CropParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CropParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.CropParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.CropParameter)
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offset_.MergeFrom(from.offset_);
  if (from.has_axis()) {
    set_axis(from.axis());
  }
}

void CropParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
  return true;
}

void CropParameter::Swap(CropParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CropParameter::InternalSwap(CropParameter* other) {
  using std::swap;
  offset_.InternalSwap(&other->offset_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CropParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CropParameter

// optional int32 axis = 1 [default = 2];
bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
int CropParameter::offset_size() const {
  return offset_.size();
}
void CropParameter::clear_offset() {
  offset_.Clear();
}
::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataParameter::kSourceFieldNumber;
const int DataParameter::kBatchSizeFieldNumber;
const int DataParameter::kRandSkipFieldNumber;
const int DataParameter::kBackendFieldNumber;
const int DataParameter::kScaleFieldNumber;
const int DataParameter::kMeanFileFieldNumber;
const int DataParameter::kCropSizeFieldNumber;
const int DataParameter::kMirrorFieldNumber;
const int DataParameter::kForceEncodedColorFieldNumber;
const int DataParameter::kPrefetchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataParameter::DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefetch_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(prefetch_));
  // @@protoc_insertion_point(copy_constructor:caffe.DataParameter)
}

void DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backend_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
  scale_ = 1;
  prefetch_ = 4u;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataParameter& DataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataParameter* DataParameter::New(::google::protobuf::Arena* arena) const {
  DataParameter* n = new DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backend_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
  }
  if (cached_has_bits & 768u) {
    scale_ = 1;
    prefetch_ = 4u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), static_cast<int>(this->mean_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.DataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::DataParameter_DB_IsValid(value)) {
            set_backend(static_cast< ::caffe::DataParameter_DB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_encoded_color = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_force_encoded_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_encoded_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prefetch = 10 [default = 4];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_prefetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backend(), output);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->force_encoded_color(), output);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prefetch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DataParameter)
}

::google::protobuf::uint8* DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.DataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prefetch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool force_encoded_color = 9 [default = false];
    if (has_force_encoded_color()) {
      total_size += 1 + 1;
    }

    // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
    if (has_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backend());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (has_prefetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      force_encoded_color_ = from.force_encoded_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      backend_ = from.backend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      prefetch_ = from.prefetch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataParameter::InternalSwap(DataParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(mirror_, other->mirror_);
  swap(force_encoded_color_, other->force_encoded_color_);
  swap(backend_, other->backend_);
  swap(scale_, other->scale_);
  swap(prefetch_, other->prefetch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataParameter

// optional string source = 1;
bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena();
}
void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
#if LANG_CXX11
void DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
#endif
void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000080u;
}
void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
#if LANG_CXX11
void DataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
#endif
void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000040u;
}
void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropoutParameter::kDropoutRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropoutParameter::DropoutParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ratio_ = from.dropout_ratio_;
  // @@protoc_insertion_point(copy_constructor:caffe.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  _cached_size_ = 0;
  dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:caffe.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropoutParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropoutParameter& DropoutParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropoutParameter* DropoutParameter::New(::google::protobuf::Arena* arena) const {
  DropoutParameter* n = new DropoutParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DropoutParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dropout_ratio_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DropoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DropoutParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DropoutParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DropoutParameter)
  return false;
#undef DO_
}

void DropoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DropoutParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dropout_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DropoutParameter)
}

::google::protobuf::uint8* DropoutParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DropoutParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dropout_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DropoutParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float dropout_ratio = 1 [default = 0.5];
  if (has_dropout_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropoutParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropoutParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DropoutParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DropoutParameter)
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dropout_ratio()) {
    set_dropout_ratio(from.dropout_ratio());
  }
}

void DropoutParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  return true;
}

void DropoutParameter::Swap(DropoutParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropoutParameter::InternalSwap(DropoutParameter* other) {
  using std::swap;
  swap(dropout_ratio_, other->dropout_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropoutParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DummyDataParameter::kDataFillerFieldNumber;
const int DummyDataParameter::kShapeFieldNumber;
const int DummyDataParameter::kNumFieldNumber;
const int DummyDataParameter::kChannelsFieldNumber;
const int DummyDataParameter::kHeightFieldNumber;
const int DummyDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DummyDataParameter::DummyDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DummyDataParameter)
}
DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_filler_(from.data_filler_),
      num_(from.num_),
      channels_(from.channels_),
      height_(from.height_),
      width_(from.width_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  _cached_size_ = 0;
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
}

void DummyDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DummyDataParameter& DummyDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DummyDataParameter* DummyDataParameter::New(::google::protobuf::Arena* arena) const {
  DummyDataParameter* n = new DummyDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DummyDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_filler_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DummyDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DummyDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.FillerParameter data_filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_num())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_height())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_height())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_width())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_width())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobShape shape = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DummyDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DummyDataParameter)
  return false;
#undef DO_
}

void DummyDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DummyDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_filler_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_filler(static_cast<int>(i)), output);
  }

  // repeated uint32 num = 2;
  for (int i = 0, n = this->num_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->num(i), output);
  }

  // repeated uint32 channels = 3;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->channels(i), output);
  }

  // repeated uint32 height = 4;
  for (int i = 0, n = this->height_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->height(i), output);
  }

  // repeated uint32 width = 5;
  for (int i = 0, n = this->width_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->width(i), output);
  }

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shape(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DummyDataParameter)
}

::google::protobuf::uint8* DummyDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DummyDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.FillerParameter data_filler = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_filler_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_filler(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 num = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->num_, target);

  // repeated uint32 channels = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->channels_, target);

  // repeated uint32 height = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->height_, target);

  // repeated uint32 width = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->width_, target);

  // repeated .caffe.BlobShape shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->shape(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DummyDataParameter)
  return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DummyDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.FillerParameter data_filler = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_filler_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_filler(static_cast<int>(i)));
    }
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channels_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->channels_size());
    total_size += data_size;
  }

  // repeated uint32 height = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->height_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->height_size());
    total_size += data_size;
  }

  // repeated uint32 width = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->width_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->width_size());
    total_size += data_size;
  }

  // repeated .caffe.BlobShape shape = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DummyDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DummyDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DummyDataParameter)
    MergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_filler_.MergeFrom(from.data_filler_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  shape_.MergeFrom(from.shape_);
}

void DummyDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {
  return true;
}

void DummyDataParameter::Swap(DummyDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  using std::swap;
  data_filler_.InternalSwap(&other->data_filler_);
  num_.InternalSwap(&other->num_);
  channels_.InternalSwap(&other->channels_);
  height_.InternalSwap(&other->height_);
  width_.InternalSwap(&other->width_);
  shape_.InternalSwap(&other->shape_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DummyDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
int DummyDataParameter::shape_size() const {
  return shape_.size();
}
void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
int DummyDataParameter::num_size() const {
  return num_.size();
}
void DummyDataParameter::clear_num() {
  num_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
int DummyDataParameter::channels_size() const {
  return channels_.size();
}
void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
int DummyDataParameter::height_size() const {
  return height_.size();
}
void DummyDataParameter::clear_height() {
  height_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
int DummyDataParameter::width_size() const {
  return width_.size();
}
void DummyDataParameter::clear_width() {
  width_.Clear();
}
::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EltwiseParameter::kOperationFieldNumber;
const int EltwiseParameter::kCoeffFieldNumber;
const int EltwiseParameter::kStableProdGradFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EltwiseParameter::EltwiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      coeff_(from.coeff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&stable_prod_grad_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(stable_prod_grad_));
  // @@protoc_insertion_point(copy_constructor:caffe.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:caffe.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
}

void EltwiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EltwiseParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EltwiseParameter& EltwiseParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

EltwiseParameter* EltwiseParameter::New(::google::protobuf::Arena* arena) const {
  EltwiseParameter* n = new EltwiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EltwiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coeff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EltwiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EltwiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::EltwiseParameter_EltwiseOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::EltwiseParameter_EltwiseOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float coeff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_coeff())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stable_prod_grad = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stable_prod_grad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_prod_grad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EltwiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EltwiseParameter)
  return false;
#undef DO_
}

void EltwiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EltwiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated float coeff = 2;
  for (int i = 0, n = this->coeff_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->coeff(i), output);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stable_prod_grad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EltwiseParameter)
}

::google::protobuf::uint8* EltwiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EltwiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // repeated float coeff = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->coeff_, target);

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->stable_prod_grad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EltwiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float coeff = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->coeff_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->coeff_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (has_stable_prod_grad()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EltwiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EltwiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EltwiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EltwiseParameter)
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coeff_.MergeFrom(from.coeff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      stable_prod_grad_ = from.stable_prod_grad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EltwiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
  return true;
}

void EltwiseParameter::Swap(EltwiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  using std::swap;
  coeff_.InternalSwap(&other->coeff_);
  swap(operation_, other->operation_);
  swap(stable_prod_grad_, other->stable_prod_grad_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EltwiseParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ELUParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ELUParameter::ELUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ELUParameter)
}
ELUParameter::ELUParameter(const ELUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:caffe.ELUParameter)
}

void ELUParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
}

void ELUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ELUParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ELUParameter& ELUParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ELUParameter* ELUParameter::New(::google::protobuf::Arena* arena) const {
  ELUParameter* n = new ELUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ELUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ELUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ELUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ELUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ELUParameter)
  return false;
#undef DO_
}

void ELUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ELUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ELUParameter)
}

::google::protobuf::uint8* ELUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ELUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ELUParameter)
  return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ELUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ELUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ELUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ELUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ELUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ELUParameter)
    MergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alpha()) {
    set_alpha(from.alpha());
  }
}

void ELUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {
  return true;
}

void ELUParameter::Swap(ELUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ELUParameter::InternalSwap(ELUParameter* other) {
  using std::swap;
  swap(alpha_, other->alpha_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ELUParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ELUParameter

// optional float alpha = 1 [default = 1];
bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DivideParameter::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DivideParameter::DivideParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.DivideParameter)
}
DivideParameter::DivideParameter(const DivideParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:caffe.DivideParameter)
}

void DivideParameter::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 1;
}

DivideParameter::~DivideParameter() {
  // @@protoc_insertion_point(destructor:caffe.DivideParameter)
  SharedDtor();
}

void DivideParameter::SharedDtor() {
}

void DivideParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivideParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DivideParameter& DivideParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DivideParameter* DivideParameter::New(::google::protobuf::Arena* arena) const {
  DivideParameter* n = new DivideParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DivideParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.DivideParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DivideParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.DivideParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.DivideParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.DivideParameter)
  return false;
#undef DO_
}

void DivideParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.DivideParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.DivideParameter)
}

::google::protobuf::uint8* DivideParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.DivideParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.DivideParameter)
  return target;
}

size_t DivideParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.DivideParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float alpha = 1 [default = 1];
  if (has_alpha()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivideParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.DivideParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DivideParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DivideParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.DivideParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.DivideParameter)
    MergeFrom(*source);
  }
}

void DivideParameter::MergeFrom(const DivideParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.DivideParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alpha()) {
    set_alpha(from.alpha());
  }
}

void DivideParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.DivideParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivideParameter::CopyFrom(const DivideParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.DivideParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivideParameter::IsInitialized() const {
  return true;
}

void DivideParameter::Swap(DivideParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DivideParameter::InternalSwap(DivideParameter* other) {
  using std::swap;
  swap(alpha_, other->alpha_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DivideParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DivideParameter

// optional float alpha = 1 [default = 1];
bool DivideParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DivideParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void DivideParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void DivideParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float DivideParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.DivideParameter.alpha)
  return alpha_;
}
void DivideParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.DivideParameter.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbedParameter::kNumOutputFieldNumber;
const int EmbedParameter::kInputDimFieldNumber;
const int EmbedParameter::kBiasTermFieldNumber;
const int EmbedParameter::kWeightFillerFieldNumber;
const int EmbedParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbedParameter::EmbedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.EmbedParameter)
}
EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(bias_term_));
  // @@protoc_insertion_point(copy_constructor:caffe.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_dim_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(input_dim_));
  bias_term_ = true;
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:caffe.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void EmbedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmbedParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbedParameter& EmbedParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmbedParameter* EmbedParameter::New(::google::protobuf::Arena* arena) const {
  EmbedParameter* n = new EmbedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.EmbedParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_dim_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(input_dim_));
    bias_term_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmbedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.EmbedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_input_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.EmbedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.EmbedParameter)
  return false;
#undef DO_
}

void EmbedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.EmbedParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->input_dim(), output);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.EmbedParameter)
}

::google::protobuf::uint8* EmbedParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.EmbedParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.EmbedParameter)
  return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.EmbedParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.FillerParameter weight_filler = 4;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 input_dim = 2;
    if (has_input_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmbedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbedParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.EmbedParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.EmbedParameter)
    MergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_dim_ = from.input_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmbedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {
  return true;
}

void EmbedParameter::Swap(EmbedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbedParameter::InternalSwap(EmbedParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(input_dim_, other->input_dim_);
  swap(bias_term_, other->bias_term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmbedParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmbedParameter

// optional uint32 num_output = 1;
bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000008u;
}
void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParameter::kBaseFieldNumber;
const int ExpParameter::kScaleFieldNumber;
const int ExpParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParameter::ExpParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ExpParameter)
}
ExpParameter::ExpParameter(const ExpParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.ExpParameter)
}

void ExpParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:caffe.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
}

void ExpParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExpParameter& ExpParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExpParameter* ExpParameter::New(::google::protobuf::Arena* arena) const {
  ExpParameter* n = new ExpParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ExpParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExpParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ExpParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ExpParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ExpParameter)
  return false;
#undef DO_
}

void ExpParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ExpParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ExpParameter)
}

::google::protobuf::uint8* ExpParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ExpParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ExpParameter)
  return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ExpParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ExpParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ExpParameter)
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
  return true;
}

void ExpParameter::Swap(ExpParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpParameter::InternalSwap(ExpParameter* other) {
  using std::swap;
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParameter

// optional float base = 1 [default = -1];
bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlattenParameter::kAxisFieldNumber;
const int FlattenParameter::kEndAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlattenParameter::FlattenParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_axis_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(end_axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 1;
  end_axis_ = -1;
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:caffe.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlattenParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlattenParameter& FlattenParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlattenParameter* FlattenParameter::New(::google::protobuf::Arena* arena) const {
  FlattenParameter* n = new FlattenParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.FlattenParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlattenParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.FlattenParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 end_axis = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.FlattenParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.FlattenParameter)
  return false;
#undef DO_
}

void FlattenParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.FlattenParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.FlattenParameter)
}

::google::protobuf::uint8* FlattenParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.FlattenParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.FlattenParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (has_end_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlattenParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlattenParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.FlattenParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.FlattenParameter)
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_axis_ = from.end_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlattenParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
  return true;
}

void FlattenParameter::Swap(FlattenParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlattenParameter::InternalSwap(FlattenParameter* other) {
  using std::swap;
  swap(axis_, other->axis_);
  swap(end_axis_, other->end_axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlattenParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlattenParameter

// optional int32 axis = 1 [default = 1];
bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5DataParameter::kSourceFieldNumber;
const int HDF5DataParameter::kBatchSizeFieldNumber;
const int HDF5DataParameter::kShuffleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5DataParameter::HDF5DataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5DataParameter)
}
HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shuffle_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5DataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5DataParameter& HDF5DataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HDF5DataParameter* HDF5DataParameter::New(::google::protobuf::Arena* arena) const {
  HDF5DataParameter* n = new HDF5DataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shuffle_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HDF5DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5DataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5DataParameter)
  return false;
#undef DO_
}

void HDF5DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5DataParameter)
}

::google::protobuf::uint8* HDF5DataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5DataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5DataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5DataParameter)
  return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5DataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional uint32 batch_size = 2;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5DataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5DataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5DataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5DataParameter)
    MergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HDF5DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {
  return true;
}

void HDF5DataParameter::Swap(HDF5DataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  swap(batch_size_, other->batch_size_);
  swap(shuffle_, other->shuffle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5DataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5DataParameter

// optional string source = 1;
bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena();
}
void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
#if LANG_CXX11
void HDF5DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
#endif
void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HDF5OutputParameter::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HDF5OutputParameter::HDF5OutputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HDF5OutputParameter)
}
HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:caffe.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDF5OutputParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HDF5OutputParameter* HDF5OutputParameter::New(::google::protobuf::Arena* arena) const {
  HDF5OutputParameter* n = new HDF5OutputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HDF5OutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HDF5OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HDF5OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.HDF5OutputParameter.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HDF5OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HDF5OutputParameter)
  return false;
#undef DO_
}

void HDF5OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HDF5OutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HDF5OutputParameter)
}

::google::protobuf::uint8* HDF5OutputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HDF5OutputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.HDF5OutputParameter.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HDF5OutputParameter)
  return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HDF5OutputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string file_name = 1;
  if (has_file_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5OutputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HDF5OutputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HDF5OutputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HDF5OutputParameter)
    MergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_name()) {
    set_has_file_name();
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void HDF5OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {
  return true;
}

void HDF5OutputParameter::Swap(HDF5OutputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HDF5OutputParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HDF5OutputParameter

// optional string file_name = 1;
bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena();
}
void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
#if LANG_CXX11
void HDF5OutputParameter::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
#endif
void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HingeLossParameter::kNormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HingeLossParameter::HingeLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.HingeLossParameter)
}
HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  norm_ = from.norm_;
  // @@protoc_insertion_point(copy_constructor:caffe.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  _cached_size_ = 0;
  norm_ = 1;
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
}

void HingeLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HingeLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HingeLossParameter& HingeLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

HingeLossParameter* HingeLossParameter::New(::google::protobuf::Arena* arena) const {
  HingeLossParameter* n = new HingeLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.HingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  norm_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HingeLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.HingeLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::HingeLossParameter_Norm_IsValid(value)) {
            set_norm(static_cast< ::caffe::HingeLossParameter_Norm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.HingeLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.HingeLossParameter)
  return false;
#undef DO_
}

void HingeLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.HingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->norm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.HingeLossParameter)
}

::google::protobuf::uint8* HingeLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.HingeLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->norm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.HingeLossParameter)
  return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.HingeLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  if (has_norm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HingeLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HingeLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.HingeLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.HingeLossParameter)
    MergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_norm()) {
    set_norm(from.norm());
  }
}

void HingeLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {
  return true;
}

void HingeLossParameter::Swap(HingeLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  using std::swap;
  swap(norm_, other->norm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HingeLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataParameter::kSourceFieldNumber;
const int ImageDataParameter::kBatchSizeFieldNumber;
const int ImageDataParameter::kRandSkipFieldNumber;
const int ImageDataParameter::kShuffleFieldNumber;
const int ImageDataParameter::kNewHeightFieldNumber;
const int ImageDataParameter::kNewWidthFieldNumber;
const int ImageDataParameter::kIsColorFieldNumber;
const int ImageDataParameter::kScaleFieldNumber;
const int ImageDataParameter::kMeanFileFieldNumber;
const int ImageDataParameter::kCropSizeFieldNumber;
const int ImageDataParameter::kMirrorFieldNumber;
const int ImageDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ImageDataParameter)
}
ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&crop_size_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:caffe.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_width_) -
      reinterpret_cast<char*>(&crop_size_)) + sizeof(new_width_));
  is_color_ = true;
  scale_ = 1;
  batch_size_ = 1u;
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDataParameter* ImageDataParameter::New(::google::protobuf::Arena* arena) const {
  ImageDataParameter* n = new ImageDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*root_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_height_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(new_height_));
  }
  if (cached_has_bits & 3840u) {
    new_width_ = 0u;
    is_color_ = true;
    scale_ = 1;
    batch_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), static_cast<int>(this->mean_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_height = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_width = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_color = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 12 [default = ""];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), static_cast<int>(this->root_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.ImageDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rand_skip(), output);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->shuffle(), output);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_height(), output);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->new_width(), output);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_color(), output);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), static_cast<int>(this->root_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ImageDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), static_cast<int>(this->root_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.ImageDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ImageDataParameter)
  return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ImageDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string root_folder = 12 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (has_rand_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_height());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 new_width = 10 [default = 0];
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_width());
    }

    // optional bool is_color = 11 [default = true];
    if (has_is_color()) {
      total_size += 1 + 1;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ImageDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ImageDataParameter)
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      new_height_ = from.new_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_color_ = from.is_color_;
    }
    if (cached_has_bits & 0x00000400u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000800u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {
  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  root_folder_.Swap(&other->root_folder_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(new_height_, other->new_height_);
  swap(new_width_, other->new_width_);
  swap(is_color_, other->is_color_);
  swap(scale_, other->scale_);
  swap(batch_size_, other->batch_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDataParameter

// optional string source = 1;
bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena();
}
void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
#if LANG_CXX11
void ImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
#endif
void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
#if LANG_CXX11
void ImageDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
#endif
void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
#if LANG_CXX11
void ImageDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.root_folder)
}
#endif
void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfogainLossParameter::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfogainLossParameter::InfogainLossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InfogainLossParameter)
}
InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:caffe.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfogainLossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfogainLossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfogainLossParameter& InfogainLossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfogainLossParameter* InfogainLossParameter::New(::google::protobuf::Arena* arena) const {
  InfogainLossParameter* n = new InfogainLossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InfogainLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_source()) {
    GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*source_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfogainLossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InfogainLossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.InfogainLossParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InfogainLossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InfogainLossParameter)
  return false;
#undef DO_
}

void InfogainLossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InfogainLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InfogainLossParameter)
}

::google::protobuf::uint8* InfogainLossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InfogainLossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.InfogainLossParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InfogainLossParameter)
  return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InfogainLossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string source = 1;
  if (has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InfogainLossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfogainLossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InfogainLossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InfogainLossParameter)
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    set_has_source();
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void InfogainLossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
  return true;
}

void InfogainLossParameter::Swap(InfogainLossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfogainLossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfogainLossParameter

// optional string source = 1;
bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena();
}
void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
#if LANG_CXX11
void InfogainLossParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
#endif
void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerProductParameter::kNumOutputFieldNumber;
const int InnerProductParameter::kBiasTermFieldNumber;
const int InnerProductParameter::kWeightFillerFieldNumber;
const int InnerProductParameter::kBiasFillerFieldNumber;
const int InnerProductParameter::kAxisFieldNumber;
const int InnerProductParameter::kTransposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerProductParameter::InnerProductParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transpose_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(transpose_));
  bias_term_ = true;
  axis_ = 1;
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:caffe.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void InnerProductParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerProductParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InnerProductParameter& InnerProductParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InnerProductParameter* InnerProductParameter::New(::google::protobuf::Arena* arena) const {
  InnerProductParameter* n = new InnerProductParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InnerProductParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transpose_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(transpose_));
    bias_term_ = true;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InnerProductParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InnerProductParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transpose = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_transpose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transpose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InnerProductParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InnerProductParameter)
  return false;
#undef DO_
}

void InnerProductParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InnerProductParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_output(), output);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bias_filler_, output);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->axis(), output);
  }

  // optional bool transpose = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->transpose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InnerProductParameter)
}

::google::protobuf::uint8* InnerProductParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InnerProductParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bias_filler_, deterministic, target);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->transpose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InnerProductParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.FillerParameter weight_filler = 3;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 4;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional bool transpose = 6 [default = false];
    if (has_transpose()) {
      total_size += 1 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 5 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerProductParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InnerProductParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InnerProductParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InnerProductParameter)
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      transpose_ = from.transpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerProductParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  return true;
}

void InnerProductParameter::Swap(InnerProductParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  using std::swap;
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(transpose_, other->transpose_);
  swap(bias_term_, other->bias_term_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnerProductParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnerProductParameter

// optional uint32 num_output = 1;
bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000020u;
}
void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000008u;
}
void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputParameter::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe.InputParameter)
}

void InputParameter::SharedCtor() {
  _cached_size_ = 0;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:caffe.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputParameter& InputParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
  InputParameter* n = new InputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.InputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe.BlobShape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.InputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shape(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.InputParameter)
}

::google::protobuf::uint8* InputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.InputParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe.BlobShape shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->shape(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.InputParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.BlobShape shape = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InputParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.InputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  shape_.InternalSwap(&other->shape_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputParameter

// repeated .caffe.BlobShape shape = 1;
int InputParameter::shape_size() const {
  return shape_.size();
}
void InputParameter::clear_shape() {
  shape_.Clear();
}
const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogParameter::kBaseFieldNumber;
const int LogParameter::kScaleFieldNumber;
const int LogParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogParameter::LogParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LogParameter)
}
LogParameter::LogParameter(const LogParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.LogParameter)
}

void LogParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:caffe.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
}

void LogParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogParameter& LogParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogParameter* LogParameter::New(::google::protobuf::Arena* arena) const {
  LogParameter* n = new LogParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LogParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LogParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LogParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LogParameter)
  return false;
#undef DO_
}

void LogParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LogParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LogParameter)
}

::google::protobuf::uint8* LogParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LogParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LogParameter)
  return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LogParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (has_base()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LogParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LogParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LogParameter)
    MergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {
  return true;
}

void LogParameter::Swap(LogParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogParameter::InternalSwap(LogParameter* other) {
  using std::swap;
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogParameter

// optional float base = 1 [default = -1];
bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRNParameter::kLocalSizeFieldNumber;
const int LRNParameter::kAlphaFieldNumber;
const int LRNParameter::kBetaFieldNumber;
const int LRNParameter::kNormRegionFieldNumber;
const int LRNParameter::kKFieldNumber;
const int LRNParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRNParameter::LRNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.LRNParameter)
}
LRNParameter::LRNParameter(const LRNParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&norm_region_, &from.norm_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&norm_region_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:caffe.LRNParameter)
}

void LRNParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&norm_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:caffe.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
}

void LRNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRNParameter& LRNParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

LRNParameter* LRNParameter::New(::google::protobuf::Arena* arena) const {
  LRNParameter* n = new LRNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.LRNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&norm_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LRNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.LRNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_size = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float beta = 3 [default = 0.75];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_NormRegion_IsValid(value)) {
            set_norm_region(static_cast< ::caffe::LRNParameter_NormRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float k = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::LRNParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::LRNParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.LRNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.LRNParameter)
  return false;
#undef DO_
}

void LRNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.LRNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_size(), output);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alpha(), output);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->beta(), output);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->norm_region(), output);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.LRNParameter)
}

::google::protobuf::uint8* LRNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.LRNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->beta(), target);
  }

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.LRNParameter)
  return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.LRNParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (has_norm_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->norm_region());
    }

    // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float k = 5 [default = 1];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LRNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.LRNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.LRNParameter)
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      norm_region_ = from.norm_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000010u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LRNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
  return true;
}

void LRNParameter::Swap(LRNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRNParameter::InternalSwap(LRNParameter* other) {
  using std::swap;
  swap(norm_region_, other->norm_region_);
  swap(engine_, other->engine_);
  swap(local_size_, other->local_size_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(k_, other->k_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LRNParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LRNParameter

// optional uint32 local_size = 1 [default = 5];
bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000004u;
}
void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000010u;
}
void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000010u;
}
void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000001u;
}
void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryDataParameter::kBatchSizeFieldNumber;
const int MemoryDataParameter::kChannelsFieldNumber;
const int MemoryDataParameter::kHeightFieldNumber;
const int MemoryDataParameter::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryDataParameter::MemoryDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MemoryDataParameter)
}
MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:caffe.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
}

void MemoryDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryDataParameter& MemoryDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryDataParameter* MemoryDataParameter::New(::google::protobuf::Arena* arena) const {
  MemoryDataParameter* n = new MemoryDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MemoryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MemoryDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MemoryDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MemoryDataParameter)
  return false;
#undef DO_
}

void MemoryDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MemoryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channels(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MemoryDataParameter)
}

::google::protobuf::uint8* MemoryDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MemoryDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channels(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MemoryDataParameter)
  return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MemoryDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 batch_size = 1;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channels());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MemoryDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MemoryDataParameter)
    MergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {
  return true;
}

void MemoryDataParameter::Swap(MemoryDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  using std::swap;
  swap(batch_size_, other->batch_size_);
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryDataParameter

// optional uint32 batch_size = 1;
bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVNParameter::kNormalizeVarianceFieldNumber;
const int MVNParameter::kAcrossChannelsFieldNumber;
const int MVNParameter::kEpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVNParameter::MVNParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.MVNParameter)
}
MVNParameter::MVNParameter(const MVNParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&across_channels_, &from.across_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&across_channels_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:caffe.MVNParameter)
}

void MVNParameter::SharedCtor() {
  _cached_size_ = 0;
  across_channels_ = false;
  normalize_variance_ = true;
  eps_ = 1e-09f;
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:caffe.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
}

void MVNParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVNParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MVNParameter& MVNParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

MVNParameter* MVNParameter::New(::google::protobuf::Arena* arena) const {
  MVNParameter* n = new MVNParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.MVNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    across_channels_ = false;
    normalize_variance_ = true;
    eps_ = 1e-09f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MVNParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.MVNParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalize_variance = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_normalize_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool across_channels = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_across_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &across_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps = 3 [default = 1e-09];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_eps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.MVNParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.MVNParameter)
  return false;
#undef DO_
}

void MVNParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.MVNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalize_variance(), output);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->across_channels(), output);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.MVNParameter)
}

::google::protobuf::uint8* MVNParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.MVNParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.MVNParameter)
  return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.MVNParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool across_channels = 2 [default = false];
    if (has_across_channels()) {
      total_size += 1 + 1;
    }

    // optional bool normalize_variance = 1 [default = true];
    if (has_normalize_variance()) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVNParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MVNParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MVNParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.MVNParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.MVNParameter)
    MergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      across_channels_ = from.across_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_variance_ = from.normalize_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MVNParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {
  return true;
}

void MVNParameter::Swap(MVNParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVNParameter::InternalSwap(MVNParameter* other) {
  using std::swap;
  swap(across_channels_, other->across_channels_);
  swap(normalize_variance_, other->normalize_variance_);
  swap(eps_, other->eps_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MVNParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVNParameter

// optional bool normalize_variance = 1 [default = true];
bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000002u;
}
void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000001u;
}
void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoolingParameter::kPoolFieldNumber;
const int PoolingParameter::kPadFieldNumber;
const int PoolingParameter::kPadHFieldNumber;
const int PoolingParameter::kPadWFieldNumber;
const int PoolingParameter::kKernelSizeFieldNumber;
const int PoolingParameter::kKernelHFieldNumber;
const int PoolingParameter::kKernelWFieldNumber;
const int PoolingParameter::kStrideFieldNumber;
const int PoolingParameter::kStrideHFieldNumber;
const int PoolingParameter::kStrideWFieldNumber;
const int PoolingParameter::kEngineFieldNumber;
const int PoolingParameter::kGlobalPoolingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pool_, &from.pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&pool_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:caffe.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_pooling_) -
      reinterpret_cast<char*>(&pool_)) + sizeof(global_pooling_));
  stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:caffe.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoolingParameter& PoolingParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_h_) -
        reinterpret_cast<char*>(&pool_)) + sizeof(pad_h_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&pad_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_pooling_) -
        reinterpret_cast<char*>(&pad_w_)) + sizeof(global_pooling_));
    stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::PoolingParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_kernel_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernel_w = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_kernel_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_h = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_stride_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride_w = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_stride_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_h = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_pad_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad_w = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pad_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::PoolingParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::PoolingParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_pooling = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_global_pooling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_pooling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pool(), output);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kernel_size(), output);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pad(), output);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kernel_h(), output);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kernel_w(), output);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stride_h(), output);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->stride_w(), output);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pad_h(), output);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pad_w(), output);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->engine(), output);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->global_pooling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PoolingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pad_w(), target);
  }

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->global_pooling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PoolingParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 kernel_size = 2;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_size());
    }

    // optional uint32 pad = 4 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernel_h = 5;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_w());
    }

    // optional uint32 stride_h = 7;
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_h());
    }

    // optional uint32 stride_w = 8;
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_w());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_h());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 pad_w = 10 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_w());
    }

    // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (has_global_pooling()) {
      total_size += 1 + 1;
    }

    // optional uint32 stride = 3 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      stride_h_ = from.stride_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_h_ = from.pad_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      global_pooling_ = from.global_pooling_;
    }
    if (cached_has_bits & 0x00000800u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  using std::swap;
  swap(pool_, other->pool_);
  swap(kernel_size_, other->kernel_size_);
  swap(pad_, other->pad_);
  swap(kernel_h_, other->kernel_h_);
  swap(kernel_w_, other->kernel_w_);
  swap(stride_h_, other->stride_h_);
  swap(stride_w_, other->stride_w_);
  swap(pad_h_, other->pad_h_);
  swap(pad_w_, other->pad_w_);
  swap(engine_, other->engine_);
  swap(global_pooling_, other->global_pooling_);
  swap(stride_, other->stride_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000080u;
}
void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000100u;
}
void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000100u;
}
void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000008u;
}
void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000008u;
}
void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000010u;
}
void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000800u;
}
void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000800u;
}
void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000020u;
}
void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000020u;
}
void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000040u;
}
void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerParameter::kPowerFieldNumber;
const int PowerParameter::kScaleFieldNumber;
const int PowerParameter::kShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerParameter::PowerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PowerParameter)
}
PowerParameter::PowerParameter(const PowerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.PowerParameter)
}

void PowerParameter::SharedCtor() {
  _cached_size_ = 0;
  shift_ = 0;
  power_ = 1;
  scale_ = 1;
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:caffe.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
}

void PowerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerParameter& PowerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PowerParameter* PowerParameter::New(::google::protobuf::Arena* arena) const {
  PowerParameter* n = new PowerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PowerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    shift_ = 0;
    power_ = 1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PowerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float power = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shift = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PowerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PowerParameter)
  return false;
#undef DO_
}

void PowerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PowerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->power(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->shift(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PowerParameter)
}

::google::protobuf::uint8* PowerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PowerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->shift(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PowerParameter)
  return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PowerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float shift = 3 [default = 0];
    if (has_shift()) {
      total_size += 1 + 4;
    }

    // optional float power = 1 [default = 1];
    if (has_power()) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PowerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PowerParameter)
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
  return true;
}

void PowerParameter::Swap(PowerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerParameter::InternalSwap(PowerParameter* other) {
  using std::swap;
  swap(shift_, other->shift_);
  swap(power_, other->power_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerParameter

// optional float power = 1 [default = 1];
bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PythonParameter::kModuleFieldNumber;
const int PythonParameter::kLayerFieldNumber;
const int PythonParameter::kParamStrFieldNumber;
const int PythonParameter::kShareInParallelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PythonParameter::PythonParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PythonParameter)
}
PythonParameter::PythonParameter(const PythonParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_module()) {
    module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer()) {
    layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param_str()) {
    param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
  }
  share_in_parallel_ = from.share_in_parallel_;
  // @@protoc_insertion_point(copy_constructor:caffe.PythonParameter)
}

void PythonParameter::SharedCtor() {
  _cached_size_ = 0;
  module_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:caffe.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  module_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PythonParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PythonParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PythonParameter& PythonParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PythonParameter* PythonParameter::New(::google::protobuf::Arena* arena) const {
  PythonParameter* n = new PythonParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PythonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!module_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*module_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!param_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param_str_.UnsafeRawStringPointer())->clear();
    }
  }
  share_in_parallel_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PythonParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PythonParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), static_cast<int>(this->module().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.module");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), static_cast<int>(this->layer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param_str = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_str().data(), static_cast<int>(this->param_str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.PythonParameter.param_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_in_parallel = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_share_in_parallel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_in_parallel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PythonParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PythonParameter)
  return false;
#undef DO_
}

void PythonParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PythonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), static_cast<int>(this->param_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->share_in_parallel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PythonParameter)
}

::google::protobuf::uint8* PythonParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PythonParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), static_cast<int>(this->module().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), static_cast<int>(this->layer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_str().data(), static_cast<int>(this->param_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.PythonParameter.param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->share_in_parallel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PythonParameter)
  return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PythonParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // optional string param_str = 3 [default = ""];
    if (has_param_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (has_share_in_parallel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PythonParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PythonParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PythonParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PythonParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PythonParameter)
    MergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_module();
      module_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_param_str();
      param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
    }
    if (cached_has_bits & 0x00000008u) {
      share_in_parallel_ = from.share_in_parallel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PythonParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {
  return true;
}

void PythonParameter::Swap(PythonParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PythonParameter::InternalSwap(PythonParameter* other) {
  using std::swap;
  module_.Swap(&other->module_);
  layer_.Swap(&other->layer_);
  param_str_.Swap(&other->param_str_);
  swap(share_in_parallel_, other->share_in_parallel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PythonParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PythonParameter

// optional string module = 1;
bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena();
}
void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
#if LANG_CXX11
void PythonParameter::set_module(::std::string&& value) {
  set_has_module();
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.module)
}
#endif
void PythonParameter::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena();
}
void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
#if LANG_CXX11
void PythonParameter::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.layer)
}
#endif
void PythonParameter::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena();
}
void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
#if LANG_CXX11
void PythonParameter::set_param_str(::std::string&& value) {
  set_has_param_str();
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.param_str)
}
#endif
void PythonParameter::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReductionParameter::kOperationFieldNumber;
const int ReductionParameter::kAxisFieldNumber;
const int ReductionParameter::kCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReductionParameter::ReductionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReductionParameter)
}
ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&coeff_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(coeff_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  _cached_size_ = 0;
  axis_ = 0;
  operation_ = 1;
  coeff_ = 1;
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
}

void ReductionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReductionParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReductionParameter& ReductionParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReductionParameter* ReductionParameter::New(::google::protobuf::Arena* arena) const {
  ReductionParameter* n = new ReductionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReductionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    axis_ = 0;
    operation_ = 1;
    coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReductionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReductionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReductionParameter_ReductionOp_IsValid(value)) {
            set_operation(static_cast< ::caffe::ReductionParameter_ReductionOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float coeff = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReductionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReductionParameter)
  return false;
#undef DO_
}

void ReductionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReductionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->coeff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReductionParameter)
}

::google::protobuf::uint8* ReductionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReductionParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->coeff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReductionParameter)
  return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReductionParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional float coeff = 3 [default = 1];
    if (has_coeff()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReductionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReductionParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReductionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReductionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReductionParameter)
    MergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      coeff_ = from.coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReductionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {
  return true;
}

void ReductionParameter::Swap(ReductionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReductionParameter::InternalSwap(ReductionParameter* other) {
  using std::swap;
  swap(axis_, other->axis_);
  swap(operation_, other->operation_);
  swap(coeff_, other->coeff_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReductionParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReLUParameter::kNegativeSlopeFieldNumber;
const int ReLUParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReLUParameter::ReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&negative_slope_, &from.negative_slope_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&negative_slope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReLUParameter& ReLUParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReLUParameter* ReLUParameter::New(::google::protobuf::Arena* arena) const {
  ReLUParameter* n = new ReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&negative_slope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float negative_slope = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_negative_slope();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::ReLUParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::ReLUParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReLUParameter)
  return false;
#undef DO_
}

void ReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->negative_slope(), output);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReLUParameter)
}

::google::protobuf::uint8* ReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->negative_slope(), target);
  }

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReLUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float negative_slope = 1 [default = 0];
    if (has_negative_slope()) {
      total_size += 1 + 4;
    }

    // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReLUParameter)
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      negative_slope_ = from.negative_slope_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
  return true;
}

void ReLUParameter::Swap(ReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReLUParameter::InternalSwap(ReLUParameter* other) {
  using std::swap;
  swap(negative_slope_, other->negative_slope_);
  swap(engine_, other->engine_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReLUParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReLUParameter

// optional float negative_slope = 1 [default = 0];
bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReshapeParameter::kShapeFieldNumber;
const int ReshapeParameter::kAxisFieldNumber;
const int ReshapeParameter::kNumAxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReshapeParameter::ReshapeParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ReshapeParameter)
}
ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::caffe::BlobShape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(axis_));
  num_axes_ = -1;
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:caffe.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
}

void ReshapeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReshapeParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReshapeParameter& ReshapeParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReshapeParameter* ReshapeParameter::New(::google::protobuf::Arena* arena) const {
  ReshapeParameter* n = new ReshapeParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ReshapeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_shape()) {
    GOOGLE_DCHECK(shape_ != NULL);
    shape_->::caffe::BlobShape::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    axis_ = 0;
    num_axes_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReshapeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ReshapeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.BlobShape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ReshapeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ReshapeParameter)
  return false;
#undef DO_
}

void ReshapeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ReshapeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shape_, output);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_axes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ReshapeParameter)
}

::google::protobuf::uint8* ReshapeParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ReshapeParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shape_, deterministic, target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_axes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ReshapeParameter)
  return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ReshapeParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .caffe.BlobShape shape = 1;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReshapeParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReshapeParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ReshapeParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ReshapeParameter)
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shape()->::caffe::BlobShape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReshapeParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
  return true;
}

void ReshapeParameter::Swap(ReshapeParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReshapeParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
const ::caffe::BlobShape& ReshapeParameter::shape() const {
  const ::caffe::BlobShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BlobShape*>(
      &::caffe::_BlobShape_default_instance_);
}
::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScaleParameter::kAxisFieldNumber;
const int ScaleParameter::kNumAxesFieldNumber;
const int ScaleParameter::kFillerFieldNumber;
const int ScaleParameter::kBiasTermFieldNumber;
const int ScaleParameter::kBiasFillerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleParameter::ScaleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ScaleParameter)
}
ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  ::memcpy(&bias_term_, &from.bias_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&bias_term_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:caffe.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_term_) -
      reinterpret_cast<char*>(&filler_)) + sizeof(bias_term_));
  axis_ = 1;
  num_axes_ = 1;
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:caffe.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void ScaleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScaleParameter& ScaleParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScaleParameter* ScaleParameter::New(::google::protobuf::Arena* arena) const {
  ScaleParameter* n = new ScaleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ScaleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != NULL);
      filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    bias_term_ = false;
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScaleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ScaleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_axes = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_axes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_axes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter filler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bias_term = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bias_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bias_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ScaleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ScaleParameter)
  return false;
#undef DO_
}

void ScaleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ScaleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_axes(), output);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filler_, output);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bias_term(), output);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bias_filler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ScaleParameter)
}

::google::protobuf::uint8* ScaleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ScaleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_axes(), target);
  }

  // optional .caffe.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filler_, deterministic, target);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bias_term(), target);
  }

  // optional .caffe.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bias_filler_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ScaleParameter)
  return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ScaleParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .caffe.FillerParameter filler = 3;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 5;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (has_bias_term()) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (has_num_axes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_axes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScaleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ScaleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ScaleParameter)
    MergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScaleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {
  return true;
}

void ScaleParameter::Swap(ScaleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScaleParameter::InternalSwap(ScaleParameter* other) {
  using std::swap;
  swap(filler_, other->filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(bias_term_, other->bias_term_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScaleParameter

// optional int32 axis = 1 [default = 1];
bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000010u;
}
void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& ScaleParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidParameter::SigmoidParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SigmoidParameter)
}
SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:caffe.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:caffe.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
}

void SigmoidParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigmoidParameter& SigmoidParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SigmoidParameter* SigmoidParameter::New(::google::protobuf::Arena* arena) const {
  SigmoidParameter* n = new SigmoidParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SigmoidParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SigmoidParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SigmoidParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SigmoidParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SigmoidParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SigmoidParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SigmoidParameter)
  return false;
#undef DO_
}

void SigmoidParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SigmoidParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SigmoidParameter)
}

::google::protobuf::uint8* SigmoidParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SigmoidParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SigmoidParameter)
  return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SigmoidParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SigmoidParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SigmoidParameter)
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_engine()) {
    set_engine(from.engine());
  }
}

void SigmoidParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {
  return true;
}

void SigmoidParameter::Swap(SigmoidParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  using std::swap;
  swap(engine_, other->engine_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SliceParameter::kAxisFieldNumber;
const int SliceParameter::kSlicePointFieldNumber;
const int SliceParameter::kSliceDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SliceParameter::SliceParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SliceParameter)
}
SliceParameter::SliceParameter(const SliceParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slice_point_(from.slice_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slice_dim_, &from.slice_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&slice_dim_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.SliceParameter)
}

void SliceParameter::SharedCtor() {
  _cached_size_ = 0;
  slice_dim_ = 1u;
  axis_ = 1;
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:caffe.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
}

void SliceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SliceParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SliceParameter& SliceParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SliceParameter* SliceParameter::New(::google::protobuf::Arena* arena) const {
  SliceParameter* n = new SliceParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SliceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    slice_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SliceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SliceParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_slice_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slice_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 slice_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_slice_point())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_slice_point())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SliceParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SliceParameter)
  return false;
#undef DO_
}

void SliceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SliceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slice_dim(), output);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0, n = this->slice_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->slice_point(i), output);
  }

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SliceParameter)
}

::google::protobuf::uint8* SliceParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SliceParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->slice_point_, target);

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SliceParameter)
  return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SliceParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 slice_point = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->slice_point_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slice_point_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 slice_dim = 1 [default = 1];
    if (has_slice_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slice_dim());
    }

    // optional int32 axis = 3 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliceParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SliceParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SliceParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SliceParameter)
    MergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slice_point_.MergeFrom(from.slice_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      slice_dim_ = from.slice_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SliceParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {
  return true;
}

void SliceParameter::Swap(SliceParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SliceParameter::InternalSwap(SliceParameter* other) {
  using std::swap;
  slice_point_.InternalSwap(&other->slice_point_);
  swap(slice_dim_, other->slice_dim_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SliceParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SliceParameter

// optional int32 axis = 3 [default = 1];
bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000001u;
}
void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftmaxParameter::kEngineFieldNumber;
const int SoftmaxParameter::kAxisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SoftmaxParameter)
}
SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&engine_, &from.engine_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&engine_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
  axis_ = 1;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:caffe.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SoftmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SoftmaxParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SoftmaxParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 axis = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SoftmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SoftmaxParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SoftmaxParameter)
  return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SoftmaxParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {
  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  using std::swap;
  swap(engine_, other->engine_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TanHParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TanHParameter::TanHParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TanHParameter)
}
TanHParameter::TanHParameter(const TanHParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:caffe.TanHParameter)
}

void TanHParameter::SharedCtor() {
  _cached_size_ = 0;
  engine_ = 0;
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:caffe.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
}

void TanHParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TanHParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TanHParameter& TanHParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TanHParameter* TanHParameter::New(::google::protobuf::Arena* arena) const {
  TanHParameter* n = new TanHParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TanHParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TanHParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TanHParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::TanHParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::TanHParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TanHParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TanHParameter)
  return false;
#undef DO_
}

void TanHParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TanHParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TanHParameter)
}

::google::protobuf::uint8* TanHParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TanHParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TanHParameter)
  return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TanHParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (has_engine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TanHParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TanHParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TanHParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TanHParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TanHParameter)
    MergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_engine()) {
    set_engine(from.engine());
  }
}

void TanHParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {
  return true;
}

void TanHParameter::Swap(TanHParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TanHParameter::InternalSwap(TanHParameter* other) {
  using std::swap;
  swap(engine_, other->engine_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TanHParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileParameter::kAxisFieldNumber;
const int TileParameter::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileParameter::TileParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.TileParameter)
}
TileParameter::TileParameter(const TileParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tiles_, &from.tiles_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&tiles_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:caffe.TileParameter)
}

void TileParameter::SharedCtor() {
  _cached_size_ = 0;
  tiles_ = 0;
  axis_ = 1;
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:caffe.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
}

void TileParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TileParameter& TileParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TileParameter* TileParameter::New(::google::protobuf::Arena* arena) const {
  TileParameter* n = new TileParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.TileParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    tiles_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TileParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.TileParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 axis = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_axis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tiles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tiles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.TileParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.TileParameter)
  return false;
#undef DO_
}

void TileParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.TileParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->axis(), output);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tiles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.TileParameter)
}

::google::protobuf::uint8* TileParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.TileParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->axis(), target);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tiles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.TileParameter)
  return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.TileParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 tiles = 2;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiles());
    }

    // optional int32 axis = 1 [default = 1];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TileParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.TileParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.TileParameter)
    MergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tiles_ = from.tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TileParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {
  return true;
}

void TileParameter::Swap(TileParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileParameter::InternalSwap(TileParameter* other) {
  using std::swap;
  swap(tiles_, other->tiles_);
  swap(axis_, other->axis_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileParameter

// optional int32 axis = 1 [default = 1];
bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000001u;
}
void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000001u;
}
void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParameter::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParameter::ThresholdParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.ThresholdParameter)
}
ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:caffe.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  _cached_size_ = 0;
  threshold_ = 0;
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:caffe.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
}

void ThresholdParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThresholdParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThresholdParameter& ThresholdParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ThresholdParameter* ThresholdParameter::New(::google::protobuf::Arena* arena) const {
  ThresholdParameter* n = new ThresholdParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.ThresholdParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ThresholdParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.ThresholdParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.ThresholdParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.ThresholdParameter)
  return false;
#undef DO_
}

void ThresholdParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.ThresholdParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.ThresholdParameter)
}

::google::protobuf::uint8* ThresholdParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.ThresholdParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.ThresholdParameter)
  return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.ThresholdParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float threshold = 1 [default = 0];
  if (has_threshold()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.ThresholdParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.ThresholdParameter)
    MergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_threshold()) {
    set_threshold(from.threshold());
  }
}

void ThresholdParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {
  return true;
}

void ThresholdParameter::Swap(ThresholdParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  using std::swap;
  swap(threshold_, other->threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ThresholdParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ThresholdParameter

// optional float threshold = 1 [default = 0];
bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> WindowDataParameter::_default_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowDataParameter::kSourceFieldNumber;
const int WindowDataParameter::kScaleFieldNumber;
const int WindowDataParameter::kMeanFileFieldNumber;
const int WindowDataParameter::kBatchSizeFieldNumber;
const int WindowDataParameter::kCropSizeFieldNumber;
const int WindowDataParameter::kMirrorFieldNumber;
const int WindowDataParameter::kFgThresholdFieldNumber;
const int WindowDataParameter::kBgThresholdFieldNumber;
const int WindowDataParameter::kFgFractionFieldNumber;
const int WindowDataParameter::kContextPadFieldNumber;
const int WindowDataParameter::kCropModeFieldNumber;
const int WindowDataParameter::kCacheImagesFieldNumber;
const int WindowDataParameter::kRootFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowDataParameter::WindowDataParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.WindowDataParameter)
}
WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  crop_mode_.UnsafeSetDefault(&WindowDataParameter::_default_crop_mode_.get());
  if (from.has_crop_mode()) {
    crop_mode_.AssignWithDefault(&WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
  }
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_folder()) {
    root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&fg_fraction_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:caffe.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.UnsafeSetDefault(&WindowDataParameter::_default_crop_mode_.get());
  root_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_pad_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(context_pad_));
  scale_ = 1;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:caffe.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(&WindowDataParameter::_default_crop_mode_.get());
  root_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WindowDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowDataParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindowDataParameter& WindowDataParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindowDataParameter* WindowDataParameter::New(::google::protobuf::Arena* arena) const {
  WindowDataParameter* n = new WindowDataParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.WindowDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!crop_mode_.IsDefault(&WindowDataParameter::_default_crop_mode_.get()));
      (*crop_mode_.UnsafeRawStringPointer())->assign(*&WindowDataParameter::_default_crop_mode_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!root_folder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*root_folder_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_images_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(cache_images_));
  }
  if (cached_has_bits & 7936u) {
    context_pad_ = 0u;
    scale_ = 1;
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
    fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WindowDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.WindowDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), static_cast<int>(this->mean_file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crop_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg_threshold = 7 [default = 0.5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bg_threshold = 8 [default = 0.5];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg_fraction = 9 [default = 0.25];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 context_pad = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string crop_mode = 11 [default = "warp"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.crop_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cache_images = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_cache_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string root_folder = 13 [default = ""];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->root_folder().data(), static_cast<int>(this->root_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.WindowDataParameter.root_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.WindowDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.WindowDataParameter)
  return false;
#undef DO_
}

void WindowDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.WindowDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mean_file(), output);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crop_size(), output);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mirror(), output);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fg_threshold(), output);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bg_threshold(), output);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fg_fraction(), output);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->context_pad(), output);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->crop_mode(), output);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cache_images(), output);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), static_cast<int>(this->root_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.WindowDataParameter)
}

::google::protobuf::uint8* WindowDataParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.WindowDataParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), static_cast<int>(this->mean_file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crop_mode().data(), static_cast<int>(this->crop_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->root_folder().data(), static_cast<int>(this->root_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.WindowDataParameter.root_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.WindowDataParameter)
  return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.WindowDataParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string mean_file = 3;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (has_crop_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crop_mode());
    }

    // optional string root_folder = 13 [default = ""];
    if (has_root_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_folder());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (has_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional bool cache_images = 12 [default = false];
    if (has_cache_images()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 context_pad = 10 [default = 0];
    if (has_context_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context_pad());
    }

    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (has_fg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (has_bg_threshold()) {
      total_size += 1 + 4;
    }

    // optional float fg_fraction = 9 [default = 0.25];
    if (has_fg_fraction()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowDataParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowDataParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.WindowDataParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.WindowDataParameter)
    MergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_crop_mode();
      crop_mode_.AssignWithDefault(&WindowDataParameter::_default_crop_mode_.get(), from.crop_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_root_folder();
      root_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000010u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      cache_images_ = from.cache_images_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      context_pad_ = from.context_pad_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      fg_threshold_ = from.fg_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      bg_threshold_ = from.bg_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      fg_fraction_ = from.fg_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {
  return true;
}

void WindowDataParameter::Swap(WindowDataParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  using std::swap;
  source_.Swap(&other->source_);
  mean_file_.Swap(&other->mean_file_);
  crop_mode_.Swap(&other->crop_mode_);
  root_folder_.Swap(&other->root_folder_);
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(mirror_, other->mirror_);
  swap(cache_images_, other->cache_images_);
  swap(context_pad_, other->context_pad_);
  swap(scale_, other->scale_);
  swap(fg_threshold_, other->fg_threshold_);
  swap(bg_threshold_, other->bg_threshold_);
  swap(fg_fraction_, other->fg_fraction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowDataParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowDataParameter

// optional string source = 1;
bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena();
}
void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
#if LANG_CXX11
void WindowDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
#endif
void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
#if LANG_CXX11
void WindowDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
#endif
void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000020u;
}
void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00001000u;
}
void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00001000u;
}
void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000100u;
}
void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000100u;
}
void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&WindowDataParameter::_default_crop_mode_.get());
  clear_has_crop_mode();
}
const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena();
}
void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
#if LANG_CXX11
void WindowDataParameter::set_crop_mode(::std::string&& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(
    &WindowDataParameter::_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
#endif
void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&WindowDataParameter::_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(&WindowDataParameter::_default_crop_mode_.get());
}
void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(&WindowDataParameter::_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000080u;
}
void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000080u;
}
void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000008u;
}
void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
#if LANG_CXX11
void WindowDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.root_folder)
}
#endif
void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPPParameter::kPyramidHeightFieldNumber;
const int SPPParameter::kPoolFieldNumber;
const int SPPParameter::kEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPPParameter::SPPParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.SPPParameter)
}
SPPParameter::SPPParameter(const SPPParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pyramid_height_, &from.pyramid_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:caffe.SPPParameter)
}

void SPPParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pyramid_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:caffe.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
}

void SPPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SPPParameter& SPPParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

SPPParameter* SPPParameter::New(::google::protobuf::Arena* arena) const {
  SPPParameter* n = new SPPParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.SPPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pyramid_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SPPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.SPPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pyramid_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pyramid_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pyramid_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::SPPParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::SPPParameter_Engine_IsValid(value)) {
            set_engine(static_cast< ::caffe::SPPParameter_Engine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.SPPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.SPPParameter)
  return false;
#undef DO_
}

void SPPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.SPPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pyramid_height(), output);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pool(), output);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->engine(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.SPPParameter)
}

::google::protobuf::uint8* SPPParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.SPPParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pyramid_height(), target);
  }

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pool(), target);
  }

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->engine(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.SPPParameter)
  return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.SPPParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 pyramid_height = 1;
    if (has_pyramid_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pyramid_height());
    }

    // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SPPParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SPPParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.SPPParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.SPPParameter)
    MergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pyramid_height_ = from.pyramid_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000004u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SPPParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {
  return true;
}

void SPPParameter::Swap(SPPParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPPParameter::InternalSwap(SPPParameter* other) {
  using std::swap;
  swap(pyramid_height_, other->pyramid_height_);
  swap(pool_, other->pool_);
  swap(engine_, other->engine_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SPPParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPPParameter

// optional uint32 pyramid_height = 1;
bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V1LayerParameter::kBottomFieldNumber;
const int V1LayerParameter::kTopFieldNumber;
const int V1LayerParameter::kNameFieldNumber;
const int V1LayerParameter::kIncludeFieldNumber;
const int V1LayerParameter::kExcludeFieldNumber;
const int V1LayerParameter::kTypeFieldNumber;
const int V1LayerParameter::kBlobsFieldNumber;
const int V1LayerParameter::kParamFieldNumber;
const int V1LayerParameter::kBlobShareModeFieldNumber;
const int V1LayerParameter::kBlobsLrFieldNumber;
const int V1LayerParameter::kWeightDecayFieldNumber;
const int V1LayerParameter::kLossWeightFieldNumber;
const int V1LayerParameter::kAccuracyParamFieldNumber;
const int V1LayerParameter::kArgmaxParamFieldNumber;
const int V1LayerParameter::kConcatParamFieldNumber;
const int V1LayerParameter::kContrastiveLossParamFieldNumber;
const int V1LayerParameter::kConvolutionParamFieldNumber;
const int V1LayerParameter::kDataParamFieldNumber;
const int V1LayerParameter::kDropoutParamFieldNumber;
const int V1LayerParameter::kDummyDataParamFieldNumber;
const int V1LayerParameter::kEltwiseParamFieldNumber;
const int V1LayerParameter::kExpParamFieldNumber;
const int V1LayerParameter::kHdf5DataParamFieldNumber;
const int V1LayerParameter::kHdf5OutputParamFieldNumber;
const int V1LayerParameter::kHingeLossParamFieldNumber;
const int V1LayerParameter::kImageDataParamFieldNumber;
const int V1LayerParameter::kInfogainLossParamFieldNumber;
const int V1LayerParameter::kInnerProductParamFieldNumber;
const int V1LayerParameter::kLrnParamFieldNumber;
const int V1LayerParameter::kMemoryDataParamFieldNumber;
const int V1LayerParameter::kMvnParamFieldNumber;
const int V1LayerParameter::kPoolingParamFieldNumber;
const int V1LayerParameter::kPowerParamFieldNumber;
const int V1LayerParameter::kReluParamFieldNumber;
const int V1LayerParameter::kSigmoidParamFieldNumber;
const int V1LayerParameter::kSoftmaxParamFieldNumber;
const int V1LayerParameter::kSliceParamFieldNumber;
const int V1LayerParameter::kTanhParamFieldNumber;
const int V1LayerParameter::kThresholdParamFieldNumber;
const int V1LayerParameter::kWindowDataParamFieldNumber;
const int V1LayerParameter::kTransformParamFieldNumber;
const int V1LayerParameter::kLossParamFieldNumber;
const int V1LayerParameter::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V1LayerParameter::V1LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V1LayerParameter)
}
V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bottom_(from.bottom_),
      top_(from.top_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_),
      include_(from.include_),
      exclude_(from.exclude_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blob_share_mode_(from.blob_share_mode_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_layer()) {
    layer_ = new ::caffe::V0LayerParameter(*from.layer_);
  } else {
    layer_ = NULL;
  }
  if (from.has_concat_param()) {
    concat_param_ = new ::caffe::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = NULL;
  }
  if (from.has_convolution_param()) {
    convolution_param_ = new ::caffe::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = NULL;
  }
  if (from.has_data_param()) {
    data_param_ = new ::caffe::DataParameter(*from.data_param_);
  } else {
    data_param_ = NULL;
  }
  if (from.has_dropout_param()) {
    dropout_param_ = new ::caffe::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = NULL;
  }
  if (from.has_hdf5_data_param()) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  if (from.has_image_data_param()) {
    image_data_param_ = new ::caffe::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = NULL;
  }
  if (from.has_infogain_loss_param()) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = NULL;
  }
  if (from.has_inner_product_param()) {
    inner_product_param_ = new ::caffe::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = NULL;
  }
  if (from.has_lrn_param()) {
    lrn_param_ = new ::caffe::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = NULL;
  }
  if (from.has_pooling_param()) {
    pooling_param_ = new ::caffe::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = NULL;
  }
  if (from.has_window_data_param()) {
    window_data_param_ = new ::caffe::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = NULL;
  }
  if (from.has_power_param()) {
    power_param_ = new ::caffe::PowerParameter(*from.power_param_);
  } else {
    power_param_ = NULL;
  }
  if (from.has_memory_data_param()) {
    memory_data_param_ = new ::caffe::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = NULL;
  }
  if (from.has_argmax_param()) {
    argmax_param_ = new ::caffe::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = NULL;
  }
  if (from.has_eltwise_param()) {
    eltwise_param_ = new ::caffe::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = NULL;
  }
  if (from.has_threshold_param()) {
    threshold_param_ = new ::caffe::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = NULL;
  }
  if (from.has_dummy_data_param()) {
    dummy_data_param_ = new ::caffe::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = NULL;
  }
  if (from.has_accuracy_param()) {
    accuracy_param_ = new ::caffe::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = NULL;
  }
  if (from.has_hinge_loss_param()) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = NULL;
  }
  if (from.has_relu_param()) {
    relu_param_ = new ::caffe::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = NULL;
  }
  if (from.has_slice_param()) {
    slice_param_ = new ::caffe::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = NULL;
  }
  if (from.has_mvn_param()) {
    mvn_param_ = new ::caffe::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = NULL;
  }
  if (from.has_transform_param()) {
    transform_param_ = new ::caffe::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = NULL;
  }
  if (from.has_tanh_param()) {
    tanh_param_ = new ::caffe::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = NULL;
  }
  if (from.has_sigmoid_param()) {
    sigmoid_param_ = new ::caffe::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = NULL;
  }
  if (from.has_softmax_param()) {
    softmax_param_ = new ::caffe::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = NULL;
  }
  if (from.has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = NULL;
  }
  if (from.has_exp_param()) {
    exp_param_ = new ::caffe::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = NULL;
  }
  if (from.has_loss_param()) {
    loss_param_ = new ::caffe::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:caffe.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(type_));
  _cached_size_ = 0;
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete hdf5_data_param_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
  if (this != internal_default_instance()) delete image_data_param_;
  if (this != internal_default_instance()) delete infogain_loss_param_;
  if (this != internal_default_instance()) delete inner_product_param_;
  if (this != internal_default_instance()) delete lrn_param_;
  if (this != internal_default_instance()) delete pooling_param_;
  if (this != internal_default_instance()) delete window_data_param_;
  if (this != internal_default_instance()) delete power_param_;
  if (this != internal_default_instance()) delete memory_data_param_;
  if (this != internal_default_instance()) delete argmax_param_;
  if (this != internal_default_instance()) delete eltwise_param_;
  if (this != internal_default_instance()) delete threshold_param_;
  if (this != internal_default_instance()) delete dummy_data_param_;
  if (this != internal_default_instance()) delete accuracy_param_;
  if (this != internal_default_instance()) delete hinge_loss_param_;
  if (this != internal_default_instance()) delete relu_param_;
  if (this != internal_default_instance()) delete slice_param_;
  if (this != internal_default_instance()) delete mvn_param_;
  if (this != internal_default_instance()) delete transform_param_;
  if (this != internal_default_instance()) delete tanh_param_;
  if (this != internal_default_instance()) delete sigmoid_param_;
  if (this != internal_default_instance()) delete softmax_param_;
  if (this != internal_default_instance()) delete contrastive_loss_param_;
  if (this != internal_default_instance()) delete exp_param_;
  if (this != internal_default_instance()) delete loss_param_;
}

void V1LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V1LayerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V1LayerParameter& V1LayerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

V1LayerParameter* V1LayerParameter::New(::google::protobuf::Arena* arena) const {
  V1LayerParameter* n = new V1LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V1LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  include_.Clear();
  exclude_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layer_ != NULL);
      layer_->::caffe::V0LayerParameter::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(concat_param_ != NULL);
      concat_param_->::caffe::ConcatParameter::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(convolution_param_ != NULL);
      convolution_param_->::caffe::ConvolutionParameter::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_param_ != NULL);
      data_param_->::caffe::DataParameter::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dropout_param_ != NULL);
      dropout_param_->::caffe::DropoutParameter::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hdf5_data_param_ != NULL);
      hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(image_data_param_ != NULL);
      image_data_param_->::caffe::ImageDataParameter::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(infogain_loss_param_ != NULL);
      infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(inner_product_param_ != NULL);
      inner_product_param_->::caffe::InnerProductParameter::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(lrn_param_ != NULL);
      lrn_param_->::caffe::LRNParameter::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(pooling_param_ != NULL);
      pooling_param_->::caffe::PoolingParameter::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(window_data_param_ != NULL);
      window_data_param_->::caffe::WindowDataParameter::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(power_param_ != NULL);
      power_param_->::caffe::PowerParameter::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(memory_data_param_ != NULL);
      memory_data_param_->::caffe::MemoryDataParameter::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(argmax_param_ != NULL);
      argmax_param_->::caffe::ArgMaxParameter::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(eltwise_param_ != NULL);
      eltwise_param_->::caffe::EltwiseParameter::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(threshold_param_ != NULL);
      threshold_param_->::caffe::ThresholdParameter::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(dummy_data_param_ != NULL);
      dummy_data_param_->::caffe::DummyDataParameter::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(accuracy_param_ != NULL);
      accuracy_param_->::caffe::AccuracyParameter::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(hinge_loss_param_ != NULL);
      hinge_loss_param_->::caffe::HingeLossParameter::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(relu_param_ != NULL);
      relu_param_->::caffe::ReLUParameter::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(slice_param_ != NULL);
      slice_param_->::caffe::SliceParameter::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(mvn_param_ != NULL);
      mvn_param_->::caffe::MVNParameter::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(transform_param_ != NULL);
      transform_param_->::caffe::TransformationParameter::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tanh_param_ != NULL);
      tanh_param_->::caffe::TanHParameter::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(sigmoid_param_ != NULL);
      sigmoid_param_->::caffe::SigmoidParameter::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(softmax_param_ != NULL);
      softmax_param_->::caffe::SoftmaxParameter::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(contrastive_loss_param_ != NULL);
      contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(exp_param_ != NULL);
      exp_param_->::caffe::ExpParameter::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(loss_param_ != NULL);
      loss_param_->::caffe::LossParameter::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V1LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V1LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.V0LayerParameter layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string bottom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom(this->bottom_size() - 1).data(),
            static_cast<int>(this->bottom(this->bottom_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.bottom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string top = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top(this->top_size() - 1).data(),
            static_cast<int>(this->top(this->top_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.top");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.V1LayerParameter.LayerType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::caffe::V1LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float blobs_lr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_blobs_lr())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weight_decay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_weight_decay())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConcatParameter concat_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concat_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ConvolutionParameter convolution_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DataParameter data_param = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DropoutParameter dropout_param = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropout_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ImageDataParameter image_data_param = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infogain_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.InnerProductParameter inner_product_param = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inner_product_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LRNParameter lrn_param = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PoolingParameter pooling_param = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.WindowDataParameter window_data_param = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.PowerParameter power_param = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MemoryDataParameter memory_data_param = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ArgMaxParameter argmax_param = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.EltwiseParameter eltwise_param = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eltwise_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ThresholdParameter threshold_param = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threshold_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.DummyDataParameter dummy_data_param = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dummy_data_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.AccuracyParameter accuracy_param = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accuracy_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HingeLossParameter hinge_loss_param = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hinge_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ReLUParameter relu_param = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SliceParameter slice_param = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule include = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_include()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.NetStateRule exclude = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exclude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.MVNParameter mvn_param = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvn_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float loss_weight = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285u, input, this->mutable_loss_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_loss_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TransformationParameter transform_param = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.TanHParameter tanh_param = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tanh_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SigmoidParameter sigmoid_param = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.SoftmaxParameter softmax_param = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contrastive_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.ExpParameter exp_param = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.LossParameter loss_param = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string param = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 8010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            static_cast<int>(this->param(this->param_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V1LayerParameter.param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 8016 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V1LayerParameter_DimCheckMode_IsValid(value)) {
            add_blob_share_mode(static_cast< ::caffe::V1LayerParameter_DimCheckMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1002, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 8018 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1002,
                 ::caffe::V1LayerParameter_DimCheckMode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_blob_share_mode())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V1LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V1LayerParameter)
  return false;
#undef DO_
}

void V1LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V1LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->layer_, output);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bottom(i), output);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), static_cast<int>(this->top(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top(i), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blobs(static_cast<int>(i)), output);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 8;
  for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->weight_decay(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->concat_param_, output);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->convolution_param_, output);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->data_param_, output);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dropout_param_, output);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->hdf5_data_param_, output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hdf5_output_param_, output);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->image_data_param_, output);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->infogain_loss_param_, output);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->inner_product_param_, output);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lrn_param_, output);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->pooling_param_, output);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->window_data_param_, output);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->power_param_, output);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->memory_data_param_, output);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->argmax_param_, output);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->eltwise_param_, output);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->threshold_param_, output);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->dummy_data_param_, output);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->accuracy_param_, output);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->hinge_loss_param_, output);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->relu_param_, output);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->slice_param_, output);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->include(static_cast<int>(i)), output);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->exclude(static_cast<int>(i)), output);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->mvn_param_, output);
  }

  // repeated float loss_weight = 35;
  for (int i = 0, n = this->loss_weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->loss_weight(i), output);
  }

  // optional .caffe.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->transform_param_, output);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->tanh_param_, output);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->sigmoid_param_, output);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->softmax_param_, output);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->contrastive_loss_param_, output);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->exp_param_, output);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->loss_param_, output);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), static_cast<int>(this->param(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1001, this->param(i), output);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0, n = this->blob_share_mode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->blob_share_mode(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V1LayerParameter)
}

::google::protobuf::uint8* V1LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V1LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->layer_, deterministic, target);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom(i).data(), static_cast<int>(this->bottom(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.bottom");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->bottom(i), target);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->top_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top(i).data(), static_cast<int>(this->top(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.top");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top(i), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .caffe.BlobProto blobs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->blobs(static_cast<int>(i)), deterministic, target);
  }

  // repeated float blobs_lr = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->blobs_lr_, target);

  // repeated float weight_decay = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->weight_decay_, target);

  cached_has_bits = _has_bits_[0];
  // optional .caffe.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->concat_param_, deterministic, target);
  }

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->convolution_param_, deterministic, target);
  }

  // optional .caffe.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->data_param_, deterministic, target);
  }

  // optional .caffe.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->dropout_param_, deterministic, target);
  }

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->hdf5_data_param_, deterministic, target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hdf5_output_param_, deterministic, target);
  }

  // optional .caffe.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->image_data_param_, deterministic, target);
  }

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->infogain_loss_param_, deterministic, target);
  }

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->inner_product_param_, deterministic, target);
  }

  // optional .caffe.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->lrn_param_, deterministic, target);
  }

  // optional .caffe.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->pooling_param_, deterministic, target);
  }

  // optional .caffe.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->window_data_param_, deterministic, target);
  }

  // optional .caffe.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->power_param_, deterministic, target);
  }

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->memory_data_param_, deterministic, target);
  }

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->argmax_param_, deterministic, target);
  }

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->eltwise_param_, deterministic, target);
  }

  // optional .caffe.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->threshold_param_, deterministic, target);
  }

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->dummy_data_param_, deterministic, target);
  }

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->accuracy_param_, deterministic, target);
  }

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->hinge_loss_param_, deterministic, target);
  }

  // optional .caffe.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->relu_param_, deterministic, target);
  }

  // optional .caffe.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->slice_param_, deterministic, target);
  }

  // repeated .caffe.NetStateRule include = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->include_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->include(static_cast<int>(i)), deterministic, target);
  }

  // repeated .caffe.NetStateRule exclude = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exclude_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, this->exclude(static_cast<int>(i)), deterministic, target);
  }

  // optional .caffe.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->mvn_param_, deterministic, target);
  }

  // repeated float loss_weight = 35;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(35, this->loss_weight_, target);

  // optional .caffe.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->transform_param_, deterministic, target);
  }

  // optional .caffe.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->tanh_param_, deterministic, target);
  }

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->sigmoid_param_, deterministic, target);
  }

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->softmax_param_, deterministic, target);
  }

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->contrastive_loss_param_, deterministic, target);
  }

  // optional .caffe.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->exp_param_, deterministic, target);
  }

  // optional .caffe.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->loss_param_, deterministic, target);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), static_cast<int>(this->param(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V1LayerParameter.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1001, this->param(i), target);
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1002, this->blob_share_mode_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V1LayerParameter)
  return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V1LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string bottom = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bottom_size());
  for (int i = 0, n = this->bottom_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->top_size());
  for (int i = 0, n = this->top_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top(i));
  }

  // repeated .caffe.BlobProto blobs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(static_cast<int>(i)));
    }
  }

  // repeated float blobs_lr = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  // repeated .caffe.NetStateRule include = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->include_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->include(static_cast<int>(i)));
    }
  }

  // repeated .caffe.NetStateRule exclude = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->exclude_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exclude(static_cast<int>(i)));
    }
  }

  // repeated float loss_weight = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->loss_weight_size());
    total_size += data_size;
  }

  // repeated string param = 1001;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->param_size());
  for (int i = 0, n = this->param_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->blob_share_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blob_share_mode(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe.V0LayerParameter layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->layer_);
    }

    // optional .caffe.ConcatParameter concat_param = 9;
    if (has_concat_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->concat_param_);
    }

    // optional .caffe.ConvolutionParameter convolution_param = 10;
    if (has_convolution_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->convolution_param_);
    }

    // optional .caffe.DataParameter data_param = 11;
    if (has_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_param_);
    }

    // optional .caffe.DropoutParameter dropout_param = 12;
    if (has_dropout_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dropout_param_);
    }

    // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
    if (has_hdf5_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_data_param_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
    if (has_hdf5_output_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .caffe.ImageDataParameter image_data_param = 15;
    if (has_image_data_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_data_param_);
    }

    // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
    if (has_infogain_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->infogain_loss_param_);
    }

    // optional .caffe.InnerProductParameter inner_product_param = 17;
    if (has_inner_product_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inner_product_param_);
    }

    // optional .caffe.LRNParameter lrn_param = 18;
    if (has_lrn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lrn_param_);
    }

    // optional .caffe.PoolingParameter pooling_param = 19;
    if (has_pooling_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pooling_param_);
    }

    // optional .caffe.WindowDataParameter window_data_param = 20;
    if (has_window_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->window_data_param_);
    }

    // optional .caffe.PowerParameter power_param = 21;
    if (has_power_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_param_);
    }

    // optional .caffe.MemoryDataParameter memory_data_param = 22;
    if (has_memory_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->memory_data_param_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .caffe.ArgMaxParameter argmax_param = 23;
    if (has_argmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->argmax_param_);
    }

    // optional .caffe.EltwiseParameter eltwise_param = 24;
    if (has_eltwise_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eltwise_param_);
    }

    // optional .caffe.ThresholdParameter threshold_param = 25;
    if (has_threshold_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->threshold_param_);
    }

    // optional .caffe.DummyDataParameter dummy_data_param = 26;
    if (has_dummy_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dummy_data_param_);
    }

    // optional .caffe.AccuracyParameter accuracy_param = 27;
    if (has_accuracy_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accuracy_param_);
    }

    // optional .caffe.HingeLossParameter hinge_loss_param = 29;
    if (has_hinge_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hinge_loss_param_);
    }

    // optional .caffe.ReLUParameter relu_param = 30;
    if (has_relu_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relu_param_);
    }

    // optional .caffe.SliceParameter slice_param = 31;
    if (has_slice_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_param_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .caffe.MVNParameter mvn_param = 34;
    if (has_mvn_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mvn_param_);
    }

    // optional .caffe.TransformationParameter transform_param = 36;
    if (has_transform_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_param_);
    }

    // optional .caffe.TanHParameter tanh_param = 37;
    if (has_tanh_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tanh_param_);
    }

    // optional .caffe.SigmoidParameter sigmoid_param = 38;
    if (has_sigmoid_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sigmoid_param_);
    }

    // optional .caffe.SoftmaxParameter softmax_param = 39;
    if (has_softmax_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->softmax_param_);
    }

    // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
    if (has_contrastive_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->contrastive_loss_param_);
    }

    // optional .caffe.ExpParameter exp_param = 41;
    if (has_exp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->exp_param_);
    }

    // optional .caffe.LossParameter loss_param = 42;
    if (has_loss_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_param_);
    }

  }
  // optional .caffe.V1LayerParameter.LayerType type = 5;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V1LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V1LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V1LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V1LayerParameter)
    MergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_layer()->::caffe::V0LayerParameter::MergeFrom(from.layer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_concat_param()->::caffe::ConcatParameter::MergeFrom(from.concat_param());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_convolution_param()->::caffe::ConvolutionParameter::MergeFrom(from.convolution_param());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_data_param()->::caffe::DataParameter::MergeFrom(from.data_param());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dropout_param()->::caffe::DropoutParameter::MergeFrom(from.dropout_param());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hdf5_data_param()->::caffe::HDF5DataParameter::MergeFrom(from.hdf5_data_param());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_image_data_param()->::caffe::ImageDataParameter::MergeFrom(from.image_data_param());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_infogain_loss_param()->::caffe::InfogainLossParameter::MergeFrom(from.infogain_loss_param());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_inner_product_param()->::caffe::InnerProductParameter::MergeFrom(from.inner_product_param());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_lrn_param()->::caffe::LRNParameter::MergeFrom(from.lrn_param());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_pooling_param()->::caffe::PoolingParameter::MergeFrom(from.pooling_param());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_window_data_param()->::caffe::WindowDataParameter::MergeFrom(from.window_data_param());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_power_param()->::caffe::PowerParameter::MergeFrom(from.power_param());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_memory_data_param()->::caffe::MemoryDataParameter::MergeFrom(from.memory_data_param());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_argmax_param()->::caffe::ArgMaxParameter::MergeFrom(from.argmax_param());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_eltwise_param()->::caffe::EltwiseParameter::MergeFrom(from.eltwise_param());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_threshold_param()->::caffe::ThresholdParameter::MergeFrom(from.threshold_param());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_dummy_data_param()->::caffe::DummyDataParameter::MergeFrom(from.dummy_data_param());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_accuracy_param()->::caffe::AccuracyParameter::MergeFrom(from.accuracy_param());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_hinge_loss_param()->::caffe::HingeLossParameter::MergeFrom(from.hinge_loss_param());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_relu_param()->::caffe::ReLUParameter::MergeFrom(from.relu_param());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_slice_param()->::caffe::SliceParameter::MergeFrom(from.slice_param());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_mvn_param()->::caffe::MVNParameter::MergeFrom(from.mvn_param());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_transform_param()->::caffe::TransformationParameter::MergeFrom(from.transform_param());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_tanh_param()->::caffe::TanHParameter::MergeFrom(from.tanh_param());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_sigmoid_param()->::caffe::SigmoidParameter::MergeFrom(from.sigmoid_param());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_softmax_param()->::caffe::SoftmaxParameter::MergeFrom(from.softmax_param());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_contrastive_loss_param()->::caffe::ContrastiveLossParameter::MergeFrom(from.contrastive_loss_param());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_exp_param()->::caffe::ExpParameter::MergeFrom(from.exp_param());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_loss_param()->::caffe::LossParameter::MergeFrom(from.loss_param());
    }
  }
  if (from.has_type()) {
    set_type(from.type());
  }
}

void V1LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {
  return true;
}

void V1LayerParameter::Swap(V1LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  using std::swap;
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blob_share_mode_.InternalSwap(&other->blob_share_mode_);
  name_.Swap(&other->name_);
  swap(layer_, other->layer_);
  swap(concat_param_, other->concat_param_);
  swap(convolution_param_, other->convolution_param_);
  swap(data_param_, other->data_param_);
  swap(dropout_param_, other->dropout_param_);
  swap(hdf5_data_param_, other->hdf5_data_param_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(image_data_param_, other->image_data_param_);
  swap(infogain_loss_param_, other->infogain_loss_param_);
  swap(inner_product_param_, other->inner_product_param_);
  swap(lrn_param_, other->lrn_param_);
  swap(pooling_param_, other->pooling_param_);
  swap(window_data_param_, other->window_data_param_);
  swap(power_param_, other->power_param_);
  swap(memory_data_param_, other->memory_data_param_);
  swap(argmax_param_, other->argmax_param_);
  swap(eltwise_param_, other->eltwise_param_);
  swap(threshold_param_, other->threshold_param_);
  swap(dummy_data_param_, other->dummy_data_param_);
  swap(accuracy_param_, other->accuracy_param_);
  swap(hinge_loss_param_, other->hinge_loss_param_);
  swap(relu_param_, other->relu_param_);
  swap(slice_param_, other->slice_param_);
  swap(mvn_param_, other->mvn_param_);
  swap(transform_param_, other->transform_param_);
  swap(tanh_param_, other->tanh_param_);
  swap(sigmoid_param_, other->sigmoid_param_);
  swap(softmax_param_, other->softmax_param_);
  swap(contrastive_loss_param_, other->contrastive_loss_param_);
  swap(exp_param_, other->exp_param_);
  swap(loss_param_, other->loss_param_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V1LayerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V1LayerParameter

// repeated string bottom = 2;
int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#if LANG_CXX11
void V1LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#endif
void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
int V1LayerParameter::top_size() const {
  return top_.size();
}
void V1LayerParameter::clear_top() {
  top_.Clear();
}
const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#if LANG_CXX11
void V1LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#endif
void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena();
}
void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
#if LANG_CXX11
void V1LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V1LayerParameter.name)
}
#endif
void V1LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
int V1LayerParameter::include_size() const {
  return include_.size();
}
void V1LayerParameter::clear_include() {
  include_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
bool V1LayerParameter::has_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V1LayerParameter::set_has_type() {
  _has_bits_[1] |= 0x00000001u;
}
void V1LayerParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000001u;
}
void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
int V1LayerParameter::param_size() const {
  return param_.size();
}
void V1LayerParameter::clear_param() {
  param_.Clear();
}
const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void V1LayerParameter::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#if LANG_CXX11
void V1LayerParameter::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#endif
void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
}
void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00100000u;
}
void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  const ::caffe::AccuracyParameter* p = accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AccuracyParameter*>(
      &::caffe::_AccuracyParameter_default_instance_);
}
::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  const ::caffe::ArgMaxParameter* p = argmax_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ArgMaxParameter*>(
      &::caffe::_ArgMaxParameter_default_instance_);
}
::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000004u;
}
void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
}
void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x20000000u;
}
void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  const ::caffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ContrastiveLossParameter*>(
      &::caffe::_ContrastiveLossParameter_default_instance_);
}
::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
}
void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000008u;
}
void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000010u;
}
void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000010u;
}
void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
}
void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000020u;
}
void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  const ::caffe::DummyDataParameter* p = dummy_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DummyDataParameter*>(
      &::caffe::_DummyDataParameter_default_instance_);
}
::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  const ::caffe::EltwiseParameter* p = eltwise_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseParameter*>(
      &::caffe::_EltwiseParameter_default_instance_);
}
::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  const ::caffe::ExpParameter* p = exp_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ExpParameter*>(
      &::caffe::_ExpParameter_default_instance_);
}
::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
}
void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00000040u;
}
void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
}
void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00200000u;
}
void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  const ::caffe::HingeLossParameter* p = hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HingeLossParameter*>(
      &::caffe::_HingeLossParameter_default_instance_);
}
::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
}
void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00000100u;
}
void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
}
void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
}
void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
}
void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  const ::caffe::MVNParameter* p = mvn_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MVNParameter*>(
      &::caffe::_MVNParameter_default_instance_);
}
::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
}
void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00001000u;
}
void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V1LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
void V1LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V1LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
}
void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x08000000u;
}
void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
}
void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x10000000u;
}
void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  const ::caffe::SoftmaxParameter* p = softmax_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxParameter*>(
      &::caffe::_SoftmaxParameter_default_instance_);
}
::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V1LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00800000u;
}
void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  const ::caffe::SliceParameter* p = slice_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SliceParameter*>(
      &::caffe::_SliceParameter_default_instance_);
}
::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  const ::caffe::TanHParameter* p = tanh_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TanHParameter*>(
      &::caffe::_TanHParameter_default_instance_);
}
::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
}
void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x00040000u;
}
void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  const ::caffe::ThresholdParameter* p = threshold_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ThresholdParameter*>(
      &::caffe::_ThresholdParameter_default_instance_);
}
::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
}
void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x00002000u;
}
void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V1LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x02000000u;
}
void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x02000000u;
}
void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  const ::caffe::TransformationParameter* p = transform_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TransformationParameter*>(
      &::caffe::_TransformationParameter_default_instance_);
}
::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V1LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  const ::caffe::LossParameter* p = loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LossParameter*>(
      &::caffe::_LossParameter_default_instance_);
}
::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
bool V1LayerParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V1LayerParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void V1LayerParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  const ::caffe::V0LayerParameter* p = layer_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::V0LayerParameter*>(
      &::caffe::_V0LayerParameter_default_instance_);
}
::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> V0LayerParameter::_default_det_crop_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int V0LayerParameter::kNameFieldNumber;
const int V0LayerParameter::kTypeFieldNumber;
const int V0LayerParameter::kNumOutputFieldNumber;
const int V0LayerParameter::kBiastermFieldNumber;
const int V0LayerParameter::kWeightFillerFieldNumber;
const int V0LayerParameter::kBiasFillerFieldNumber;
const int V0LayerParameter::kPadFieldNumber;
const int V0LayerParameter::kKernelsizeFieldNumber;
const int V0LayerParameter::kGroupFieldNumber;
const int V0LayerParameter::kStrideFieldNumber;
const int V0LayerParameter::kPoolFieldNumber;
const int V0LayerParameter::kDropoutRatioFieldNumber;
const int V0LayerParameter::kLocalSizeFieldNumber;
const int V0LayerParameter::kAlphaFieldNumber;
const int V0LayerParameter::kBetaFieldNumber;
const int V0LayerParameter::kKFieldNumber;
const int V0LayerParameter::kSourceFieldNumber;
const int V0LayerParameter::kScaleFieldNumber;
const int V0LayerParameter::kMeanfileFieldNumber;
const int V0LayerParameter::kBatchsizeFieldNumber;
const int V0LayerParameter::kCropsizeFieldNumber;
const int V0LayerParameter::kMirrorFieldNumber;
const int V0LayerParameter::kBlobsFieldNumber;
const int V0LayerParameter::kBlobsLrFieldNumber;
const int V0LayerParameter::kWeightDecayFieldNumber;
const int V0LayerParameter::kRandSkipFieldNumber;
const int V0LayerParameter::kDetFgThresholdFieldNumber;
const int V0LayerParameter::kDetBgThresholdFieldNumber;
const int V0LayerParameter::kDetFgFractionFieldNumber;
const int V0LayerParameter::kDetContextPadFieldNumber;
const int V0LayerParameter::kDetCropModeFieldNumber;
const int V0LayerParameter::kNewNumFieldNumber;
const int V0LayerParameter::kNewChannelsFieldNumber;
const int V0LayerParameter::kNewHeightFieldNumber;
const int V0LayerParameter::kNewWidthFieldNumber;
const int V0LayerParameter::kShuffleImagesFieldNumber;
const int V0LayerParameter::kConcatDimFieldNumber;
const int V0LayerParameter::kHdf5OutputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

V0LayerParameter::V0LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.V0LayerParameter)
}
V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meanfile()) {
    meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
  }
  det_crop_mode_.UnsafeSetDefault(&V0LayerParameter::_default_det_crop_mode_.get());
  if (from.has_det_crop_mode()) {
    det_crop_mode_.AssignWithDefault(&V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
  }
  if (from.has_weight_filler()) {
    weight_filler_ = new ::caffe::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = NULL;
  }
  if (from.has_bias_filler()) {
    bias_filler_ = new ::caffe::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = NULL;
  }
  if (from.has_hdf5_output_param()) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = NULL;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&det_fg_fraction_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(det_fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:caffe.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.UnsafeSetDefault(&V0LayerParameter::_default_det_crop_mode_.get());
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_height_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(new_height_));
  concat_dim_ = 1u;
  biasterm_ = true;
  group_ = 1u;
  stride_ = 1u;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  scale_ = 1;
  k_ = 1;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
  _cached_size_ = 0;
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:caffe.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
}

void V0LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V0LayerParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const V0LayerParameter& V0LayerParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

V0LayerParameter* V0LayerParameter::New(::google::protobuf::Arena* arena) const {
  V0LayerParameter* n = new V0LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.V0LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!meanfile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meanfile_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!det_crop_mode_.IsDefault(&V0LayerParameter::_default_det_crop_mode_.get()));
      (*det_crop_mode_.UnsafeRawStringPointer())->assign(*&V0LayerParameter::_default_det_crop_mode_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(weight_filler_ != NULL);
      weight_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bias_filler_ != NULL);
      bias_filler_->::caffe::FillerParameter::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hdf5_output_param_ != NULL);
      hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&shuffle_images_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_height_) -
        reinterpret_cast<char*>(&shuffle_images_)) + sizeof(new_height_));
    concat_dim_ = 1u;
    biasterm_ = true;
  }
  if (cached_has_bits & 4278190080u) {
    group_ = 1u;
    stride_ = 1u;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    scale_ = 1;
    k_ = 1;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 7u) {
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool V0LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.V0LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool biasterm = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_biasterm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biasterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter weight_filler = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.FillerParameter bias_filler = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pad = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kernelsize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_kernelsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernelsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stride = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe::V0LayerParameter_PoolMethod_IsValid(value)) {
            set_pool(static_cast< ::caffe::V0LayerParameter_PoolMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_ratio = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_dropout_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_size = 13 [default = 5];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_local_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 14 [default = 1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float beta = 15 [default = 0.75];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meanfile = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meanfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meanfile().data(), static_cast<int>(this->meanfile().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.meanfile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batchsize = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_batchsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cropsize = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_cropsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mirror = 21 [default = false];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_mirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float k = 22 [default = 1];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe.BlobProto blobs = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float blobs_lr = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 413u, input, this->mutable_blobs_lr())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_blobs_lr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weight_decay = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 421 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 421u, input, this->mutable_weight_decay())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight_decay())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rand_skip = 53 [default = 0];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_rand_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rand_skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {
          set_has_det_fg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 445 & 0xFF */)) {
          set_has_det_bg_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_bg_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 453 & 0xFF */)) {
          set_has_det_fg_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &det_fg_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 det_context_pad = 58 [default = 0];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_det_context_pad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &det_context_pad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string det_crop_mode = 59 [default = "warp"];
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_det_crop_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe.V0LayerParameter.det_crop_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_num = 60 [default = 0];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_new_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_channels = 61 [default = 0];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_new_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_height = 62 [default = 0];
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_width = 63 [default = 0];
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle_images = 64 [default = false];
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_shuffle_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 concat_dim = 65 [default = 1];
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_concat_dim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &concat_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 8010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdf5_output_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.V0LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.V0LayerParameter)
  return false;
#undef DO_
}

void V0LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.V0LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_output(), output);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->biasterm(), output);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->weight_filler_, output);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bias_filler_, output);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pad(), output);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kernelsize(), output);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->group(), output);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stride(), output);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pool(), output);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_ratio(), output);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->local_size(), output);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->alpha(), output);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->beta(), output);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->source(), output);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->scale(), output);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), static_cast<int>(this->meanfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->meanfile(), output);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->batchsize(), output);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cropsize(), output);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mirror(), output);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->k(), output);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->blobs(static_cast<int>(i)), output);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0, n = this->blobs_lr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      51, this->blobs_lr(i), output);
  }

  // repeated float weight_decay = 52;
  for (int i = 0, n = this->weight_decay_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      52, this->weight_decay(i), output);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->rand_skip(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->det_fg_threshold(), output);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->det_bg_threshold(), output);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->det_fg_fraction(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->det_context_pad(), output);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->det_crop_mode(), output);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->new_num(), output);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->new_channels(), output);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->new_height(), output);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->new_width(), output);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shuffle_images(), output);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->concat_dim(), output);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, *this->hdf5_output_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.V0LayerParameter)
}

::google::protobuf::uint8* V0LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.V0LayerParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->biasterm(), target);
  }

  // optional .caffe.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->weight_filler_, deterministic, target);
  }

  // optional .caffe.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->bias_filler_, deterministic, target);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->stride(), target);
  }

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->beta(), target);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->scale(), target);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meanfile().data(), static_cast<int>(this->meanfile().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.meanfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->k(), target);
  }

  // repeated .caffe.BlobProto blobs = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, this->blobs(static_cast<int>(i)), deterministic, target);
  }

  // repeated float blobs_lr = 51;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(51, this->blobs_lr_, target);

  // repeated float weight_decay = 52;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(52, this->weight_decay_, target);

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->rand_skip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->det_fg_fraction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->det_crop_mode().data(), static_cast<int>(this->det_crop_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe.V0LayerParameter.det_crop_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->concat_dim(), target);
  }

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1001, *this->hdf5_output_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.V0LayerParameter)
  return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.V0LayerParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe.BlobProto blobs = 50;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blobs(static_cast<int>(i)));
    }
  }

  // repeated float blobs_lr = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->weight_decay_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string source = 16;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string meanfile = 18;
    if (has_meanfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meanfile());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (has_det_crop_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->det_crop_mode());
    }

    // optional .caffe.FillerParameter weight_filler = 5;
    if (has_weight_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_filler_);
    }

    // optional .caffe.FillerParameter bias_filler = 6;
    if (has_bias_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_filler_);
    }

    // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
    if (has_hdf5_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdf5_output_param_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 num_output = 3;
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional uint32 pad = 7 [default = 0];
    if (has_pad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad());
    }

    // optional uint32 kernelsize = 8;
    if (has_kernelsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernelsize());
    }

    // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool());
    }

    // optional uint32 batchsize = 19;
    if (has_batchsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (has_cropsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropsize());
    }

    // optional int32 new_width = 63 [default = 0];
    if (has_new_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional bool mirror = 21 [default = false];
    if (has_mirror()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool shuffle_images = 64 [default = false];
    if (has_shuffle_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 rand_skip = 53 [default = 0];
    if (has_rand_skip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rand_skip());
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (has_det_context_pad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->det_context_pad());
    }

    // optional int32 new_num = 60 [default = 0];
    if (has_new_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_num());
    }

    // optional int32 new_channels = 61 [default = 0];
    if (has_new_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (has_new_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (has_concat_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->concat_dim());
    }

    // optional bool biasterm = 4 [default = true];
    if (has_biasterm()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 group = 9 [default = 1];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (has_dropout_ratio()) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // optional float scale = 17 [default = 1];
    if (has_scale()) {
      total_size += 2 + 4;
    }

    // optional float k = 22 [default = 1];
    if (has_k()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 7u) {
    // optional float det_fg_threshold = 54 [default = 0.5];
    if (has_det_fg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (has_det_bg_threshold()) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (has_det_fg_fraction()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V0LayerParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const V0LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.V0LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.V0LayerParameter)
    MergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_meanfile();
      meanfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_det_crop_mode();
      det_crop_mode_.AssignWithDefault(&V0LayerParameter::_default_det_crop_mode_.get(), from.det_crop_mode_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_weight_filler()->::caffe::FillerParameter::MergeFrom(from.weight_filler());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_bias_filler()->::caffe::FillerParameter::MergeFrom(from.bias_filler());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_hdf5_output_param()->::caffe::HDF5OutputParameter::MergeFrom(from.hdf5_output_param());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernelsize_ = from.kernelsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00001000u) {
      batchsize_ = from.batchsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      cropsize_ = from.cropsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      shuffle_images_ = from.shuffle_images_;
    }
    if (cached_has_bits & 0x00020000u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00040000u) {
      det_context_pad_ = from.det_context_pad_;
    }
    if (cached_has_bits & 0x00080000u) {
      new_num_ = from.new_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      new_channels_ = from.new_channels_;
    }
    if (cached_has_bits & 0x00200000u) {
      new_height_ = from.new_height_;
    }
    if (cached_has_bits & 0x00400000u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00800000u) {
      biasterm_ = from.biasterm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x02000000u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x04000000u) {
      dropout_ratio_ = from.dropout_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x10000000u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x20000000u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x40000000u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      det_fg_threshold_ = from.det_fg_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      det_bg_threshold_ = from.det_bg_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      det_fg_fraction_ = from.det_fg_fraction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void V0LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {
  return true;
}

void V0LayerParameter::Swap(V0LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  using std::swap;
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  source_.Swap(&other->source_);
  meanfile_.Swap(&other->meanfile_);
  det_crop_mode_.Swap(&other->det_crop_mode_);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(num_output_, other->num_output_);
  swap(pad_, other->pad_);
  swap(kernelsize_, other->kernelsize_);
  swap(pool_, other->pool_);
  swap(batchsize_, other->batchsize_);
  swap(cropsize_, other->cropsize_);
  swap(new_width_, other->new_width_);
  swap(mirror_, other->mirror_);
  swap(shuffle_images_, other->shuffle_images_);
  swap(rand_skip_, other->rand_skip_);
  swap(det_context_pad_, other->det_context_pad_);
  swap(new_num_, other->new_num_);
  swap(new_channels_, other->new_channels_);
  swap(new_height_, other->new_height_);
  swap(concat_dim_, other->concat_dim_);
  swap(biasterm_, other->biasterm_);
  swap(group_, other->group_);
  swap(stride_, other->stride_);
  swap(dropout_ratio_, other->dropout_ratio_);
  swap(local_size_, other->local_size_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(scale_, other->scale_);
  swap(k_, other->k_);
  swap(det_fg_threshold_, other->det_fg_threshold_);
  swap(det_bg_threshold_, other->det_bg_threshold_);
  swap(det_fg_fraction_, other->det_fg_fraction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata V0LayerParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// V0LayerParameter

// optional string name = 1;
bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena();
}
void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
#if LANG_CXX11
void V0LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
#endif
void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena();
}
void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
#if LANG_CXX11
void V0LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
#endif
void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000100u;
}
void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000100u;
}
void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00800000u;
}
void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00800000u;
}
void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000200u;
}
void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000400u;
}
void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000400u;
}
void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x01000000u;
}
void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x01000000u;
}
void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x02000000u;
}
void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x02000000u;
}
void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000800u;
}
void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x08000000u;
}
void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x08000000u;
}
void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x10000000u;
}
void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x10000000u;
}
void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x20000000u;
}
void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x20000000u;
}
void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x80000000u;
}
void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x80000000u;
}
void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena();
}
void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
#if LANG_CXX11
void V0LayerParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
#endif
void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x40000000u;
}
void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x40000000u;
}
void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000008u;
}
void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000008u;
}
void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena();
}
void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
#if LANG_CXX11
void V0LayerParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
#endif
void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00001000u;
}
void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00001000u;
}
void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00002000u;
}
void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00002000u;
}
void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00008000u;
}
void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00008000u;
}
void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00020000u;
}
void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00020000u;
}
void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[1] |= 0x00000001u;
}
void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[1] &= ~0x00000001u;
}
void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[1] |= 0x00000002u;
}
void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[1] &= ~0x00000002u;
}
void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[1] |= 0x00000004u;
}
void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[1] &= ~0x00000004u;
}
void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x00040000u;
}
void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x00040000u;
}
void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
  clear_has_det_crop_mode();
}
const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena();
}
void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
#if LANG_CXX11
void V0LayerParameter::set_det_crop_mode(::std::string&& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(
    &V0LayerParameter::_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
#endif
void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&V0LayerParameter::_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(&V0LayerParameter::_default_det_crop_mode_.get());
}
void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(&V0LayerParameter::_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x00080000u;
}
void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x00080000u;
}
void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void V0LayerParameter::set_has_new_channels() {
  _has_bits_[0] |= 0x00100000u;
}
void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[0] &= ~0x00100000u;
}
void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void V0LayerParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00200000u;
}
void V0LayerParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00200000u;
}
void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void V0LayerParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00004000u;
}
void V0LayerParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00004000u;
}
void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[0] |= 0x00010000u;
}
void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[0] &= ~0x00010000u;
}
void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00400000u;
}
void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00400000u;
}
void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpsampleParameter::kScaleFieldNumber;
const int UpsampleParameter::kScaleHFieldNumber;
const int UpsampleParameter::kScaleWFieldNumber;
const int UpsampleParameter::kPadOutHFieldNumber;
const int UpsampleParameter::kPadOutWFieldNumber;
const int UpsampleParameter::kUpsampleHFieldNumber;
const int UpsampleParameter::kUpsampleWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpsampleParameter::UpsampleParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.UpsampleParameter)
}
UpsampleParameter::UpsampleParameter(const UpsampleParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_h_, &from.scale_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&scale_h_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:caffe.UpsampleParameter)
}

void UpsampleParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scale_h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upsample_w_) -
      reinterpret_cast<char*>(&scale_h_)) + sizeof(upsample_w_));
  scale_ = 2u;
}

UpsampleParameter::~UpsampleParameter() {
  // @@protoc_insertion_point(destructor:caffe.UpsampleParameter)
  SharedDtor();
}

void UpsampleParameter::SharedDtor() {
}

void UpsampleParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpsampleParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpsampleParameter& UpsampleParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpsampleParameter* UpsampleParameter::New(::google::protobuf::Arena* arena) const {
  UpsampleParameter* n = new UpsampleParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpsampleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.UpsampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&scale_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upsample_w_) -
        reinterpret_cast<char*>(&scale_h_)) + sizeof(upsample_w_));
    scale_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpsampleParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.UpsampleParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 scale = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scale_h = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scale_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scale_w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_scale_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pad_out_h = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pad_out_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_out_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pad_out_w = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pad_out_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_out_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upsample_h = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_upsample_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upsample_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upsample_w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_upsample_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upsample_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.UpsampleParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.UpsampleParameter)
  return false;
#undef DO_
}

void UpsampleParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.UpsampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 scale = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scale(), output);
  }

  // optional uint32 scale_h = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scale_h(), output);
  }

  // optional uint32 scale_w = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scale_w(), output);
  }

  // optional bool pad_out_h = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pad_out_h(), output);
  }

  // optional bool pad_out_w = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pad_out_w(), output);
  }

  // optional uint32 upsample_h = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upsample_h(), output);
  }

  // optional uint32 upsample_w = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->upsample_w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.UpsampleParameter)
}

::google::protobuf::uint8* UpsampleParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.UpsampleParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 scale = 1 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scale(), target);
  }

  // optional uint32 scale_h = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scale_h(), target);
  }

  // optional uint32 scale_w = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scale_w(), target);
  }

  // optional bool pad_out_h = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pad_out_h(), target);
  }

  // optional bool pad_out_w = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pad_out_w(), target);
  }

  // optional uint32 upsample_h = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upsample_h(), target);
  }

  // optional uint32 upsample_w = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->upsample_w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.UpsampleParameter)
  return target;
}

size_t UpsampleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.UpsampleParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 scale_h = 2;
    if (has_scale_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale_h());
    }

    // optional uint32 scale_w = 3;
    if (has_scale_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale_w());
    }

    // optional bool pad_out_h = 4 [default = false];
    if (has_pad_out_h()) {
      total_size += 1 + 1;
    }

    // optional bool pad_out_w = 5 [default = false];
    if (has_pad_out_w()) {
      total_size += 1 + 1;
    }

    // optional uint32 upsample_h = 6;
    if (has_upsample_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upsample_h());
    }

    // optional uint32 upsample_w = 7;
    if (has_upsample_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upsample_w());
    }

    // optional uint32 scale = 1 [default = 2];
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpsampleParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.UpsampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const UpsampleParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpsampleParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.UpsampleParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.UpsampleParameter)
    MergeFrom(*source);
  }
}

void UpsampleParameter::MergeFrom(const UpsampleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.UpsampleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      scale_h_ = from.scale_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_w_ = from.scale_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_out_h_ = from.pad_out_h_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_out_w_ = from.pad_out_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      upsample_h_ = from.upsample_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      upsample_w_ = from.upsample_w_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpsampleParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.UpsampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpsampleParameter::CopyFrom(const UpsampleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.UpsampleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsampleParameter::IsInitialized() const {
  return true;
}

void UpsampleParameter::Swap(UpsampleParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpsampleParameter::InternalSwap(UpsampleParameter* other) {
  using std::swap;
  swap(scale_h_, other->scale_h_);
  swap(scale_w_, other->scale_w_);
  swap(pad_out_h_, other->pad_out_h_);
  swap(pad_out_w_, other->pad_out_w_);
  swap(upsample_h_, other->upsample_h_);
  swap(upsample_w_, other->upsample_w_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpsampleParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpsampleParameter

// optional uint32 scale = 1 [default = 2];
bool UpsampleParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UpsampleParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
void UpsampleParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
void UpsampleParameter::clear_scale() {
  scale_ = 2u;
  clear_has_scale();
}
::google::protobuf::uint32 UpsampleParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.scale)
  return scale_;
}
void UpsampleParameter::set_scale(::google::protobuf::uint32 value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.scale)
}

// optional uint32 scale_h = 2;
bool UpsampleParameter::has_scale_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpsampleParameter::set_has_scale_h() {
  _has_bits_[0] |= 0x00000001u;
}
void UpsampleParameter::clear_has_scale_h() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpsampleParameter::clear_scale_h() {
  scale_h_ = 0u;
  clear_has_scale_h();
}
::google::protobuf::uint32 UpsampleParameter::scale_h() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.scale_h)
  return scale_h_;
}
void UpsampleParameter::set_scale_h(::google::protobuf::uint32 value) {
  set_has_scale_h();
  scale_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.scale_h)
}

// optional uint32 scale_w = 3;
bool UpsampleParameter::has_scale_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpsampleParameter::set_has_scale_w() {
  _has_bits_[0] |= 0x00000002u;
}
void UpsampleParameter::clear_has_scale_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpsampleParameter::clear_scale_w() {
  scale_w_ = 0u;
  clear_has_scale_w();
}
::google::protobuf::uint32 UpsampleParameter::scale_w() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.scale_w)
  return scale_w_;
}
void UpsampleParameter::set_scale_w(::google::protobuf::uint32 value) {
  set_has_scale_w();
  scale_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.scale_w)
}

// optional bool pad_out_h = 4 [default = false];
bool UpsampleParameter::has_pad_out_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpsampleParameter::set_has_pad_out_h() {
  _has_bits_[0] |= 0x00000004u;
}
void UpsampleParameter::clear_has_pad_out_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpsampleParameter::clear_pad_out_h() {
  pad_out_h_ = false;
  clear_has_pad_out_h();
}
bool UpsampleParameter::pad_out_h() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.pad_out_h)
  return pad_out_h_;
}
void UpsampleParameter::set_pad_out_h(bool value) {
  set_has_pad_out_h();
  pad_out_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.pad_out_h)
}

// optional bool pad_out_w = 5 [default = false];
bool UpsampleParameter::has_pad_out_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpsampleParameter::set_has_pad_out_w() {
  _has_bits_[0] |= 0x00000008u;
}
void UpsampleParameter::clear_has_pad_out_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpsampleParameter::clear_pad_out_w() {
  pad_out_w_ = false;
  clear_has_pad_out_w();
}
bool UpsampleParameter::pad_out_w() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.pad_out_w)
  return pad_out_w_;
}
void UpsampleParameter::set_pad_out_w(bool value) {
  set_has_pad_out_w();
  pad_out_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.pad_out_w)
}

// optional uint32 upsample_h = 6;
bool UpsampleParameter::has_upsample_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpsampleParameter::set_has_upsample_h() {
  _has_bits_[0] |= 0x00000010u;
}
void UpsampleParameter::clear_has_upsample_h() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpsampleParameter::clear_upsample_h() {
  upsample_h_ = 0u;
  clear_has_upsample_h();
}
::google::protobuf::uint32 UpsampleParameter::upsample_h() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.upsample_h)
  return upsample_h_;
}
void UpsampleParameter::set_upsample_h(::google::protobuf::uint32 value) {
  set_has_upsample_h();
  upsample_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.upsample_h)
}

// optional uint32 upsample_w = 7;
bool UpsampleParameter::has_upsample_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpsampleParameter::set_has_upsample_w() {
  _has_bits_[0] |= 0x00000020u;
}
void UpsampleParameter::clear_has_upsample_w() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpsampleParameter::clear_upsample_w() {
  upsample_w_ = 0u;
  clear_has_upsample_w();
}
::google::protobuf::uint32 UpsampleParameter::upsample_w() const {
  // @@protoc_insertion_point(field_get:caffe.UpsampleParameter.upsample_w)
  return upsample_w_;
}
void UpsampleParameter::set_upsample_w(::google::protobuf::uint32 value) {
  set_has_upsample_w();
  upsample_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.UpsampleParameter.upsample_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PReLUParameter::kFillerFieldNumber;
const int PReLUParameter::kChannelSharedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PReLUParameter::PReLUParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.PReLUParameter)
}
PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filler()) {
    filler_ = new ::caffe::FillerParameter(*from.filler_);
  } else {
    filler_ = NULL;
  }
  channel_shared_ = from.channel_shared_;
  // @@protoc_insertion_point(copy_constructor:caffe.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_shared_) -
      reinterpret_cast<char*>(&filler_)) + sizeof(channel_shared_));
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:caffe.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
}

void PReLUParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PReLUParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PReLUParameter& PReLUParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

PReLUParameter* PReLUParameter::New(::google::protobuf::Arena* arena) const {
  PReLUParameter* n = new PReLUParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.PReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_filler()) {
    GOOGLE_DCHECK(filler_ != NULL);
    filler_->::caffe::FillerParameter::Clear();
  }
  channel_shared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PReLUParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.PReLUParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe.FillerParameter filler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_shared = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel_shared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.PReLUParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.PReLUParameter)
  return false;
#undef DO_
}

void PReLUParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.PReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filler_, output);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->channel_shared(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.PReLUParameter)
}

::google::protobuf::uint8* PReLUParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.PReLUParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->filler_, deterministic, target);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->channel_shared(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.PReLUParameter)
  return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.PReLUParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .caffe.FillerParameter filler = 1;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (has_channel_shared()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PReLUParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PReLUParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PReLUParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.PReLUParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.PReLUParameter)
    MergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_filler()->::caffe::FillerParameter::MergeFrom(from.filler());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_shared_ = from.channel_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PReLUParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {
  return true;
}

void PReLUParameter::Swap(PReLUParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PReLUParameter::InternalSwap(PReLUParameter* other) {
  using std::swap;
  swap(filler_, other->filler_);
  swap(channel_shared_, other->channel_shared_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PReLUParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
const ::caffe::FillerParameter& PReLUParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Triplet01LossParameter::kMarginFieldNumber;
const int Triplet01LossParameter::kPrintTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Triplet01LossParameter::Triplet01LossParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe.Triplet01LossParameter)
}
Triplet01LossParameter::Triplet01LossParameter(const Triplet01LossParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&print_time_, &from.print_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&print_time_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:caffe.Triplet01LossParameter)
}

void Triplet01LossParameter::SharedCtor() {
  _cached_size_ = 0;
  print_time_ = false;
  margin_ = 2;
}

Triplet01LossParameter::~Triplet01LossParameter() {
  // @@protoc_insertion_point(destructor:caffe.Triplet01LossParameter)
  SharedDtor();
}

void Triplet01LossParameter::SharedDtor() {
}

void Triplet01LossParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Triplet01LossParameter::descriptor() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Triplet01LossParameter& Triplet01LossParameter::default_instance() {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Triplet01LossParameter* Triplet01LossParameter::New(::google::protobuf::Arena* arena) const {
  Triplet01LossParameter* n = new Triplet01LossParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Triplet01LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe.Triplet01LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    print_time_ = false;
    margin_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Triplet01LossParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe.Triplet01LossParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float margin = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_time = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_print_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe.Triplet01LossParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe.Triplet01LossParameter)
  return false;
#undef DO_
}

void Triplet01LossParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe.Triplet01LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->margin(), output);
  }

  // optional bool print_time = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->print_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe.Triplet01LossParameter)
}

::google::protobuf::uint8* Triplet01LossParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe.Triplet01LossParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->margin(), target);
  }

  // optional bool print_time = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->print_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe.Triplet01LossParameter)
  return target;
}

size_t Triplet01LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe.Triplet01LossParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool print_time = 2 [default = false];
    if (has_print_time()) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 2];
    if (has_margin()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Triplet01LossParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe.Triplet01LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Triplet01LossParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Triplet01LossParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe.Triplet01LossParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe.Triplet01LossParameter)
    MergeFrom(*source);
  }
}

void Triplet01LossParameter::MergeFrom(const Triplet01LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe.Triplet01LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      print_time_ = from.print_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Triplet01LossParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe.Triplet01LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Triplet01LossParameter::CopyFrom(const Triplet01LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe.Triplet01LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triplet01LossParameter::IsInitialized() const {
  return true;
}

void Triplet01LossParameter::Swap(Triplet01LossParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Triplet01LossParameter::InternalSwap(Triplet01LossParameter* other) {
  using std::swap;
  swap(print_time_, other->print_time_);
  swap(margin_, other->margin_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Triplet01LossParameter::GetMetadata() const {
  protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fcaffe_2fproto_2fcaffe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Triplet01LossParameter

// optional float margin = 1 [default = 2];
bool Triplet01LossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Triplet01LossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000002u;
}
void Triplet01LossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
void Triplet01LossParameter::clear_margin() {
  margin_ = 2;
  clear_has_margin();
}
float Triplet01LossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.Triplet01LossParameter.margin)
  return margin_;
}
void Triplet01LossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.Triplet01LossParameter.margin)
}

// optional bool print_time = 2 [default = false];
bool Triplet01LossParameter::has_print_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Triplet01LossParameter::set_has_print_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Triplet01LossParameter::clear_has_print_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Triplet01LossParameter::clear_print_time() {
  print_time_ = false;
  clear_has_print_time();
}
bool Triplet01LossParameter::print_time() const {
  // @@protoc_insertion_point(field_get:caffe.Triplet01LossParameter.print_time)
  return print_time_;
}
void Triplet01LossParameter::set_print_time(bool value) {
  set_has_print_time();
  print_time_ = value;
  // @@protoc_insertion_point(field_set:caffe.Triplet01LossParameter.print_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

// @@protoc_insertion_point(global_scope)
